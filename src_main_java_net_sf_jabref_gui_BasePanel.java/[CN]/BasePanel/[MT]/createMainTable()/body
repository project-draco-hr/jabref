{
  final GlazedEntrySorter eventList=new GlazedEntrySorter(database.getEntryMap());
  database.addDatabaseChangeListener(eventList);
  database.addDatabaseChangeListener(SpecialFieldDatabaseChangeListener.getInstance());
  groupFilterList=new FilterList<>(eventList.getTheList(),EverythingMatcher.INSTANCE);
  if (filterGroupToggle != null) {
    filterGroupToggle.updateFilterList(groupFilterList);
  }
  searchFilterList=new FilterList<>(groupFilterList,EverythingMatcher.INSTANCE);
  if (filterSearchToggle != null) {
    filterSearchToggle.updateFilterList(searchFilterList);
  }
  tableFormat=new MainTableFormat(database);
  tableFormat.updateTableFormat();
  mainTable=new MainTable(tableFormat,searchFilterList,frame,this);
  selectionListener=new MainTableSelectionListener(this,mainTable);
  mainTable.updateFont();
  mainTable.addSelectionListener(selectionListener);
  mainTable.addMouseListener(selectionListener);
  mainTable.addKeyListener(selectionListener);
  mainTable.addFocusListener(selectionListener);
  groupsHighlightListener=new ListEventListener<BibEntry>(){
    @Override public void listChanged(    ListEvent<BibEntry> listEvent){
      if (Globals.prefs.getBoolean(JabRefPreferences.HIGHLIGHT_GROUPS_MATCHING_ANY)) {
        getGroupSelector().showMatchingGroups(mainTable.getSelectedEntries(),false);
      }
 else       if (Globals.prefs.getBoolean(JabRefPreferences.HIGHLIGHT_GROUPS_MATCHING_ALL)) {
        getGroupSelector().showMatchingGroups(mainTable.getSelectedEntries(),true);
      }
 else {
        getGroupSelector().showMatchingGroups(null,true);
      }
    }
  }
;
  mainTable.addSelectionListener(groupsHighlightListener);
  mainTable.getActionMap().put(Actions.CUT,new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        runCommand(Actions.CUT);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not cut",ex);
      }
    }
  }
);
  mainTable.getActionMap().put(Actions.COPY,new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        runCommand(Actions.COPY);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not copy",ex);
      }
    }
  }
);
  mainTable.getActionMap().put(Actions.PASTE,new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        runCommand(Actions.PASTE);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not paste",ex);
      }
    }
  }
);
  mainTable.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      final int keyCode=e.getKeyCode();
      final TreePath path=frame.groupSelector.getSelectionPath();
      final GroupTreeNode node=path == null ? null : (GroupTreeNode)path.getLastPathComponent();
      if (e.isControlDown()) {
switch (keyCode) {
case KeyEvent.VK_UP:
          e.consume();
        if (node != null) {
          frame.groupSelector.moveNodeUp(node,true);
        }
      break;
case KeyEvent.VK_DOWN:
    e.consume();
  if (node != null) {
    frame.groupSelector.moveNodeDown(node,true);
  }
break;
case KeyEvent.VK_LEFT:
e.consume();
if (node != null) {
frame.groupSelector.moveNodeLeft(node,true);
}
break;
case KeyEvent.VK_RIGHT:
e.consume();
if (node != null) {
frame.groupSelector.moveNodeRight(node,true);
}
break;
case KeyEvent.VK_PAGE_DOWN:
frame.nextTab.actionPerformed(null);
e.consume();
break;
case KeyEvent.VK_PAGE_UP:
frame.prevTab.actionPerformed(null);
e.consume();
break;
}
}
 else if (keyCode == KeyEvent.VK_ENTER) {
e.consume();
try {
runCommand(Actions.EDIT);
}
 catch (Throwable ex) {
LOGGER.warn("Could not run action based on key press",ex);
}
}
}
}
);
}
