{
  final List<BibEntry> bes=mainTable.getSelectedEntries();
  String field=DOI_FIELD;
  if (bes.size() == 1) {
    Object link=bes.get(0).getField(DOI_FIELD);
    if (bes.get(0).hasField(URL_FIELD)) {
      link=bes.get(0).getField(URL_FIELD);
      field=URL_FIELD;
    }
    if (link == null) {
      FileListEntry entry=null;
      FileListTableModel tm=new FileListTableModel();
      tm.setContent(bes.get(0).getField(Globals.FILE_FIELD));
      for (int i=0; i < tm.getRowCount(); i++) {
        FileListEntry flEntry=tm.getEntry(i);
        if (URL_FIELD.equalsIgnoreCase(flEntry.type.get().getName()) || PS_FIELD.equalsIgnoreCase(flEntry.type.get().getName()) || PDF_FIELD.equalsIgnoreCase(flEntry.type.get().getName())) {
          entry=flEntry;
          break;
        }
      }
      if (entry == null) {
        output(Localization.lang("No URL defined") + '.');
      }
 else {
        try {
          JabRefDesktop.openExternalFileAnyFormat(bibDatabaseContext,entry.link,entry.type);
          output(Localization.lang("External viewer called") + '.');
        }
 catch (        IOException e) {
          output(Localization.lang("Could not open link"));
          LOGGER.info("Could not open link",e);
        }
      }
    }
 else {
      try {
        JabRefDesktop.openExternalViewer(bibDatabaseContext,link.toString(),field);
        output(Localization.lang("External viewer called") + '.');
      }
 catch (      IOException ex) {
        output(Localization.lang("Error") + ": " + ex.getMessage());
      }
    }
  }
 else {
    output(Localization.lang("This operation requires exactly one item to be selected."));
  }
}
