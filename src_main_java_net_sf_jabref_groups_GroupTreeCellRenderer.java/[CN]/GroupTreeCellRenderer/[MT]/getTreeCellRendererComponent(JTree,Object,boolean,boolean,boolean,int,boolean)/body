{
  if (value == highlight1Cell) {
    selected=true;
  }
 else {
    selected=sel;
  }
  Component c=super.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,tmpHasFocus);
  if (!(value instanceof GroupTreeNode)) {
    return c;
  }
  AbstractGroup group=((GroupTreeNode)value).getGroup();
  if ((group == null) || !(c instanceof JLabel)) {
    return c;
  }
  JLabel label=(JLabel)c;
  if ((highlightBorderCell != null) && (highlightBorderCell == value)) {
    label.setBorder(BorderFactory.createLineBorder(Color.BLACK));
  }
 else {
    label.setBorder(BorderFactory.createEmptyBorder());
  }
  boolean italics=Globals.prefs.getBoolean(JabRefPreferences.GROUP_SHOW_DYNAMIC) && group.isDynamic();
  boolean red=false;
  if (highlight2Cells != null) {
    for (    Object highlight2Cell : highlight2Cells) {
      if (highlight2Cell == value) {
        red=true;
        break;
      }
    }
  }
  boolean underline=false;
  if (highlight3Cells != null) {
    for (    Object highlight3Cell : highlight3Cells) {
      if (highlight3Cell == value) {
        underline=true;
        break;
      }
    }
  }
  String name=group.getName();
  if (name.length() > GroupTreeCellRenderer.MAX_DISPLAYED_LETTERS) {
    name=name.substring(0,GroupTreeCellRenderer.MAX_DISPLAYED_LETTERS - 2) + "...";
  }
  StringBuilder sb=new StringBuilder();
  sb.append("<html>");
  if (red) {
    sb.append("<font color=\"#FF0000\">");
  }
  if (underline) {
    sb.append("<u>");
  }
  if (italics) {
    sb.append("<i>");
  }
  sb.append(StringUtil.quoteForHTML(name));
  if (Globals.prefs.getBoolean(JabRefPreferences.GROUP_SHOW_NUMBER_OF_ELEMENTS)) {
    if (group instanceof ExplicitGroup) {
      sb.append(" [").append(((ExplicitGroup)group).getNumEntries()).append("]");
    }
 else     if ((group instanceof KeywordGroup) || (group instanceof SearchGroup)) {
      int hits=0;
      for (      BibEntry entry : JabRef.jrf.getCurrentBasePanel().getDatabase().getEntries()) {
        if (group.contains(entry)) {
          hits++;
        }
      }
      sb.append(" [").append(hits).append("]");
    }
  }
  if (italics) {
    sb.append("</i>");
  }
  if (underline) {
    sb.append("</u>");
  }
  if (red) {
    sb.append("</font>");
  }
  sb.append("</html>");
  final String text=sb.toString();
  if (!label.getText().equals(text)) {
    label.setText(text);
  }
  label.setToolTipText("<html>" + group.getShortDescription() + "</html>");
  if (Globals.prefs.getBoolean(JabRefPreferences.GROUP_SHOW_ICONS)) {
switch (group.getHierarchicalContext()) {
case REFINING:
      if (label.getIcon() != GroupTreeCellRenderer.groupRefiningIcon) {
        label.setIcon(GroupTreeCellRenderer.groupRefiningIcon);
      }
    break;
case INCLUDING:
  if (label.getIcon() != GroupTreeCellRenderer.groupIncludingIcon) {
    label.setIcon(GroupTreeCellRenderer.groupIncludingIcon);
  }
break;
default :
if (label.getIcon() != GroupTreeCellRenderer.groupRegularIcon) {
label.setIcon(GroupTreeCellRenderer.groupRegularIcon);
}
break;
}
}
 else {
label.setIcon(null);
}
return c;
}
