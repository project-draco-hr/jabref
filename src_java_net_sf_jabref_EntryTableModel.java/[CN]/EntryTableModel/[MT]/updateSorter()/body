{
  iconCols.clear();
  int coln=1;
  if (panel.prefs.getBoolean("pdfColumn"))   iconCols.put(new Integer(coln++),PDF);
  if (panel.prefs.getBoolean("urlColumn"))   iconCols.put(new Integer(coln++),URL_);
  if (panel.prefs.getBoolean("citeseerColumn"))   iconCols.put(new Integer(coln++),CITESEER);
  padleft=1 + iconCols.size();
  Vector tmp=new Vector(2,1);
  for (int i=0; i < columns.length; i++) {
    if (columns[i].equals("author") || columns[i].equals("editor")) {
      tmp.add(new Integer(i));
    }
  }
  nameCols=new int[tmp.size()];
  for (int i=0; i < nameCols.length; i++) {
    nameCols[i]=((Integer)tmp.elementAt(i)).intValue();
  }
  namesAsIs=panel.prefs.getBoolean("namesAsIs");
  namesFf=panel.prefs.getBoolean("namesFf");
  List fields=new ArrayList(6), directions=new ArrayList(6), binary=new ArrayList(6);
  if (!panel.sortingBySearchResults && !panel.sortingByCiteSeerResults && !panel.sortingByGroup) {
    fields.add(Globals.MARKED);
    directions.add(Boolean.TRUE);
    binary.add(Boolean.FALSE);
  }
  if (panel.sortingByGroup) {
    fields.add(Globals.GROUPSEARCH);
    directions.add(Boolean.TRUE);
    binary.add(Boolean.FALSE);
  }
  if (panel.sortingBySearchResults) {
    fields.add(Globals.SEARCH);
    directions.add(Boolean.TRUE);
    binary.add(Boolean.FALSE);
  }
  if (panel.sortingByCiteSeerResults) {
    fields.add("citeseercitationcount");
    directions.add(Boolean.TRUE);
    binary.add(Boolean.FALSE);
  }
  directions.add(new Boolean(frame.prefs.getBoolean("priDescending")));
  directions.add(new Boolean(frame.prefs.getBoolean("secDescending")));
  directions.add(new Boolean(frame.prefs.getBoolean("terDescending")));
  fields.add(frame.prefs.get("priSort"));
  fields.add(frame.prefs.get("secSort"));
  fields.add(frame.prefs.get("terSort"));
  binary.add(new Boolean(Globals.prefs.getBoolean("priBinary")));
  binary.add(Boolean.FALSE);
  binary.add(Boolean.FALSE);
  if (sorter != null)   db.removeDatabaseChangeListener(sorter);
  int piv=Math.min(directions.size() - 1,3);
  Comparator comp=new EntryComparator(((Boolean)binary.get(piv)).booleanValue(),((Boolean)directions.get(piv)).booleanValue(),(String)fields.get(piv));
  piv--;
  while (piv >= 0) {
    String field=(String)fields.get(piv);
    if (field.equals(Globals.MARKED)) {
      comp=new MarkedComparator(comp);
    }
 else     comp=new EntryComparator(((Boolean)binary.get(piv)).booleanValue(),((Boolean)directions.get(piv)).booleanValue(),field,comp);
    piv--;
  }
  sorter=db.getSorter(comp);
}
