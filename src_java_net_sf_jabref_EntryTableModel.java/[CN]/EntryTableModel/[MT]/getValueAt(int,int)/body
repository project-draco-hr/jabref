{
  Object o;
  BibtexEntry be=sorter.getEntryAt(row);
  String[] iconType=getIconTypeForColumn(col);
  if (col == 0) {
    o="" + (row + 1);
  }
 else   if (iconType != null) {
    int hasField=-1;
    for (int i=iconType.length - 1; i >= 0; i--)     if (hasField(row,iconType[i]))     hasField=i;
    if (hasField < 0)     return null;
    return GUIGlobals.getTableIcon(iconType[hasField]);
  }
 else   if (columns[col - padleft].equals(GUIGlobals.TYPE_HEADER)) {
    o=be.getType().getName();
  }
 else {
    o=null;
    if (showShort)     o=be.getField("short" + columns[col - padleft]);
    if (o == null) {
      o=be.getField(columns[col - padleft]);
      for (int i=0; i < nameCols.length; i++) {
        if (col - padleft == nameCols[i]) {
          if (o == null) {
            return null;
          }
          if (namesAsIs)           return o;
          if (namesNatbib)           o=AuthorList.fixAuthor_Natbib((String)o);
          if (namesFf)           o=AuthorList.fixAuthor_firstNameFirstCommas((String)o,abbr_names);
          if (namesLf)           o=AuthorList.fixAuthor_lastNameFirstCommas((String)o,abbr_names);
          return o;
        }
      }
    }
  }
  return o;
}
