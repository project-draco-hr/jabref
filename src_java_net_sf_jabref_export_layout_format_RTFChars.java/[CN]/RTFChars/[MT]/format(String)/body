{
  StringBuffer sb=new StringBuffer("");
  StringBuffer currentCommand=null;
  boolean escaped=false, incommand=false;
  for (int i=0; i < field.length(); i++) {
    System.out.println("incommand=" + incommand + ". escaped="+ escaped+ ". currentCommand='"+ (currentCommand != null ? currentCommand.toString() : "")+ "'");
    System.out.println("sb: '" + sb.toString() + "'");
    char c=field.charAt(i);
    System.out.println("Char: '" + c + "'");
    if (escaped && (c == '\\')) {
      sb.append('\\');
      escaped=false;
    }
 else     if (c == '\\') {
      escaped=true;
      incommand=true;
      currentCommand=new StringBuffer();
    }
 else     if (!incommand && (c == '{' || c == '}')) {
    }
 else     if (Character.isLetter(c) || (Globals.SPECIAL_COMMAND_CHARS.indexOf("" + c) >= 0)) {
      escaped=false;
      if (!incommand) {
        sb.append(c);
      }
 else {
        currentCommand.append(c);
        testCharCom:         if ((currentCommand.length() == 1) && (Globals.SPECIAL_COMMAND_CHARS.indexOf(currentCommand.toString()) >= 0)) {
          if (i >= field.length() - 1)           break testCharCom;
          String command=currentCommand.toString();
          i++;
          c=field.charAt(i);
          String combody;
          if (c == '{') {
            IntAndString part=getPart(field,i,true);
            i+=part.i;
            combody=part.s;
          }
 else {
            combody=field.substring(i,i + 1);
          }
          String result=Globals.RTFCHARS.get(command + combody);
          if (result != null)           sb.append(result);
          incommand=false;
          escaped=false;
        }
      }
    }
 else {
      testContent:       if (!incommand || (!Character.isWhitespace(c) && (c != '{') && (c != '}')))       sb.append(c);
 else {
        assert(incommand);
        if ((c == '{') && (currentCommand.length() == 0)) {
          continue;
        }
 else         if ((c == '}') && (currentCommand.length() > 0)) {
          String command=currentCommand.toString();
          String result=Globals.RTFCHARS.get(command);
          if (result != null) {
            sb.append(result);
          }
          incommand=false;
          escaped=false;
          continue;
        }
        if (i >= field.length() - 1)         break testContent;
        if (((c == '{') || (c == ' ')) && (currentCommand.length() > 0)) {
          String command=currentCommand.toString();
          if (command.equals("em") || command.equals("emph") || command.equals("textit")) {
            IntAndString part=getPart(field,i,(c == '{'));
            i+=part.i;
            sb.append("{\\i ").append(part.s).append("}");
          }
 else           if (command.equals("textbf")) {
            IntAndString part=getPart(field,i,(c == '{'));
            i+=part.i;
            sb.append("{\\b ").append(part.s).append("}");
          }
 else {
            logger.fine("Unknown command " + command);
          }
          if (c == ' ') {
          }
        }
 else         sb.append(c);
      }
      incommand=false;
      escaped=false;
    }
  }
  char[] chars=sb.toString().toCharArray();
  sb=new StringBuffer();
  for (  char c : chars) {
    if (c < 128)     sb.append(c);
 else     sb.append("\\u").append((long)c).append('?');
  }
  return sb.toString().replaceAll("---","{\\\\emdash}").replaceAll("--","{\\\\endash}").replaceAll("``","{\\\\ldblquote}").replaceAll("''","{\\\\rdblquote}");
}
