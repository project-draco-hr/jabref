{
  int i;
  field=firstFormat(field);
  StringBuffer sb=new StringBuffer("");
  StringBuffer currentCommand=null;
  char c;
  boolean escaped=false, incommand=false;
  for (i=0; i < field.length(); i++) {
    c=field.charAt(i);
    if (escaped && (c == '\\')) {
      sb.append('\\');
      escaped=false;
    }
 else     if (c == '\\') {
      escaped=true;
      incommand=true;
      currentCommand=new StringBuffer();
    }
 else     if (!incommand && (c == '{' || c == '}')) {
    }
 else     if (Character.isLetter((char)c) || (Globals.SPECIAL_COMMAND_CHARS.indexOf("" + (char)c) >= 0)) {
      escaped=false;
      if (!incommand)       sb.append((char)c);
 else {
        currentCommand.append((char)c);
        testCharCom:         if ((currentCommand.length() == 1) && (Globals.SPECIAL_COMMAND_CHARS.indexOf(currentCommand.toString()) >= 0)) {
          if (i >= field.length() - 1)           break testCharCom;
          String command=currentCommand.toString();
          i++;
          c=field.charAt(i);
          String combody;
          if (c == '{') {
            IntAndString part=getPart(field,i);
            i+=part.i;
            combody=part.s;
          }
 else {
            combody=field.substring(i,i + 1);
          }
          Object result=Globals.RTFCHARS.get(command + combody);
          if (result != null)           sb.append((String)result);
          incommand=false;
          escaped=false;
        }
      }
    }
 else {
      testContent:       if (!incommand || (!Character.isWhitespace(c) && (c != '{')))       sb.append((char)c);
 else {
        if (i >= field.length() - 1)         break testContent;
        if (c == '{') {
          String command=currentCommand.toString();
          if (command.equals("emph") || command.equals("textit")) {
            IntAndString part=getPart(field,i);
            i+=part.i;
            sb.append("}{\\i " + part.s + "}{");
          }
 else           if (command.equals("textbf")) {
            IntAndString part=getPart(field,i);
            i+=part.i;
            sb.append("}{\\b " + part.s + "}{");
          }
        }
 else         sb.append((char)c);
      }
      incommand=false;
      escaped=false;
    }
  }
  return sb.toString();
}
