{
  if (g.debuggingOutput)   semPreds=new Vector();
  setGrammar(g);
  if (!(grammar instanceof LexerGrammar)) {
    tool.panic("Internal error generating lexer");
  }
  setupOutput(grammar.getClassName());
  genAST=false;
  saveText=true;
  tabs=0;
  genHeader();
  println(behavior.getHeaderAction(""));
  println("import java.io.InputStream;");
  println("import antlr.TokenStreamException;");
  println("import antlr.TokenStreamIOException;");
  println("import antlr.TokenStreamRecognitionException;");
  println("import antlr.CharStreamException;");
  println("import antlr.CharStreamIOException;");
  println("import antlr.ANTLRException;");
  println("import java.io.Reader;");
  println("import java.util.Hashtable;");
  println("import antlr." + grammar.getSuperClass() + ";");
  println("import antlr.InputBuffer;");
  println("import antlr.ByteBuffer;");
  println("import antlr.CharBuffer;");
  println("import antlr.Token;");
  println("import antlr.CommonToken;");
  println("import antlr.RecognitionException;");
  println("import antlr.NoViableAltForCharException;");
  println("import antlr.MismatchedCharException;");
  println("import antlr.TokenStream;");
  println("import antlr.ANTLRHashString;");
  println("import antlr.LexerSharedInputState;");
  println("import antlr.collections.impl.BitSet;");
  println("import antlr.SemanticException;");
  println(grammar.preambleAction.getText());
  String sup=null;
  if (grammar.superClass != null) {
    sup=grammar.superClass;
  }
 else {
    sup="antlr." + grammar.getSuperClass();
  }
  if (grammar.comment != null) {
    _println(grammar.comment);
  }
  print("public class " + grammar.getClassName() + " extends "+ sup);
  println(" implements " + grammar.tokenManager.getName() + TokenTypesFileSuffix+ ", TokenStream");
  Token tsuffix=(Token)grammar.options.get("classHeaderSuffix");
  if (tsuffix != null) {
    String suffix=Tool.stripFrontBack(tsuffix.getText(),"\"","\"");
    if (suffix != null) {
      print(", " + suffix);
    }
  }
  println(" {");
  print(processActionForTreeSpecifiers(grammar.classMemberAction.getText(),0,currentRule,null));
  println("public " + grammar.getClassName() + "(InputStream in) {");
  tabs++;
  println("this(new ByteBuffer(in));");
  tabs--;
  println("}");
  println("public " + grammar.getClassName() + "(Reader in) {");
  tabs++;
  println("this(new CharBuffer(in));");
  tabs--;
  println("}");
  println("public " + grammar.getClassName() + "(InputBuffer ib) {");
  tabs++;
  if (grammar.debuggingOutput)   println("this(new LexerSharedInputState(new antlr.debug.DebuggingInputBuffer(ib)));");
 else   println("this(new LexerSharedInputState(ib));");
  tabs--;
  println("}");
  println("public " + grammar.getClassName() + "(LexerSharedInputState state) {");
  tabs++;
  println("super(state);");
  if (grammar.debuggingOutput) {
    println("  ruleNames  = _ruleNames;");
    println("  semPredNames = _semPredNames;");
    println("  setupDebugging();");
  }
  println("literals = new Hashtable();");
  Enumeration keys=grammar.tokenManager.getTokenSymbolKeys();
  while (keys.hasMoreElements()) {
    String key=(String)keys.nextElement();
    if (key.charAt(0) != '"') {
      continue;
    }
    TokenSymbol sym=grammar.tokenManager.getTokenSymbol(key);
    if (sym instanceof StringLiteralSymbol) {
      StringLiteralSymbol s=(StringLiteralSymbol)sym;
      println("literals.put(new ANTLRHashString(" + s.getId() + ", this), new Integer("+ s.getTokenType()+ "));");
    }
  }
  tabs--;
  Enumeration ids;
  println("caseSensitiveLiterals = " + g.caseSensitiveLiterals + ";");
  println("setCaseSensitive(" + g.caseSensitive + ");");
  println("}");
  if (grammar.debuggingOutput) {
    println("private static final String _ruleNames[] = {");
    ids=grammar.rules.elements();
    int ruleNum=0;
    while (ids.hasMoreElements()) {
      GrammarSymbol sym=(GrammarSymbol)ids.nextElement();
      if (sym instanceof RuleSymbol)       println("  \"" + ((RuleSymbol)sym).getId() + "\",");
    }
    println("};");
  }
  genNextToken();
  ids=grammar.rules.elements();
  int ruleNum=0;
  while (ids.hasMoreElements()) {
    RuleSymbol sym=(RuleSymbol)ids.nextElement();
    if (!sym.getId().equals("mnextToken")) {
      genRule(sym,false,ruleNum++);
    }
    exitIfError();
  }
  if (grammar.debuggingOutput)   genSemPredMap();
  genBitsets(bitsetsUsed,((LexerGrammar)grammar).charVocabulary.size());
  println("");
  println("}");
  currentOutput.close();
  currentOutput=null;
}
