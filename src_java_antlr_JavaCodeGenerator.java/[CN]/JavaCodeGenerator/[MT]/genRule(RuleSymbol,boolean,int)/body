{
  tabs=1;
  if (DEBUG_CODE_GENERATOR)   System.out.println("genRule(" + s.getId() + ")");
  if (!s.isDefined()) {
    tool.error("undefined rule: " + s.getId());
    return;
  }
  RuleBlock rblk=s.getBlock();
  currentRule=rblk;
  currentASTResult=s.getId();
  boolean savegenAST=genAST;
  genAST=genAST && rblk.getAutoGen();
  saveText=rblk.getAutoGen();
  if (s.comment != null) {
    _println(s.comment);
  }
  print(s.access + " final ");
  if (rblk.returnAction != null) {
    _print(extractTypeOfAction(rblk.returnAction,rblk.getLine()) + " ");
  }
 else {
    _print("void ");
  }
  _print(s.getId() + "(");
  _print(commonExtraParams);
  if (commonExtraParams.length() != 0 && rblk.argAction != null) {
    _print(",");
  }
  if (rblk.argAction != null) {
    _println("");
    tabs++;
    println(rblk.argAction);
    tabs--;
    print(")");
  }
 else {
    _print(")");
  }
  _print(" throws " + exceptionThrown);
  if (grammar instanceof ParserGrammar) {
    _print(", TokenStreamException");
  }
 else   if (grammar instanceof LexerGrammar) {
    _print(", CharStreamException, TokenStreamException");
  }
  if (rblk.throwsSpec != null) {
    if (grammar instanceof LexerGrammar) {
      tool.error("user-defined throws spec not allowed (yet) for lexer rule " + rblk.ruleName);
    }
 else {
      _print(", " + rblk.throwsSpec);
    }
  }
  _println(" {");
  tabs++;
  if (rblk.returnAction != null)   println(rblk.returnAction + ";");
  println(commonLocalVars);
  if (grammar.traceRules) {
    if (grammar instanceof TreeWalkerGrammar) {
      println("traceIn(\"" + s.getId() + "\",_t);");
    }
 else {
      println("traceIn(\"" + s.getId() + "\");");
    }
  }
  if (grammar instanceof LexerGrammar) {
    if (s.getId().equals("mEOF"))     println("_ttype = Token.EOF_TYPE;");
 else     println("_ttype = " + s.getId().substring(1) + ";");
    println("int _saveIndex;");
  }
  if (grammar.debuggingOutput)   if (grammar instanceof ParserGrammar)   println("fireEnterRule(" + ruleNum + ",0);");
 else   if (grammar instanceof LexerGrammar)   println("fireEnterRule(" + ruleNum + ",_ttype);");
  if (grammar.debuggingOutput || grammar.traceRules) {
    println("try { // debugging");
    tabs++;
  }
  if (grammar instanceof TreeWalkerGrammar) {
    println(labeledElementASTType + " " + s.getId()+ "_AST_in = ("+ labeledElementASTType+ ")_t;");
  }
  if (grammar.buildAST) {
    println("returnAST = null;");
    println("ASTPair currentAST = new ASTPair();");
    println(labeledElementASTType + " " + s.getId()+ "_AST = null;");
  }
  genBlockPreamble(rblk);
  println("");
  ExceptionSpec unlabeledUserSpec=rblk.findExceptionSpec("");
  if (unlabeledUserSpec != null || rblk.getDefaultErrorHandler()) {
    println("try {      // for error handling");
    tabs++;
  }
  if (rblk.alternatives.size() == 1) {
    Alternative alt=rblk.getAlternativeAt(0);
    String pred=alt.semPred;
    if (pred != null)     genSemPred(pred,currentRule.line);
    if (alt.synPred != null) {
      tool.warning("Syntactic predicate ignored for single alternative",grammar.getFilename(),alt.synPred.getLine());
    }
    genAlt(alt,rblk);
  }
 else {
    boolean ok=grammar.theLLkAnalyzer.deterministic(rblk);
    JavaBlockFinishingInfo howToFinish=genCommonBlock(rblk,false);
    genBlockFinish(howToFinish,throwNoViable);
  }
  if (unlabeledUserSpec != null || rblk.getDefaultErrorHandler()) {
    tabs--;
    println("}");
  }
  if (unlabeledUserSpec != null) {
    genErrorHandler(unlabeledUserSpec);
  }
 else   if (rblk.getDefaultErrorHandler()) {
    println("catch (" + exceptionThrown + " ex) {");
    tabs++;
    if (grammar.hasSyntacticPredicate) {
      println("if (inputState.guessing==0) {");
      tabs++;
    }
    println("reportError(ex);");
    if (!(grammar instanceof TreeWalkerGrammar)) {
      Lookahead follow=grammar.theLLkAnalyzer.FOLLOW(1,rblk.endNode);
      String followSetName=getBitsetName(markBitsetForGen(follow.fset));
      println("consume();");
      println("consumeUntil(" + followSetName + ");");
    }
 else {
      println("if (_t!=null) {_t = _t.getNextSibling();}");
    }
    if (grammar.hasSyntacticPredicate) {
      tabs--;
      println("} else {");
      println("  throw ex;");
      println("}");
    }
    tabs--;
    println("}");
  }
  if (grammar.buildAST) {
    println("returnAST = " + s.getId() + "_AST;");
  }
  if (grammar instanceof TreeWalkerGrammar) {
    println("_retTree = _t;");
  }
  if (rblk.getTestLiterals()) {
    if (s.access.equals("protected")) {
      genLiteralsTestForPartialToken();
    }
 else {
      genLiteralsTest();
    }
  }
  if (grammar instanceof LexerGrammar) {
    println("if ( _createToken && _token==null && _ttype!=Token.SKIP ) {");
    println("	_token = makeToken(_ttype);");
    println("	_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));");
    println("}");
    println("_returnToken = _token;");
  }
  if (rblk.returnAction != null) {
    println("return " + extractIdOfAction(rblk.returnAction,rblk.getLine()) + ";");
  }
  if (grammar.debuggingOutput || grammar.traceRules) {
    tabs--;
    println("} finally { // debugging");
    tabs++;
    if (grammar.debuggingOutput)     if (grammar instanceof ParserGrammar)     println("fireExitRule(" + ruleNum + ",0);");
 else     if (grammar instanceof LexerGrammar)     println("fireExitRule(" + ruleNum + ",_ttype);");
    if (grammar.traceRules) {
      if (grammar instanceof TreeWalkerGrammar) {
        println("traceOut(\"" + s.getId() + "\",_t);");
      }
 else {
        println("traceOut(\"" + s.getId() + "\");");
      }
    }
    tabs--;
    println("}");
  }
  tabs--;
  println("}");
  println("");
  genAST=savegenAST;
}
