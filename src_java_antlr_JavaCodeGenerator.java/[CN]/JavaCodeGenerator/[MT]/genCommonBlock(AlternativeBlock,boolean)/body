{
  int nIF=0;
  boolean createdLL1Switch=false;
  int closingBracesOfIFSequence=0;
  JavaBlockFinishingInfo finishingInfo=new JavaBlockFinishingInfo();
  if (DEBUG_CODE_GENERATOR)   System.out.println("genCommonBlock(" + blk + ")");
  boolean savegenAST=genAST;
  genAST=genAST && blk.getAutoGen();
  boolean oldsaveTest=saveText;
  saveText=saveText && blk.getAutoGen();
  if (blk.not && analyzer.subruleCanBeInverted(blk,grammar instanceof LexerGrammar)) {
    if (DEBUG_CODE_GENERATOR)     System.out.println("special case: ~(subrule)");
    Lookahead p=analyzer.look(1,blk);
    if (blk.getLabel() != null && syntacticPredLevel == 0) {
      println(blk.getLabel() + " = " + lt1Value+ ";");
    }
    genElementAST(blk);
    String astArgs="";
    if (grammar instanceof TreeWalkerGrammar) {
      astArgs="_t,";
    }
    println("match(" + astArgs + getBitsetName(markBitsetForGen(p.fset))+ ");");
    if (grammar instanceof TreeWalkerGrammar) {
      println("_t = _t.getNextSibling();");
    }
    return finishingInfo;
  }
  if (blk.getAlternatives().size() == 1) {
    Alternative alt=blk.getAlternativeAt(0);
    if (alt.synPred != null) {
      tool.warning("Syntactic predicate superfluous for single alternative",grammar.getFilename(),blk.getAlternativeAt(0).synPred.getLine());
    }
    if (noTestForSingle) {
      if (alt.semPred != null) {
        genSemPred(alt.semPred,blk.line);
      }
      genAlt(alt,blk);
      return finishingInfo;
    }
  }
  int nLL1=0;
  for (int i=0; i < blk.getAlternatives().size(); i++) {
    Alternative a=blk.getAlternativeAt(i);
    if (suitableForCaseExpression(a)) {
      nLL1++;
    }
  }
  if (nLL1 >= makeSwitchThreshold) {
    String testExpr=lookaheadString(1);
    createdLL1Switch=true;
    if (grammar instanceof TreeWalkerGrammar) {
      println("if (_t==null) _t=ASTNULL;");
    }
    println("switch ( " + testExpr + ") {");
    for (int i=0; i < blk.alternatives.size(); i++) {
      Alternative alt=blk.getAlternativeAt(i);
      if (!suitableForCaseExpression(alt)) {
        continue;
      }
      Lookahead p=alt.cache[1];
      if (p.fset.degree() == 0 && !p.containsEpsilon()) {
        tool.warning("Alternate omitted due to empty prediction set",grammar.getFilename(),alt.head.getLine());
      }
 else {
        genCases(p.fset);
        println("{");
        tabs++;
        genAlt(alt,blk);
        println("break;");
        tabs--;
        println("}");
      }
    }
    println("default:");
    tabs++;
  }
  int startDepth=(grammar instanceof LexerGrammar) ? grammar.maxk : 0;
  for (int altDepth=startDepth; altDepth >= 0; altDepth--) {
    if (DEBUG_CODE_GENERATOR)     System.out.println("checking depth " + altDepth);
    for (int i=0; i < blk.alternatives.size(); i++) {
      Alternative alt=blk.getAlternativeAt(i);
      if (DEBUG_CODE_GENERATOR)       System.out.println("genAlt: " + i);
      if (createdLL1Switch && suitableForCaseExpression(alt)) {
        if (DEBUG_CODE_GENERATOR)         System.out.println("ignoring alt because it was in the switch");
        continue;
      }
      String e;
      boolean unpredicted=false;
      if (grammar instanceof LexerGrammar) {
        int effectiveDepth=alt.lookaheadDepth;
        if (effectiveDepth == GrammarAnalyzer.NONDETERMINISTIC) {
          effectiveDepth=grammar.maxk;
        }
        while (effectiveDepth >= 1 && alt.cache[effectiveDepth].containsEpsilon()) {
          effectiveDepth--;
        }
        if (effectiveDepth != altDepth) {
          if (DEBUG_CODE_GENERATOR)           System.out.println("ignoring alt because effectiveDepth!=altDepth;" + effectiveDepth + "!="+ altDepth);
          continue;
        }
        unpredicted=lookaheadIsEmpty(alt,effectiveDepth);
        e=getLookaheadTestExpression(alt,effectiveDepth);
      }
 else {
        unpredicted=lookaheadIsEmpty(alt,grammar.maxk);
        e=getLookaheadTestExpression(alt,grammar.maxk);
      }
      if (alt.cache[1].fset.degree() > caseSizeThreshold) {
        if (nIF == 0) {
          println("if " + e + " {");
        }
 else {
          println("else if " + e + " {");
        }
      }
 else       if (unpredicted && alt.semPred == null && alt.synPred == null) {
        if (nIF == 0) {
          println("{");
        }
 else {
          println("else {");
        }
        finishingInfo.needAnErrorClause=false;
      }
 else {
        if (alt.semPred != null) {
          ActionTransInfo tInfo=new ActionTransInfo();
          String actionStr=processActionForTreeSpecifiers(alt.semPred,blk.line,currentRule,tInfo);
          if (((grammar instanceof ParserGrammar) || (grammar instanceof LexerGrammar)) && grammar.debuggingOutput) {
            e="(" + e + "&& fireSemanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent.PREDICTING,"+ addSemPred(charFormatter.escapeString(actionStr))+ ","+ actionStr+ "))";
          }
 else {
            e="(" + e + "&&("+ actionStr+ "))";
          }
        }
        if (nIF > 0) {
          if (alt.synPred != null) {
            println("else {");
            tabs++;
            genSynPred(alt.synPred,e);
            closingBracesOfIFSequence++;
          }
 else {
            println("else if " + e + " {");
          }
        }
 else {
          if (alt.synPred != null) {
            genSynPred(alt.synPred,e);
          }
 else {
            if (grammar instanceof TreeWalkerGrammar) {
              println("if (_t==null) _t=ASTNULL;");
            }
            println("if " + e + " {");
          }
        }
      }
      nIF++;
      tabs++;
      genAlt(alt,blk);
      tabs--;
      println("}");
    }
  }
  String ps="";
  for (int i=1; i <= closingBracesOfIFSequence; i++) {
    ps+="}";
  }
  genAST=savegenAST;
  saveText=oldsaveTest;
  if (createdLL1Switch) {
    tabs--;
    finishingInfo.postscript=ps + "}";
    finishingInfo.generatedSwitch=true;
    finishingInfo.generatedAnIf=nIF > 0;
  }
 else {
    finishingInfo.postscript=ps;
    finishingInfo.generatedSwitch=false;
    finishingInfo.generatedAnIf=nIF > 0;
  }
  return finishingInfo;
}
