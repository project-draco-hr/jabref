{
  if (treeModel == null) {
    return;
  }
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  CheckableTreeNode root=(CheckableTreeNode)treeModel.getRoot();
  final List<File> fileList=getFileListFromNode(root);
  if (fileList == null || fileList.isEmpty()) {
    return;
  }
  progressBarImporting.setVisible(true);
  labelImportingInfo.setVisible(true);
  buttonApply.setVisible(false);
  buttonClose.setVisible(false);
  disOrEnableDialog(false);
  labelImportingInfo.setEnabled(true);
  progressBarImporting.setMinimum(0);
  progressBarImporting.setMaximum(fileList.size());
  progressBarImporting.setValue(0);
  progressBarImporting.setString("");
  final BibtexEntryType entryType=((BibtexEntryTypeWrapper)comboBoxEntryTypeSelection.getSelectedItem()).entryType;
  threadState=new int[]{1};
  JabRefExecutorService.INSTANCE.execute(new Runnable(){
    @Override public void run(){
      List<String> errors=new LinkedList<String>();
      int count=creatorManager.addEntriesFromFiles(fileList,database,frame.basePanel(),entryType,checkBoxWhyIsThereNoGetSelectedStupidSwing,new ChangeListener(){
        int counter;
        @Override public void stateChanged(        ChangeEvent e){
          progressBarImporting.setValue(++counter);
          progressBarImporting.setString(counter + " of " + progressBarImporting.getMaximum());
        }
      }
,errors);
      importFinishedHandler(count,errors);
    }
  }
);
}
