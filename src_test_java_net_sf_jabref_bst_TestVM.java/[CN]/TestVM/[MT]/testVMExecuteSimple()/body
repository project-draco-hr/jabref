{
{
    VM vm=new VM("" + "INTEGERS { variable.a } " + "FUNCTION {init.state.consts}{ #5 'variable.a := } "+ "EXECUTE {init.state.consts}");
    Vector<BibEntry> v=new Vector<>();
    vm.run(v);
    Assert.assertEquals(new Integer(5),vm.getIntegers().get("variable.a"));
  }
  VM vm=new VM("FUNCTION {a}{ #5 #5 = " + "#1 #2 = " + "#3 #4 < "+ "#4 #3 < "+ "#4 #4 < "+ "#3 #4 > "+ "#4 #3 > "+ "#4 #4 > "+ "\"H\" \"H\" = "+ "\"H\" \"Ha\" = } "+ "EXECUTE {a}");
  Vector<BibEntry> v=new Vector<>();
  vm.run(v);
  Assert.assertEquals(VM.FALSE,vm.getStack().pop());
  Assert.assertEquals(VM.TRUE,vm.getStack().pop());
  Assert.assertEquals(VM.FALSE,vm.getStack().pop());
  Assert.assertEquals(VM.TRUE,vm.getStack().pop());
  Assert.assertEquals(VM.FALSE,vm.getStack().pop());
  Assert.assertEquals(VM.FALSE,vm.getStack().pop());
  Assert.assertEquals(VM.FALSE,vm.getStack().pop());
  Assert.assertEquals(VM.TRUE,vm.getStack().pop());
  Assert.assertEquals(VM.FALSE,vm.getStack().pop());
  Assert.assertEquals(VM.TRUE,vm.getStack().pop());
  Assert.assertEquals(0,vm.getStack().size());
}
