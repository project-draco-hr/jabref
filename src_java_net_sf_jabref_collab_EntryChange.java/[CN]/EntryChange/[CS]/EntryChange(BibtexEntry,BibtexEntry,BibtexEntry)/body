{
  super();
  String key=tmpEntry.getCiteKey();
  if (key == null)   name="Modified entry";
 else   name="Modified entry: '" + key + "'";
  this.memEntry=memEntry;
  this.tmpEntry=tmpEntry;
  this.diskEntry=diskEntry;
  isModifiedLocally=!(Util.compareEntriesStrictly(memEntry,tmpEntry) > 1);
  modificationsAgree=(Util.compareEntriesStrictly(memEntry,diskEntry) > 1);
  TreeSet allFields=new TreeSet();
  Object[] o=memEntry.getAllFields();
  for (int i=0; i < o.length; i++)   allFields.add(o[i]);
  o=tmpEntry.getAllFields();
  for (int i=0; i < o.length; i++)   allFields.add(o[i]);
  o=diskEntry.getAllFields();
  for (int i=0; i < o.length; i++)   allFields.add(o[i]);
  int score=0;
  for (Iterator fld=allFields.iterator(); fld.hasNext(); ) {
    String field=(String)fld.next();
    String mem=(String)memEntry.getField(field), tmp=(String)tmpEntry.getField(field), disk=(String)diskEntry.getField(field);
    if ((tmp != null) && (disk != null)) {
      if (!tmp.equals(disk)) {
        add(new FieldChange(field,memEntry,mem,tmp,disk));
      }
    }
 else     if ((tmp == null) && (disk != null) && !disk.equals("")) {
      add(new FieldChange(field,memEntry,mem,tmp,disk));
    }
 else     if ((disk == null) && (tmp != null) && !tmp.equals("")&& (mem != null)&& !mem.equals("")) {
      add(new FieldChange(field,memEntry,mem,tmp,disk));
    }
  }
}
