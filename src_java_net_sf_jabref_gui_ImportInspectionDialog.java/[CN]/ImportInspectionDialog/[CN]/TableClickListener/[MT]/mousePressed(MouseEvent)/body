{
  if (e.isPopupTrigger()) {
    int[] rows=glTable.getSelectedRows();
    popup.show(glTable,e.getX(),e.getY());
    return;
  }
  final int col=glTable.columnAtPoint(e.getPoint()), row=glTable.rowAtPoint(e.getPoint());
  if ((col == DUPL_COL) && (glTable.getValueAt(row,col) != null)) {
    BibtexEntry first=(BibtexEntry)sortedList.get(row);
    BibtexEntry other=Util.containsDuplicate(panel.database(),first);
    if (other != null) {
      DuplicateResolverDialog diag=new DuplicateResolverDialog(ImportInspectionDialog.this,other,first,DuplicateResolverDialog.INSPECTION);
      Util.placeDialog(diag,ImportInspectionDialog.this);
      diag.setVisible(true);
      ImportInspectionDialog.this.toFront();
      if (diag.getSelected() == DuplicateResolverDialog.KEEP_UPPER) {
        entriesToDelete.add(other);
        entries.getReadWriteLock().writeLock().lock();
        first.setGroupHit(false);
        entries.getReadWriteLock().writeLock().unlock();
      }
 else       if (diag.getSelected() == DuplicateResolverDialog.KEEP_LOWER) {
        entries.getReadWriteLock().writeLock().lock();
        entries.remove(first);
        entries.getReadWriteLock().writeLock().unlock();
      }
 else       if (diag.getSelected() == DuplicateResolverDialog.KEEP_BOTH) {
        entries.getReadWriteLock().writeLock().lock();
        first.setGroupHit(false);
        entries.getReadWriteLock().writeLock().unlock();
      }
    }
  }
}
