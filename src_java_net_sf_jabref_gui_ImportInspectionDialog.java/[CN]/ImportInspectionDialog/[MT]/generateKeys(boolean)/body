{
  entries.getReadWriteLock().writeLock().lock();
  BibtexDatabase database=null;
  if (panel != null)   database=panel.database();
 else   database=new BibtexDatabase();
  List<String> keys=new ArrayList<String>(entries.size());
  for (Iterator<BibtexEntry> i=entries.iterator(); i.hasNext(); ) {
    BibtexEntry entry=i.next();
    try {
      entry.setId(Util.createNeutralId());
      database.insertEntry(entry);
    }
 catch (    KeyCollisionException ex) {
      ex.printStackTrace();
    }
    LabelPatternUtil.makeLabel(Globals.prefs.getKeyPattern(),database,entry);
    keys.add(entry.getCiteKey());
  }
  for (Iterator<BibtexEntry> i=entries.iterator(); i.hasNext(); ) {
    BibtexEntry entry=i.next();
    database.removeEntry(entry.getId());
  }
  entries.getReadWriteLock().writeLock().lock();
  glTable.repaint();
}
