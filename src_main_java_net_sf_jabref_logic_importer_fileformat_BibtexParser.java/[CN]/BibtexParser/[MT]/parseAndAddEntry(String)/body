{
  try {
    String commentsAndEntryTypeDefinition=dumpTextReadSoFarToString();
    BibEntry entry=parseEntry(type);
    entry.setCommentsBeforeEntry(commentsAndEntryTypeDefinition.substring(0,commentsAndEntryTypeDefinition.lastIndexOf('@')));
    entry.setParsedSerialization(commentsAndEntryTypeDefinition + dumpTextReadSoFarToString());
    boolean duplicateKey=database.insertEntryWithDuplicationCheck(entry);
    if (duplicateKey) {
      parserResult.addDuplicateKey(entry.getCiteKey());
    }
 else     if (!entry.getCiteKeyOptional().isPresent() || entry.getCiteKeyOptional().get().isEmpty()) {
      parserResult.addWarning(Localization.lang("Empty BibTeX key") + ": " + entry.getAuthorTitleYear(40)+ " ("+ Localization.lang("Grouping may not work for this entry.")+ ")");
    }
  }
 catch (  IOException ex) {
    LOGGER.warn("Could not parse entry",ex);
    parserResult.addWarning(Localization.lang("Error occurred when parsing entry") + ": '" + ex.getMessage()+ "'. "+ Localization.lang("Skipped entry."));
  }
}
