{
  List<BibEntry> bibitems=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  String str;
  boolean first=true;
  while ((str=reader.readLine()) != null) {
    str=str.trim();
    if (str.indexOf("%0") == 0) {
      if (first) {
        first=false;
      }
 else {
        sb.append(ENDOFRECORD);
      }
      sb.append(str);
    }
 else {
      sb.append(str);
    }
    sb.append('\n');
  }
  String[] entries=sb.toString().split(ENDOFRECORD);
  Map<String,String> hm=new HashMap<>();
  String author;
  String type;
  String editor;
  String artnum;
  for (  String entry : entries) {
    hm.clear();
    author="";
    type=BibEntry.DEFAULT_TYPE;
    editor="";
    artnum="";
    boolean isEditedBook=false;
    String[] fields=entry.trim().substring(1).split("\n%");
    for (    String field : fields) {
      if (field.length() < 3) {
        continue;
      }
      String prefix=field.substring(0,1);
      String val=field.substring(2);
      if ("A".equals(prefix)) {
        if ("".equals(author)) {
          author=val;
        }
 else {
          author+=" and " + val;
        }
      }
 else       if ("E".equals(prefix)) {
        if ("".equals(editor)) {
          editor=val;
        }
 else {
          editor+=" and " + val;
        }
      }
 else       if ("T".equals(prefix)) {
        hm.put(FieldName.TITLE,val);
      }
 else       if ("0".equals(prefix)) {
        if (val.indexOf("Journal") == 0) {
          type="article";
        }
 else         if (val.indexOf("Book Section") == 0) {
          type="incollection";
        }
 else         if (val.indexOf("Book") == 0) {
          type="book";
        }
 else         if (val.indexOf("Edited Book") == 0) {
          type="book";
          isEditedBook=true;
        }
 else         if (val.indexOf("Conference") == 0) {
          type="inproceedings";
        }
 else         if (val.indexOf("Report") == 0) {
          type="techreport";
        }
 else         if (val.indexOf("Review") == 0) {
          type="article";
        }
 else         if (val.indexOf("Thesis") == 0) {
          type="phdthesis";
        }
 else {
          type=BibEntry.DEFAULT_TYPE;
        }
      }
 else       if ("7".equals(prefix)) {
        hm.put(FieldName.EDITION,val);
      }
 else       if ("C".equals(prefix)) {
        hm.put(FieldName.ADDRESS,val);
      }
 else       if ("D".equals(prefix)) {
        hm.put(FieldName.YEAR,val);
      }
 else       if ("8".equals(prefix)) {
        hm.put(FieldName.DATE,val);
      }
 else       if ("J".equals(prefix)) {
        hm.putIfAbsent(FieldName.JOURNAL,val);
      }
 else       if ("B".equals(prefix)) {
        if ("article".equals(type)) {
          hm.put(FieldName.JOURNAL,val);
        }
 else         if ("book".equals(type) || "inbook".equals(type)) {
          hm.put(FieldName.SERIES,val);
        }
 else {
          hm.put(FieldName.BOOKTITLE,val);
        }
      }
 else       if ("I".equals(prefix)) {
        if ("phdthesis".equals(type)) {
          hm.put(FieldName.SCHOOL,val);
        }
 else {
          hm.put(FieldName.PUBLISHER,val);
        }
      }
 else       if ("P".equals(prefix)) {
        hm.put(FieldName.PAGES,val.replaceAll("([0-9]) *- *([0-9])","$1--$2"));
      }
 else       if ("V".equals(prefix)) {
        hm.put(FieldName.VOLUME,val);
      }
 else       if ("N".equals(prefix)) {
        hm.put(FieldName.NUMBER,val);
      }
 else       if ("U".equals(prefix)) {
        hm.put(FieldName.URL,val);
      }
 else       if ("R".equals(prefix)) {
        String doi=val;
        if (doi.startsWith("doi:")) {
          doi=doi.substring(4);
        }
        hm.put(FieldName.DOI,doi);
      }
 else       if ("O".equals(prefix)) {
        if (val.startsWith("Artn")) {
          String[] tokens=val.split("\\s");
          artnum=tokens[1];
        }
 else {
          hm.put(FieldName.NOTE,val);
        }
      }
 else       if ("K".equals(prefix)) {
        hm.put(FieldName.KEYWORDS,val);
      }
 else       if ("X".equals(prefix)) {
        hm.put(FieldName.ABSTRACT,val);
      }
 else       if ("9".equals(prefix)) {
        if (val.indexOf("Ph.D.") == 0) {
          type="phdthesis";
        }
        if (val.indexOf("Masters") == 0) {
          type="mastersthesis";
        }
      }
 else       if ("F".equals(prefix)) {
        hm.put(BibEntry.KEY_FIELD,LabelPatternUtil.checkLegalKey(val));
      }
    }
    if (isEditedBook && "".equals(editor)) {
      editor=author;
      author="";
    }
    if (!"".equals(author)) {
      hm.put(FieldName.AUTHOR,fixAuthor(author));
    }
    if (!"".equals(editor)) {
      hm.put(FieldName.EDITOR,fixAuthor(editor));
    }
    if (((hm.get(FieldName.PAGES) == null) || "-".equals(hm.get(FieldName.PAGES))) && !"".equals(artnum)) {
      hm.put(FieldName.PAGES,artnum);
    }
    BibEntry b=new BibEntry(DEFAULT_BIBTEXENTRY_ID,type);
    b.setField(hm);
    if (!b.getFieldNames().isEmpty()) {
      bibitems.add(b);
    }
  }
  return new ParserResult(bibitems);
}
