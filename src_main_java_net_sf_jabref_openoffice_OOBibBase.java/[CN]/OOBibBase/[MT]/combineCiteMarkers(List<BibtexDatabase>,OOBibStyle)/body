{
  XReferenceMarksSupplier supplier=UnoRuntime.queryInterface(XReferenceMarksSupplier.class,xCurrentComponent);
  XNameAccess nameAccess=supplier.getReferenceMarks();
  String[] names=getSortedReferenceMarks(nameAccess);
  final XTextRangeCompare compare=UnoRuntime.queryInterface(XTextRangeCompare.class,text);
  int piv=0;
  boolean madeModifications=false;
  while (piv < (names.length - 1)) {
    XTextRange r1=UnoRuntime.queryInterface(XTextContent.class,nameAccess.getByName(names[piv])).getAnchor().getEnd();
    XTextRange r2=UnoRuntime.queryInterface(XTextContent.class,nameAccess.getByName(names[piv + 1])).getAnchor().getStart();
    if (r1.getText() != r2.getText()) {
      piv++;
      continue;
    }
    XTextCursor mxDocCursor=r1.getText().createTextCursorByRange(r1);
    mxDocCursor.goRight((short)1,true);
    boolean couldExpand=true;
    while (couldExpand && (compare.compareRegionEnds(mxDocCursor,r2) > 0)) {
      couldExpand=mxDocCursor.goRight((short)1,true);
    }
    String text=mxDocCursor.getString();
    if ((text.indexOf('\n') == -1) && text.trim().isEmpty()) {
      if (style.isFormatCitations()) {
        XPropertySet xCursorProps=UnoRuntime.queryInterface(XPropertySet.class,mxDocCursor);
        String charStyle=style.getCitationCharacterFormat();
        try {
          xCursorProps.setPropertyValue("CharStyleName",charStyle);
        }
 catch (        Throwable ex) {
          throw new UndefinedCharacterFormatException(charStyle);
        }
      }
      List<String> keys=parseRefMarkName(names[piv]);
      keys.addAll(parseRefMarkName(names[piv + 1]));
      removeReferenceMark(names[piv]);
      removeReferenceMark(names[piv + 1]);
      ArrayList<BibtexEntry> entries=new ArrayList<>();
      for (      String key : keys) {
        for (        BibtexDatabase database : databases) {
          BibtexEntry entry=database.getEntryByKey(key);
          if (entry != null) {
            entries.add(OOUtil.createAdaptedEntry(entry));
            break;
          }
        }
      }
      Collections.sort(entries,new FieldComparator("year"));
      StringBuilder sb=new StringBuilder();
      int i=0;
      for (      BibtexEntry entry : entries) {
        if (i > 0) {
          sb.append(',');
        }
        sb.append(entry.getCiteKey());
        i++;
      }
      String keyString=sb.toString();
      boolean inParenthesis=true;
      String bName=getUniqueReferenceMarkName(keyString,inParenthesis ? OOBibBase.AUTHORYEAR_PAR : OOBibBase.AUTHORYEAR_INTEXT);
      insertReferenceMark(bName,"tmp",mxDocCursor,true,style);
      names[piv + 1]=bName;
      madeModifications=true;
    }
    piv++;
  }
  if (madeModifications) {
    updateSortedReferenceMarks();
    refreshCiteMarkers(databases,style);
  }
}
