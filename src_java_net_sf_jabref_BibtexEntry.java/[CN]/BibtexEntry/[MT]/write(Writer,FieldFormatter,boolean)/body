{
  out.write("@" + _type.getName().toUpperCase() + "{");
  String str=Util.shaveString((String)getField(BibtexFields.KEY_FIELD));
  out.write(((str == null) ? "" : str) + "," + Globals.NEWLINE);
  HashMap written=new HashMap();
  written.put(BibtexFields.KEY_FIELD,null);
  boolean hasWritten=false;
  String[] s=getRequiredFields();
  if (s != null)   for (int i=0; i < s.length; i++) {
    hasWritten=hasWritten | writeField(s[i],out,ff,hasWritten);
    written.put(s[i],null);
  }
  s=getOptionalFields();
  if (s != null)   for (int i=0; i < s.length; i++) {
    if (!written.containsKey(s[i])) {
      hasWritten=hasWritten | writeField(s[i],out,ff,hasWritten);
      written.put(s[i],null);
    }
  }
  TreeSet remainingFields=new TreeSet();
  for (Iterator i=_fields.keySet().iterator(); i.hasNext(); ) {
    String key=(String)i.next();
    boolean writeIt=(write ? BibtexFields.isWriteableField(key) : BibtexFields.isDisplayableField(key));
    if (!written.containsKey(key) && writeIt)     remainingFields.add(key);
  }
  for (Iterator i=remainingFields.iterator(); i.hasNext(); )   hasWritten=hasWritten | writeField((String)i.next(),out,ff,hasWritten);
  out.write((hasWritten ? Globals.NEWLINE : "") + "}" + Globals.NEWLINE);
}
