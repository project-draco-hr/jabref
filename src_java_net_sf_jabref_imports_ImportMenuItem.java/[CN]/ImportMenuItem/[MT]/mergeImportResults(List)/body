{
  BibtexDatabase database=new BibtexDatabase();
  ParserResult directParserResult=null;
  boolean anythingUseful=false;
  for (Iterator iterator=imports.iterator(); iterator.hasNext(); ) {
    Object[] o=(Object[])iterator.next();
    if (o[1] instanceof List) {
      List entries=(List)o[1];
      anythingUseful=anythingUseful | (entries.size() > 0);
      Util.setAutomaticFields(entries);
      for (Iterator j=entries.iterator(); j.hasNext(); ) {
        BibtexEntry entry=(BibtexEntry)j.next();
        try {
          entry.setId(Util.createNeutralId());
          database.insertEntry(entry);
        }
 catch (        KeyCollisionException e) {
          e.printStackTrace();
        }
      }
    }
 else     if (o[1] instanceof ParserResult) {
      ParserResult pr=(ParserResult)o[1];
      anythingUseful=anythingUseful || ((pr.getDatabase().getEntryCount() > 0) || (pr.getDatabase().getStringCount() > 0));
      if (directParserResult == null) {
        directParserResult=pr;
      }
      for (Iterator j=pr.getDatabase().getEntries().iterator(); j.hasNext(); ) {
        BibtexEntry entry=(BibtexEntry)j.next();
        try {
          database.insertEntry(entry);
        }
 catch (        KeyCollisionException e) {
          e.printStackTrace();
        }
      }
      for (Iterator j=pr.getDatabase().getStringKeySet().iterator(); j.hasNext(); ) {
        BibtexString bs=(BibtexString)(pr.getDatabase().getString(j.next()).clone());
        try {
          database.addString(bs);
        }
 catch (        KeyCollisionException e) {
        }
      }
    }
  }
  if (!anythingUseful)   return null;
  if ((imports.size() == 1) && (directParserResult != null)) {
    return directParserResult;
  }
 else {
    ParserResult pr=new ParserResult(database,new HashMap(),new HashMap());
    return pr;
  }
}
