{
  List<BibEntry> entries=panel.getSelectedEntries();
  AbstractGroup group=node.getNode().getGroup();
  Optional<EntriesGroupChange> changesRemove=Optional.empty();
  Optional<EntriesGroupChange> changesAdd=Optional.empty();
  List<BibEntry> toRemove=new ArrayList<>(entries.size());
  List<BibEntry> toAdd=new ArrayList<>(entries.size());
  for (  BibEntry entry : entries) {
    if (group.contains(entry)) {
      LOGGER.info("Removing entry " + entry);
      toRemove.add(entry);
    }
 else {
      LOGGER.info("Adding entry " + entry);
      toAdd.add(entry);
    }
  }
  if (!toRemove.isEmpty()) {
    changesRemove=node.getNode().removeFromGroup(toRemove);
  }
  if (!toAdd.isEmpty()) {
    changesAdd=node.getNode().addToGroup(toAdd);
  }
  if (changesRemove.isPresent()) {
    AbstractUndoableEdit undoRemove=UndoableChangeEntriesOfGroup.getUndoableEdit(node,changesRemove.get());
    if (changesAdd.isPresent() && undoRemove != null) {
      undoRemove.addEdit(UndoableChangeEntriesOfGroup.getUndoableEdit(node,changesAdd.get()));
    }
    panel.undoManager.addEdit(undoRemove);
  }
 else   if (changesAdd != null) {
    panel.undoManager.addEdit(UndoableChangeEntriesOfGroup.getUndoableEdit(node,changesAdd.get()));
  }
}
