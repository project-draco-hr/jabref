{
  final String res=JOptionPane.showInputDialog(parent,Globals.lang("Enter URL to download"));
  if ((res == null) || (res.trim().isEmpty())) {
    return;
  }
  final BibtexEntry targetEntry;
  if (entryEditor != null) {
    targetEntry=entryEditor.getEntry();
  }
 else {
    targetEntry=entry;
  }
  JabRefExecutorService.INSTANCE.execute(new Runnable(){
    public String getPlannedFileName(    String res){
      String suffix=off.getSuffix(res);
      if (suffix == null) {
        suffix='.' + fieldName.toLowerCase();
      }
      String plannedName;
      if (getKey() != null) {
        plannedName=getKey() + suffix;
      }
 else {
        plannedName=JOptionPane.showInputDialog(parent,Globals.lang("BibTeX key not set. Enter a name for the downloaded file"));
        if ((plannedName != null) && !off.accept(plannedName)) {
          plannedName+=suffix;
        }
      }
      if (Globals.ON_WIN) {
        plannedName=plannedName.replaceAll("\\?|\\*|\\<|\\>|\\||\\\"|\\:|\\.$|\\[|\\]","");
      }
 else       if (Globals.ON_MAC) {
        plannedName=plannedName.replaceAll(":","");
      }
      return plannedName;
    }
    @Override public void run(){
      String originalText=fieldEditor.getText();
      fieldEditor.setEnabled(false);
      boolean updateEditor=true;
      try {
        fieldEditor.setText(Globals.lang("Downloading..."));
        output(Globals.lang("Downloading..."));
        String plannedName=getPlannedFileName(res);
        String[] dirs=metaData.getFileDirectory(fieldName);
        String directory=null;
        for (        String dir : dirs) {
          if (new File(dir).exists()) {
            directory=dir;
            break;
          }
        }
        if (directory == null) {
          if (dirs.length > 0) {
            JOptionPane.showMessageDialog(parent,Globals.lang("Could not find directory for %0-files: %1",fieldName,dirs[0]),Globals.lang("Download file"),JOptionPane.ERROR_MESSAGE);
          }
 else {
            JOptionPane.showMessageDialog(parent,Globals.lang("No directory defined for %0-files",fieldName),Globals.lang("Download file"),JOptionPane.ERROR_MESSAGE);
          }
          return;
        }
        File file=new File(new File(directory),plannedName);
        URL url=new URL(res);
        try {
          URLDownload.buildMonitoredDownload(parent,url).downloadToFile(file);
        }
 catch (        IOException e2) {
          JOptionPane.showMessageDialog(parent,Globals.lang("Invalid URL") + ": " + e2.getMessage(),Globals.lang("Download file"),JOptionPane.ERROR_MESSAGE);
          Globals.logInfo("Error while downloading " + url.toString());
          return;
        }
        output(Globals.lang("Download completed"));
        String textToSet=file.getPath();
        if (textToSet.startsWith(directory)) {
          textToSet=textToSet.substring(directory.length(),textToSet.length());
          if (textToSet.startsWith(File.separator)) {
            textToSet=textToSet.substring(File.separator.length());
          }
        }
        if ((entryEditor == null) || (entryEditor.getEntry() != targetEntry)) {
          targetEntry.setField(fieldName,textToSet);
          fieldEditor.setText(textToSet);
          fieldEditor.setEnabled(true);
          updateEditor=false;
        }
 else {
          fieldEditor.setText(textToSet);
          fieldEditor.setEnabled(true);
          updateEditor=false;
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              entryEditor.updateField(fieldEditor);
            }
          }
);
        }
      }
 catch (      MalformedURLException e1) {
        JOptionPane.showMessageDialog(parent,Globals.lang("Invalid URL"),Globals.lang("Download file"),JOptionPane.ERROR_MESSAGE);
      }
 finally {
        if (updateEditor) {
          fieldEditor.setText(originalText);
          fieldEditor.setEnabled(true);
        }
      }
    }
  }
);
}
