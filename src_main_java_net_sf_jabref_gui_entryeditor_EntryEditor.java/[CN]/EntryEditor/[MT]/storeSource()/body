{
  BibtexParser bibtexParser=new BibtexParser(new java.io.StringReader(source.getText()));
  try {
    ParserResult parserResult=bibtexParser.parse();
    BibDatabase database=parserResult.getDatabase();
    if (database.getEntryCount() > 1) {
      throw new IllegalStateException("More than one entry found.");
    }
    if (database.getEntryCount() < 1) {
      if (parserResult.hasWarnings()) {
        throw new IllegalStateException(parserResult.warnings().get(0));
      }
 else {
        throw new IllegalStateException("No entries found.");
      }
    }
    NamedCompound compound=new NamedCompound(Localization.lang("source edit"));
    BibEntry newEntry=database.getEntryById(database.getKeySet().iterator().next());
    String id=entry.getId();
    String newKey=newEntry.getCiteKey();
    boolean anyChanged=false;
    boolean changedType=false;
    boolean duplicateWarning=false;
    boolean emptyWarning=(newKey == null) || newKey.isEmpty();
    if (panel.getDatabase().setCiteKeyForEntry(id,newKey)) {
      duplicateWarning=true;
    }
    for (    String field : entry.getFieldNames()) {
      if (BibtexFields.isDisplayableField(field) && !newEntry.hasField(field)) {
        compound.addEdit(new UndoableFieldChange(entry,field,entry.getField(field),null));
        entry.clearField(field);
        anyChanged=true;
      }
    }
    for (    String field : newEntry.getFieldNames()) {
      String oldValue=entry.getField(field);
      String newValue=newEntry.getField(field);
      if ((oldValue == null) || !oldValue.equals(newValue)) {
        new LatexFieldFormatter().format(newValue,field);
        compound.addEdit(new UndoableFieldChange(entry,field,oldValue,newValue));
        entry.setField(field,newValue);
        anyChanged=true;
      }
    }
    if (newEntry.getType() != entry.getType()) {
      compound.addEdit(new UndoableChangeType(entry,entry.getType(),newEntry.getType()));
      entry.setType(newEntry.getType());
      anyChanged=true;
      changedType=true;
    }
    compound.end();
    if (!anyChanged) {
      return true;
    }
    panel.undoManager.addEdit(compound);
    if (duplicateWarning) {
      warnDuplicateBibtexkey();
    }
 else     if (emptyWarning) {
      warnEmptyBibtexkey();
    }
 else {
      panel.output(Localization.lang("Stored entry") + '.');
    }
    lastSourceStringAccepted=source.getText();
    if (changedType) {
      panel.updateEntryEditorIfShowing();
    }
 else {
      updateAllFields();
      lastSourceAccepted=true;
      updateSource=true;
    }
    panel.markBaseChanged();
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        final int row=panel.mainTable.findEntry(entry);
        if (row >= 0) {
          panel.mainTable.ensureVisible(row);
        }
      }
    }
);
    return true;
  }
 catch (  IllegalStateException|IOException ex) {
    updateSource=false;
    lastSourceAccepted=false;
    tabbed.setSelectedComponent(srcPanel);
    Object[] options={Localization.lang("Edit"),Localization.lang("Revert to original source")};
    int answer=JOptionPane.showOptionDialog(frame,Localization.lang("Error") + ": " + ex.getMessage(),Localization.lang("Problem with parsing entry"),JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[0]);
    if (answer != 0) {
      updateSource=true;
      updateSource();
    }
    return false;
  }
}
