{
  tabbed.removeAll();
  tabs.clear();
  EntryType type=EntryTypes.getTypeOrDefault(entry.getType(),this.frame.getCurrentBasePanel().getBibDatabaseContext().getMode());
  List<String> fieldList=type.getRequiredFieldsFlat();
  EntryEditorTab reqPan=new EntryEditorTab(frame,panel,fieldList,this,true,false,Localization.lang("Required fields"));
  if (reqPan.fileListEditor != null) {
    fileListEditor=reqPan.fileListEditor;
  }
  tabbed.addTab(Localization.lang("Required fields"),IconTheme.JabRefIcon.REQUIRED.getSmallIcon(),reqPan.getPane(),Localization.lang("Show required fields"));
  tabs.add(reqPan);
  if ((type.getOptionalFields() != null) && (type.getOptionalFields().size() >= 1)) {
    EntryEditorTab optPan;
    if (this.frame.getCurrentBasePanel().getBibDatabaseContext().isBiblatexMode()) {
      optPan=new EntryEditorTab(frame,panel,type.getPrimaryOptionalFields(),this,false,true,Localization.lang("Optional fields"));
      if (optPan.fileListEditor != null) {
        fileListEditor=optPan.fileListEditor;
      }
      tabbed.addTab(Localization.lang("Optional fields"),IconTheme.JabRefIcon.OPTIONAL.getSmallIcon(),optPan.getPane(),Localization.lang("Show optional fields"));
      tabs.add(optPan);
      Set<String> deprecatedFields=new HashSet<>(EntryConverter.FIELD_ALIASES_TEX_TO_LTX.keySet());
      deprecatedFields.add("year");
      deprecatedFields.add("month");
      List<String> secondaryOptionalFields=type.getSecondaryOptionalFields();
      List<String> optionalFieldsNotPrimaryOrDeprecated=EntryUtil.getRemainder(secondaryOptionalFields,new ArrayList<>(deprecatedFields));
      Set<String> optionalFieldsAndAliases=new HashSet<>();
      for (      String field : type.getOptionalFields()) {
        optionalFieldsAndAliases.add(field);
        if (EntryConverter.FIELD_ALIASES_LTX_TO_TEX.containsKey(field)) {
          optionalFieldsAndAliases.add(EntryConverter.FIELD_ALIASES_LTX_TO_TEX.get(field));
        }
      }
      Set<String> usedOptionalFieldsDeprecated=new HashSet<>(deprecatedFields);
      usedOptionalFieldsDeprecated.retainAll(optionalFieldsAndAliases);
      EntryEditorTab optPan2=new EntryEditorTab(frame,panel,optionalFieldsNotPrimaryOrDeprecated,this,false,true,Localization.lang("Optional fields 2"));
      if (optPan2.fileListEditor != null) {
        fileListEditor=optPan2.fileListEditor;
      }
      tabbed.addTab(Localization.lang("Optional fields 2"),IconTheme.JabRefIcon.OPTIONAL.getSmallIcon(),optPan2.getPane(),Localization.lang("Show optional fields"));
      tabs.add(optPan2);
      if (!usedOptionalFieldsDeprecated.isEmpty()) {
        EntryEditorTab optPan3;
        optPan3=new EntryEditorTab(frame,panel,new ArrayList<>(usedOptionalFieldsDeprecated),this,false,true,Localization.lang("Deprecated fields"));
        if (optPan3.fileListEditor != null) {
          fileListEditor=optPan3.fileListEditor;
        }
        tabbed.addTab(Localization.lang("Deprecated fields"),IconTheme.JabRefIcon.OPTIONAL.getSmallIcon(),optPan3.getPane(),Localization.lang("Show deprecated bibtex fields"));
        tabs.add(optPan3);
      }
    }
 else {
      optPan=new EntryEditorTab(frame,panel,type.getOptionalFields(),this,false,false,Localization.lang("Optional fields"));
      if (optPan.fileListEditor != null) {
        fileListEditor=optPan.fileListEditor;
      }
      tabbed.addTab(Localization.lang("Optional fields"),IconTheme.JabRefIcon.OPTIONAL.getSmallIcon(),optPan.getPane(),Localization.lang("Show optional fields"));
      tabs.add(optPan);
    }
  }
  EntryEditorTabList tabList=Globals.prefs.getEntryEditorTabList();
  for (int i=0; i < tabList.getTabCount(); i++) {
    EntryEditorTab newTab=new EntryEditorTab(frame,panel,tabList.getTabFields(i),this,false,false,tabList.getTabName(i));
    if (newTab.fileListEditor != null) {
      fileListEditor=newTab.fileListEditor;
    }
    tabbed.addTab(tabList.getTabName(i),newTab.getPane());
    tabs.add(newTab);
  }
  srcPanel.setName(Localization.lang("BibTeX source"));
  tabbed.addTab(Localization.lang("BibTeX source"),IconTheme.JabRefIcon.SOURCE.getSmallIcon(),srcPanel,Localization.lang("Show/edit BibTeX source"));
  tabs.add(srcPanel);
  sourceIndex=tabs.size() - 1;
  srcPanel.setFocusCycleRoot(true);
}
