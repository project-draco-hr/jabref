{
  storeCurrentEdit();
  Optional<String> oldValue=entry.getCiteKeyOptional();
  if (oldValue.isPresent()) {
    if (Globals.prefs.getBoolean(JabRefPreferences.AVOID_OVERWRITING_KEY)) {
      panel.output(Localization.lang("Not overwriting existing key. To change this setting, open Options -> Prefererences -> BibTeX key generator"));
      return;
    }
 else     if (Globals.prefs.getBoolean(JabRefPreferences.WARN_BEFORE_OVERWRITING_KEY)) {
      CheckBoxMessage cbm=new CheckBoxMessage(Localization.lang("The current BibTeX key will be overwritten. Continue?"),Localization.lang("Disable this confirmation dialog"),false);
      int answer=JOptionPane.showConfirmDialog(frame,cbm,Localization.lang("Overwrite key"),JOptionPane.YES_NO_OPTION);
      if (cbm.isSelected()) {
        Globals.prefs.putBoolean(JabRefPreferences.WARN_BEFORE_OVERWRITING_KEY,false);
      }
      if (answer == JOptionPane.NO_OPTION) {
        return;
      }
    }
  }
  BibtexKeyPatternUtil.makeLabel(panel.getBibDatabaseContext().getMetaData().getCiteKeyPattern(Globals.prefs.getBibtexKeyPatternPreferences().getKeyPattern()),panel.getDatabase(),entry,Globals.prefs.getBibtexKeyPatternPreferences());
  panel.getUndoManager().addEdit(new UndoableKeyChange(entry,oldValue.orElse(null),entry.getCiteKeyOptional().get()));
  String bibtexKeyData=entry.getCiteKeyOptional().get();
  setField(BibEntry.KEY_FIELD,bibtexKeyData);
  updateSource();
  panel.markBaseChanged();
}
