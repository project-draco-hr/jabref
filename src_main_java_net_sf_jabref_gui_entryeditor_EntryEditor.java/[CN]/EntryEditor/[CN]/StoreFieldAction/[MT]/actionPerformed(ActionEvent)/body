{
  boolean movingAway=movingToDifferentEntry;
  movingToDifferentEntry=false;
  if (event.getSource() instanceof TextField) {
    TextField textField=(TextField)event.getSource();
    int initialCaretPosition=textField.getCaretPosition();
    String oldValue=entry.getCiteKey();
    String newValue=textField.getText();
    if (newValue.isEmpty()) {
      newValue=null;
    }
    if (oldValue == null && newValue == null || oldValue != null && newValue != null && oldValue.equals(newValue)) {
      return;
    }
    String cleaned=Util.checkLegalKey(newValue);
    if (cleaned != null && !cleaned.equals(newValue)) {
      JOptionPane.showMessageDialog(frame,Localization.lang("Invalid BibTeX key"),Localization.lang("Error setting field"),JOptionPane.ERROR_MESSAGE);
      textField.setInvalidBackgroundColor();
      return;
    }
 else {
      textField.setValidBackgroundColor();
    }
    boolean isDuplicate=panel.database.setCiteKeyForEntry(entry.getId(),newValue);
    if (newValue != null) {
      if (isDuplicate) {
        warnDuplicateBibtexkey();
      }
 else {
        panel.output(Localization.lang("BibTeX key is unique."));
      }
    }
 else {
      warnEmptyBibtexkey();
    }
    UndoableKeyChange undoableKeyChange=new UndoableKeyChange(panel.database,entry.getId(),oldValue,newValue);
    if (Util.updateTimeStampIsSet()) {
      NamedCompound ce=Util.doUpdateTimeStamp(entry,undoableKeyChange);
      panel.undoManager.addEdit(ce);
    }
 else {
      panel.undoManager.addEdit(undoableKeyChange);
    }
    textField.setValidBackgroundColor();
    if (textField.getTextComponent().hasFocus()) {
      textField.setActiveBackgroundColor();
    }
    updateSource();
    panel.markBaseChanged();
    textField.setCaretPosition(initialCaretPosition);
  }
 else   if (event.getSource() instanceof FieldEditor) {
    String toSet=null;
    FieldEditor fieldEditor=(FieldEditor)event.getSource();
    int initialCaretPosition=0;
    if (fieldEditor instanceof JTextComponent) {
      initialCaretPosition=((JTextComponent)fieldEditor).getCaretPosition();
    }
    boolean set;
    String currentText=fieldEditor.getText();
    String trim=currentText.trim();
    if (!trim.isEmpty()) {
      toSet=trim;
    }
    if (toSet == null) {
      set=entry.getField(fieldEditor.getFieldName()) != null;
    }
 else {
      set=!(entry.getField(fieldEditor.getFieldName()) != null && toSet.equals(entry.getField(fieldEditor.getFieldName())));
    }
    if (set) {
      try {
        if (toSet != null) {
          new LatexFieldFormatter().format(toSet,fieldEditor.getFieldName());
        }
        String oldValue=entry.getField(fieldEditor.getFieldName());
        if (toSet != null) {
          entry.setField(fieldEditor.getFieldName(),toSet);
        }
 else {
          entry.clearField(fieldEditor.getFieldName());
        }
        fieldEditor.setValidBackgroundColor();
        AutoCompleter aComp=panel.getAutoCompleters().get(fieldEditor.getFieldName());
        if (aComp != null) {
          aComp.addBibtexEntry(entry);
        }
        UndoableFieldChange undoableFieldChange=new UndoableFieldChange(entry,fieldEditor.getFieldName(),oldValue,toSet);
        if (Util.updateTimeStampIsSet()) {
          NamedCompound ce=Util.doUpdateTimeStamp(entry,undoableFieldChange);
          panel.undoManager.addEdit(ce);
        }
 else {
          panel.undoManager.addEdit(undoableFieldChange);
        }
        updateSource();
        panel.markBaseChanged();
        if (fieldEditor instanceof JTextComponent) {
          ((JTextComponent)fieldEditor).setCaretPosition(initialCaretPosition);
        }
      }
 catch (      IllegalArgumentException ex) {
        JOptionPane.showMessageDialog(frame,Localization.lang("Error") + ": " + ex.getMessage(),Localization.lang("Error setting field"),JOptionPane.ERROR_MESSAGE);
        fieldEditor.setInvalidBackgroundColor();
      }
    }
 else {
      fieldEditor.setValidBackgroundColor();
    }
    if (fieldEditor.getTextComponent().hasFocus()) {
      fieldEditor.setBackground(GUIGlobals.activeEditor);
    }
  }
 else   if (source.isEditable() && !source.getText().equals(lastSourceStringAccepted)) {
    boolean accepted=storeSource(true);
  }
  if (!movingAway && isShowing()) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        final int row=panel.mainTable.findEntry(entry);
        if (row >= 0) {
          panel.mainTable.ensureVisible(row);
        }
      }
    }
);
  }
}
