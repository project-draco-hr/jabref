{
  if (!s.startsWith(SearchGroup.ID)) {
    throw new Exception("Internal error: SearchGroup cannot be created from \"" + s + "\". "+ "Please report this on www.sf.net/projects/jabref");
  }
  QuotedStringTokenizer tok=new QuotedStringTokenizer(s.substring(SearchGroup.ID.length()),AbstractGroup.SEPARATOR,AbstractGroup.QUOTE_CHAR);
switch (version) {
case 0:
case 1:
case 2:
{
      String name=tok.nextToken();
      String expression=tok.nextToken();
      boolean caseSensitive=Integer.parseInt(tok.nextToken()) == 1;
      boolean regExp=Integer.parseInt(tok.nextToken()) == 1;
      return new SearchGroup(Util.unquote(name,AbstractGroup.QUOTE_CHAR),Util.unquote(expression,AbstractGroup.QUOTE_CHAR),caseSensitive,regExp,AbstractGroup.INDEPENDENT);
    }
case 3:
{
    String name=tok.nextToken();
    int context=Integer.parseInt(tok.nextToken());
    String expression=tok.nextToken();
    boolean caseSensitive=Integer.parseInt(tok.nextToken()) == 1;
    boolean regExp=Integer.parseInt(tok.nextToken()) == 1;
    return new SearchGroup(Util.unquote(name,AbstractGroup.QUOTE_CHAR),Util.unquote(expression,AbstractGroup.QUOTE_CHAR),caseSensitive,regExp,context);
  }
default :
throw new UnsupportedVersionException("SearchGroup",version);
}
}
