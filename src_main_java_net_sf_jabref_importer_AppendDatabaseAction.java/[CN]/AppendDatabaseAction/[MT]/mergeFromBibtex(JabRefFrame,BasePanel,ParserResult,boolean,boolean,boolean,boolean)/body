{
  BibDatabase fromDatabase=pr.getDatabase();
  ArrayList<BibEntry> appendedEntries=new ArrayList<>();
  ArrayList<BibEntry> originalEntries=new ArrayList<>();
  BibDatabase database=panel.database();
  BibEntry originalEntry;
  NamedCompound ce=new NamedCompound(Localization.lang("Append database"));
  MetaData meta=pr.getMetaData();
  if (importEntries) {
    boolean overwriteOwner=Globals.prefs.getBoolean(JabRefPreferences.OVERWRITE_OWNER);
    boolean overwriteTimeStamp=Globals.prefs.getBoolean(JabRefPreferences.OVERWRITE_TIME_STAMP);
    for (    String key : fromDatabase.getKeySet()) {
      originalEntry=fromDatabase.getEntryById(key);
      BibEntry be=(BibEntry)originalEntry.clone();
      be.setId(IdGenerator.next());
      Util.setAutomaticFields(be,overwriteOwner,overwriteTimeStamp);
      database.insertEntry(be);
      appendedEntries.add(be);
      originalEntries.add(originalEntry);
      ce.addEdit(new UndoableInsertEntry(database,be,panel));
    }
  }
  if (importStrings) {
    for (    BibtexString bs : fromDatabase.getStringValues()) {
      if (!database.hasStringLabel(bs.getName())) {
        database.addString(bs);
        ce.addEdit(new UndoableInsertString(panel,database,bs));
      }
    }
  }
  if (importGroups) {
    GroupTreeNode newGroups=meta.getGroups();
    if (newGroups != null) {
      if (newGroups.getGroup() instanceof AllEntriesGroup) {
        ExplicitGroup group=new ExplicitGroup("Imported",GroupHierarchyType.INDEPENDENT);
        newGroups.setGroup(group);
        for (        BibEntry appendedEntry : appendedEntries) {
          group.addEntry(appendedEntry);
        }
      }
      frame.groupSelector.addGroups(newGroups,ce);
      GroupTreeNode node;
      ExplicitGroup group;
      BibEntry entry;
      for (Enumeration<GroupTreeNode> e=newGroups.preorderEnumeration(); e.hasMoreElements(); ) {
        node=e.nextElement();
        if (!(node.getGroup() instanceof ExplicitGroup)) {
          continue;
        }
        group=(ExplicitGroup)node.getGroup();
        for (int i=0; i < originalEntries.size(); ++i) {
          entry=originalEntries.get(i);
          if (group.contains(entry)) {
            group.removeEntry(entry);
            group.addEntry(appendedEntries.get(i));
          }
        }
      }
      frame.groupSelector.revalidateGroups();
    }
  }
  if (importSelectorWords) {
    for (    String s : meta) {
      if (s.startsWith(Globals.SELECTOR_META_PREFIX)) {
        panel.loadedDatabase.getMetaData().putData(s,meta.getData(s));
      }
    }
  }
  ce.end();
  panel.undoManager.addEdit(ce);
  panel.markBaseChanged();
}
