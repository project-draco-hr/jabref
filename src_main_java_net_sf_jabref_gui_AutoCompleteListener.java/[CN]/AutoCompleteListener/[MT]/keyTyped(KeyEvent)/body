{
  LOGGER.debug("key typed event caught " + e.getKeyCode());
  char ch=e.getKeyChar();
  if (ch == '\n') {
    return;
  }
  if ((e.getModifiers() | InputEvent.SHIFT_MASK) == InputEvent.SHIFT_MASK) {
    if (Character.isLetter(ch) || Character.isDigit(ch) || (Character.isWhitespace(ch) && completer.isSingleUnitField())) {
      JTextComponent comp=(JTextComponent)e.getSource();
      if (toSetIn == null) {
        LOGGER.debug("toSetIn is null");
      }
 else {
        LOGGER.debug("toSetIn: >" + toSetIn + '<');
      }
      if ((toSetIn != null) && (toSetIn.length() > 1) && (ch == toSetIn.charAt(1))) {
        LOGGER.debug("cont");
        toSetIn=toSetIn.substring(1);
        if (!toSetIn.isEmpty()) {
          int cp=comp.getCaretPosition();
          comp.select((cp + 1) - toSetIn.length(),cp);
          lastBeginning=lastBeginning + ch;
          e.consume();
          lastCaretPosition=comp.getCaretPosition();
          lastCompletions=findCompletions(lastBeginning,comp);
          lastShownCompletion=0;
          for (int i=0; i < lastCompletions.length; i++) {
            String lastCompletion=lastCompletions[i];
            if (lastCompletion.endsWith(toSetIn)) {
              lastShownCompletion=i;
              break;
            }
          }
          if (toSetIn.length() < 2) {
            String text=comp.getText();
            comp.setText(text.substring(0,lastCaretPosition - lastBeginning.length()) + lastBeginning + text.substring(lastCaretPosition));
            toSetIn=null;
          }
          return;
        }
      }
      if ((toSetIn != null) && ((toSetIn.length() <= 1) || (ch != toSetIn.charAt(1)))) {
        lastBeginning=lastBeginning + ch;
        LOGGER.debug("discont toSetIn: >" + toSetIn + "'<' lastBeginning: >"+ lastBeginning+ '<');
        String[] completed=findCompletions(lastBeginning,comp);
        if ((completed != null) && (completed.length > 0)) {
          lastShownCompletion=0;
          lastCompletions=completed;
          String sno=completed[0];
          int lastLen=toSetIn.length() - 1;
          toSetIn=sno.substring(lastBeginning.length() - 1);
          String text=comp.getText();
          comp.setText(text.substring(0,(lastCaretPosition - lastLen - lastBeginning.length()) + 1) + sno + text.substring(lastCaretPosition));
          int startSelect=(lastCaretPosition + 1) - lastLen;
          int endSelect=(lastCaretPosition + toSetIn.length()) - lastLen;
          comp.select(startSelect,endSelect);
          lastCaretPosition=comp.getCaretPosition();
          e.consume();
          return;
        }
 else {
          setUnmodifiedTypedLetters(comp,true,false);
          e.consume();
          toSetIn=null;
          return;
        }
      }
      LOGGER.debug("case else");
      comp.replaceSelection("");
      StringBuffer currentword=getCurrentWord(comp);
      if (currentword == null) {
        currentword=new StringBuffer();
      }
      assert(!Character.isISOControl(ch));
      currentword.append(ch);
      startCompletion(currentword,e);
      return;
    }
 else {
      if (Character.isWhitespace(ch)) {
        assert(!completer.isSingleUnitField());
        LOGGER.debug("whitespace && !singleUnitField");
        setUnmodifiedTypedLetters((JTextComponent)e.getSource(),false,true);
        resetAutoCompletion();
        return;
      }
      LOGGER.debug("No letter/digit/whitespace or CHAR_UNDEFINED");
      setUnmodifiedTypedLetters((JTextComponent)e.getSource(),false,!Character.isISOControl(ch));
      resetAutoCompletion();
      return;
    }
  }
  resetAutoCompletion();
}
