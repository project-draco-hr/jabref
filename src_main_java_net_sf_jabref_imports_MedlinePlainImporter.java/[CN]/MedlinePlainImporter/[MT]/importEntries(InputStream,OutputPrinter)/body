{
  ArrayList<BibtexEntry> bibitems=new ArrayList<BibtexEntry>();
  StringBuffer sb=new StringBuffer();
  BufferedReader in=new BufferedReader(ImportFormatReader.getReaderDefaultEncoding(stream));
  String str;
  while ((str=in.readLine()) != null) {
    sb.append(str);
    sb.append("\n");
  }
  String[] entries=sb.toString().replaceAll("\u2013","-").replaceAll("\u2014","--").replaceAll("\u2015","--").split("\\n\\n");
  for (  String entry1 : entries) {
    if (entry1.trim().length() == 0)     continue;
    String type="", author="", editor="", comment="";
    HashMap<String,String> hm=new HashMap<String,String>();
    String[] fields=entry1.split("\n");
    for (int j=0; j < fields.length; j++) {
      if (fields[j].equals(""))       continue;
      StringBuffer current=new StringBuffer(fields[j]);
      boolean done=false;
      while (!done && (j < fields.length - 1)) {
        if (fields[j + 1].length() <= 4)         System.out.println("aaa");
        if (fields[j + 1].charAt(4) != '-') {
          if ((current.length() > 0) && !Character.isWhitespace(current.charAt(current.length() - 1)))           current.append(' ');
          current.append(fields[j + 1].trim());
          j++;
        }
 else         done=true;
      }
      String entry=current.toString();
      String lab=entry.substring(0,entry.indexOf('-')).trim();
      String val=entry.substring(entry.indexOf('-') + 1).trim();
      if (lab.equals("PT")) {
        val=val.toLowerCase();
        if (val.equals("BOOK"))         type="book";
 else         if (val.equals("journal article") || val.equals("classical article") || val.equals("corrected and republished article")|| val.equals("historical article")|| val.equals("introductory journal article")|| val.equals("newspaper article"))         type="article";
 else         if (val.equals("clinical conference") || val.equals("consensus development conference") || val.equals("consensus development conference, NIH"))         type="conference";
 else         if (val.equals("technical report"))         type="techreport";
 else         if (val.equals("editorial"))         type="inproceedings";
 else         if (val.equals("overall"))         type="proceedings";
 else         if (type.equals(""))         type="other";
      }
 else       if (lab.equals("TI")) {
        String oldVal=hm.get("title");
        if (oldVal == null)         hm.put("title",val);
 else {
          if (oldVal.endsWith(":") || oldVal.endsWith(".") || oldVal.endsWith("?"))           hm.put("title",oldVal + " " + val);
 else           hm.put("title",oldVal + ": " + val);
        }
      }
 else       if (lab.equals("BTI") || lab.equals("CTI")) {
        hm.put("booktitle",val);
      }
 else       if (lab.equals("FAU")) {
        if (author.equals(""))         author=val;
 else         author+=" and " + val;
      }
 else       if (lab.equals("FED")) {
        if (editor.equals(""))         editor=val;
 else         editor+=" and " + val;
      }
 else       if (lab.equals("JT")) {
        if (type.equals("inproceedings"))         hm.put("booktitle",val);
 else         hm.put("journal",val);
      }
 else       if (lab.equals("PG"))       hm.put("pages",val);
 else       if (lab.equals("PL"))       hm.put("address",val);
 else       if (lab.equals("IS"))       hm.put("issn",val);
 else       if (lab.equals("VI"))       hm.put("volume",val);
 else       if (lab.equals("AB")) {
        String oldAb=hm.get("abstract");
        if (oldAb == null)         hm.put("abstract",val);
 else         hm.put("abstract",oldAb + "\n" + val);
      }
 else       if ((lab.equals("DP"))) {
        String[] parts=val.split(" ");
        hm.put("year",parts[0]);
        if ((parts.length > 1) && (parts[1].length() > 0)) {
          hm.put("month",parts[1]);
        }
      }
 else       if (lab.equals("MH") || lab.equals("OT")) {
        if (!hm.containsKey("keywords"))         hm.put("keywords",val);
 else {
          String kw=hm.get("keywords");
          hm.put("keywords",kw + ", " + val);
        }
      }
 else       if (lab.equals("CON") || lab.equals("CIN") || lab.equals("EIN")|| lab.equals("EFR")|| lab.equals("CRI")|| lab.equals("CRF")|| lab.equals("PRIN")|| lab.equals("PROF")|| lab.equals("RPI")|| lab.equals("RPF")|| lab.equals("RIN")|| lab.equals("ROF")|| lab.equals("UIN")|| lab.equals("UOF")|| lab.equals("SPIN")|| lab.equals("ORI")) {
        if (comment.length() > 0)         comment=comment + "\n";
        comment=comment + val;
      }
 else       if (lab.equals("AID")) {
        String doi=val;
        if (doi.startsWith("doi:")) {
          doi=doi.replaceAll("(?i)doi:","").trim();
          hm.put("doi",doi);
        }
      }
    }
    if (author.length() > 0) {
      author=AuthorList.fixAuthor_lastNameFirst(author);
      hm.put("author",author);
    }
    if (editor.length() > 0) {
      editor=AuthorList.fixAuthor_lastNameFirst(editor);
      hm.put("editor",editor);
    }
    if (comment.length() > 0) {
      hm.put("comment",comment);
    }
    BibtexEntry b=new BibtexEntry(BibtexFields.DEFAULT_BIBTEXENTRY_ID,Globals.getEntryType(type));
    ArrayList<Object> toRemove=new ArrayList<Object>();
    for (    String key : hm.keySet()) {
      String content=hm.get(key);
      if ((content == null) || (content.trim().length() == 0))       toRemove.add(key);
    }
    for (Iterator<Object> iterator=toRemove.iterator(); iterator.hasNext(); ) {
      hm.remove(iterator.next());
    }
    b.setField(hm);
    bibitems.add(b);
  }
  return bibitems;
}
