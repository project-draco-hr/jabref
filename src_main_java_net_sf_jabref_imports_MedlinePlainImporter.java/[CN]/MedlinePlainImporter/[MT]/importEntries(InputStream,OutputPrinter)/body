{
  ArrayList<BibtexEntry> bibitems=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  BufferedReader in=new BufferedReader(ImportFormatReader.getReaderDefaultEncoding(stream));
  String str;
  while ((str=in.readLine()) != null) {
    sb.append(str);
    sb.append("\n");
  }
  String[] entries=sb.toString().replaceAll("\u2013","-").replaceAll("\u2014","--").replaceAll("\u2015","--").split("\\n\\n");
  for (  String entry1 : entries) {
    if (entry1.trim().isEmpty()) {
      continue;
    }
    String type="";
    String author="";
    String editor="";
    String comment="";
    HashMap<String,String> hm=new HashMap<>();
    String[] fields=entry1.split("\n");
    for (int j=0; j < fields.length; j++) {
      if (fields[j].equals("")) {
        continue;
      }
      StringBuilder current=new StringBuilder(fields[j]);
      boolean done=false;
      while (!done && j < fields.length - 1) {
        if (fields[j + 1].length() <= 4) {
          System.out.println("aaa");
        }
        if (fields[j + 1].charAt(4) != '-') {
          if (current.length() > 0 && !Character.isWhitespace(current.charAt(current.length() - 1))) {
            current.append(' ');
          }
          current.append(fields[j + 1].trim());
          j++;
        }
 else {
          done=true;
        }
      }
      String entry=current.toString();
      String lab=entry.substring(0,entry.indexOf('-')).trim();
      String val=entry.substring(entry.indexOf('-') + 1).trim();
switch (lab) {
case "PT":
        val=val.toLowerCase();
      if (val.equals("BOOK")) {
        type="book";
      }
 else       if (val.equals("journal article") || val.equals("classical article") || val.equals("corrected and republished article")|| val.equals("historical article")|| val.equals("introductory journal article")|| val.equals("newspaper article")) {
        type="article";
      }
 else       if (val.equals("clinical conference") || val.equals("consensus development conference") || val.equals("consensus development conference, NIH")) {
        type="conference";
      }
 else       if (val.equals("technical report")) {
        type="techreport";
      }
 else       if (val.equals("editorial")) {
        type="inproceedings";
      }
 else       if (val.equals("overall")) {
        type="proceedings";
      }
 else       if (type.equals("")) {
        type="other";
      }
    break;
case "TI":
  String oldVal=hm.get("title");
if (oldVal == null) {
  hm.put("title",val);
}
 else {
  if (oldVal.endsWith(":") || oldVal.endsWith(".") || oldVal.endsWith("?")) {
    hm.put("title",oldVal + " " + val);
  }
 else {
    hm.put("title",oldVal + ": " + val);
  }
}
break;
case "BTI":
case "CTI":
hm.put("booktitle",val);
break;
case "FAU":
if (author.equals("")) {
author=val;
}
 else {
author+=" and " + val;
}
break;
case "FED":
if (editor.equals("")) {
editor=val;
}
 else {
editor+=" and " + val;
}
break;
case "JT":
if (type.equals("inproceedings")) {
hm.put("booktitle",val);
}
 else {
hm.put("journal",val);
}
break;
case "PG":
hm.put("pages",val);
break;
case "PL":
hm.put("address",val);
break;
case "IS":
hm.put("issn",val);
break;
case "VI":
hm.put("volume",val);
break;
case "AB":
String oldAb=hm.get("abstract");
if (oldAb == null) {
hm.put("abstract",val);
}
 else {
hm.put("abstract",oldAb + "\n" + val);
}
break;
case "DP":
String[] parts=val.split(" ");
hm.put("year",parts[0]);
if (parts.length > 1 && !parts[1].isEmpty()) {
hm.put("month",parts[1]);
}
break;
case "MH":
case "OT":
if (!hm.containsKey("keywords")) {
hm.put("keywords",val);
}
 else {
String kw=hm.get("keywords");
hm.put("keywords",kw + ", " + val);
}
break;
case "CON":
case "CIN":
case "EIN":
case "EFR":
case "CRI":
case "CRF":
case "PRIN":
case "PROF":
case "RPI":
case "RPF":
case "RIN":
case "ROF":
case "UIN":
case "UOF":
case "SPIN":
case "ORI":
if (!comment.isEmpty()) {
comment=comment + "\n";
}
comment=comment + val;
break;
case "AID":
String doi=val;
if (doi.startsWith("doi:")) {
doi=doi.replaceAll("(?i)doi:","").trim();
hm.put("doi",doi);
}
break;
}
}
if (!author.isEmpty()) {
author=AuthorList.fixAuthor_lastNameFirst(author);
hm.put("author",author);
}
if (!editor.isEmpty()) {
editor=AuthorList.fixAuthor_lastNameFirst(editor);
hm.put("editor",editor);
}
if (!comment.isEmpty()) {
hm.put("comment",comment);
}
BibtexEntry b=new BibtexEntry(BibtexFields.DEFAULT_BIBTEXENTRY_ID,Globals.getEntryType(type));
ArrayList<Object> toRemove=new ArrayList<>();
for (String key : hm.keySet()) {
String content=hm.get(key);
if (content == null || content.trim().isEmpty()) {
toRemove.add(key);
}
}
for (Object aToRemove : toRemove) {
hm.remove(aToRemove);
}
b.setField(hm);
bibitems.add(b);
}
return bibitems;
}
