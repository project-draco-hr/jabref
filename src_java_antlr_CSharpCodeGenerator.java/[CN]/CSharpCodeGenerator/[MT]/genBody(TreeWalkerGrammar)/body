{
  setupOutput(grammar.getClassName());
  genAST=grammar.buildAST;
  tabs=0;
  genHeader();
  println(behavior.getHeaderAction(""));
  if (nameSpace != null)   nameSpace.emitDeclarations(currentOutput);
  tabs++;
  println("// Generate header specific to the tree-parser CSharp file");
  println("using System;");
  println("");
  println("using " + grammar.getSuperClass() + " = antlr."+ grammar.getSuperClass()+ ";");
  println("using Token                    = antlr.Token;");
  println("using AST                      = antlr.collections.AST;");
  println("using RecognitionException     = antlr.RecognitionException;");
  println("using ANTLRException           = antlr.ANTLRException;");
  println("using NoViableAltException     = antlr.NoViableAltException;");
  println("using MismatchedTokenException = antlr.MismatchedTokenException;");
  println("using SemanticException        = antlr.SemanticException;");
  println("using BitSet                   = antlr.collections.impl.BitSet;");
  println("using ASTPair                  = antlr.ASTPair;");
  println("using ASTFactory               = antlr.ASTFactory;");
  println("using ASTArray                 = antlr.collections.impl.ASTArray;");
  println(grammar.preambleAction.getText());
  String sup=null;
  if (grammar.superClass != null) {
    sup=grammar.superClass;
  }
 else {
    sup="antlr." + grammar.getSuperClass();
  }
  println("");
  if (grammar.comment != null) {
    _println(grammar.comment);
  }
  Token tprefix=(Token)grammar.options.get("classHeaderPrefix");
  if (tprefix == null) {
    print("public ");
  }
 else {
    String p=StringUtils.stripFrontBack(tprefix.getText(),"\"","\"");
    if (p == null) {
      print("public ");
    }
 else {
      print(p + " ");
    }
  }
  println("class " + grammar.getClassName() + " : "+ sup);
  Token tsuffix=(Token)grammar.options.get("classHeaderSuffix");
  if (tsuffix != null) {
    String suffix=StringUtils.stripFrontBack(tsuffix.getText(),"\"","\"");
    if (suffix != null) {
      print("              , " + suffix);
    }
  }
  println("{");
  tabs++;
  genTokenDefinitions(grammar.tokenManager);
  print(processActionForSpecialSymbols(grammar.classMemberAction.getText(),grammar.classMemberAction.getLine(),currentRule,null));
  println("public " + grammar.getClassName() + "()");
  println("{");
  tabs++;
  println("tokenNames = tokenNames_;");
  tabs--;
  println("}");
  println("");
  astTypes=new java.util.Vector();
  Enumeration ids=grammar.rules.elements();
  int ruleNum=0;
  String ruleNameInits="";
  while (ids.hasMoreElements()) {
    GrammarSymbol sym=(GrammarSymbol)ids.nextElement();
    if (sym instanceof RuleSymbol) {
      RuleSymbol rs=(RuleSymbol)sym;
      genRule(rs,rs.references.size() == 0,ruleNum++,grammar.tokenManager);
    }
    exitIfError();
  }
  if (usingCustomAST) {
    println("public new " + labeledElementASTType + " getAST()");
    println("{");
    tabs++;
    println("return (" + labeledElementASTType + ") returnAST;");
    tabs--;
    println("}");
    println("");
  }
  genInitFactory(grammar);
  genTokenStrings();
  genBitsets(bitsetsUsed,grammar.tokenManager.maxTokenType());
  tabs--;
  println("}");
  println("");
  tabs--;
  if (nameSpace != null)   nameSpace.emitClosures(currentOutput);
  currentOutput.close();
  currentOutput=null;
}
