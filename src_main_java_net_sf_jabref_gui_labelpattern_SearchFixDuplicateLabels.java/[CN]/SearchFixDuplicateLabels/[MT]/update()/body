{
  List<BibEntry> toGenerateFor=new ArrayList<>();
  for (  String key : dupes.keySet()) {
    ResolveDuplicateLabelDialog rdld=new ResolveDuplicateLabelDialog(panel,key,dupes.get(key));
    rdld.show();
    if (rdld.isOkPressed()) {
      List<JCheckBox> cbs=rdld.getCheckBoxes();
      for (int i=0; i < cbs.size(); i++) {
        if (cbs.get(i).isSelected()) {
          toGenerateFor.add(dupes.get(key).get(i));
        }
      }
    }
  }
  if (!toGenerateFor.isEmpty()) {
    NamedCompound ce=new NamedCompound(Localization.lang("Resolve duplicate keys"));
    for (    BibEntry entry : toGenerateFor) {
      String oldKey=entry.getCiteKey();
      LabelPatternUtil.makeLabel(panel.getBibDatabaseContext().getMetaData(),panel.database(),entry);
      ce.addEdit(new UndoableKeyChange(panel.database(),entry,oldKey,entry.getCiteKey()));
    }
    ce.end();
    panel.undoManager.addEdit(ce);
    panel.markBaseChanged();
  }
  panel.output(Localization.lang("Finished resolving duplicate BibTeX keys. %0 entries modified.",String.valueOf(toGenerateFor.size())));
}
