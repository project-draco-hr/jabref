{
  boolean giveWarning=false;
  for (int i=0; i < GUIGlobals.ALL_FIELDS.length; i++) {
    if (field.equals(GUIGlobals.ALL_FIELDS[i]) && !field.equals("keywords")) {
      giveWarning=true;
      break;
    }
  }
  if (giveWarning) {
    String message="This action will modify the '" + field + "' field "+ "of your entries.\nThis could cause undesired changes to "+ "your entries, so it\nis recommended that you change the field "+ "in your group\ndefinition to 'keywords' or a non-standard name."+ "\n\nDo you still want to continue?";
    int choice=JOptionPane.showConfirmDialog(this,message,"Warning",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
    if (choice == JOptionPane.NO_OPTION)     return;
  }
  BibtexEntry[] bes=entryTable.getSelectedEntries();
  if ((bes != null) && (bes.length > 0)) {
    QuickSearchRule qsr=new QuickSearchRule(field,regexp);
    NamedCompound ce=new NamedCompound("remove from group");
    boolean hasEdits=false;
    for (int i=0; i < bes.length; i++) {
      if (qsr.applyRule(null,bes[i]) > 0) {
        String oldContent=(String)bes[i].getField(field);
        qsr.removeMatches(bes[i]);
        ce.addEdit(new UndoableFieldChange(bes[i],field,oldContent,bes[i].getField(field)));
        hasEdits=true;
      }
    }
    if (hasEdits) {
      ce.end();
      undoManager.addEdit(ce);
      refreshTable();
      markBaseChanged();
      updateWiewToSelected();
    }
    output("Removed '" + regexp + "' from the '"+ field+ "' field of "+ bes.length+ " entr"+ (bes.length > 1 ? "ies." : "y."));
  }
}
