{
  actions.put("undo",undoAction);
  actions.put("redo",redoAction);
  actions.put("edit",new BaseAction(){
    public void action(){
      int clickedOn=-1;
      if (entryTable.getSelectedRowCount() == 1) {
        clickedOn=entryTable.getSelectedRow();
      }
      if (clickedOn >= 0) {
        String id=tableModel.getNameFromNumber(clickedOn);
        BibtexEntry be=database.getEntryById(id);
        showEntry(be);
      }
    }
  }
);
  actions.put("save",new BaseAction(){
    public void action(){
      if (file == null)       runCommand("saveAs");
 else {
        try {
          FileActions.saveDatabase(database,metaData,file,prefs,false,false);
          undoManager.markUnchanged();
          nonUndoableChange=false;
          baseChanged=false;
          frame.setTabTitle(ths,file.getName());
          frame.output(Globals.lang("Saved database") + " '" + file.getPath()+ "'.");
        }
 catch (        SaveException ex) {
          if (ex.specificEntry()) {
            int row=tableModel.getNumberFromName(ex.getEntry().getId()), topShow=Math.max(0,row - 3);
            entryTable.setRowSelectionInterval(row,row);
            entryTable.setColumnSelectionInterval(0,entryTable.getColumnCount() - 1);
            entryTable.scrollTo(topShow);
            showEntry(ex.getEntry());
          }
 else           ex.printStackTrace();
          JOptionPane.showMessageDialog(frame,Globals.lang("Could not save file") + ".\n" + ex.getMessage(),Globals.lang("Save database"),JOptionPane.ERROR_MESSAGE);
        }
      }
    }
  }
);
  actions.put("saveAs",new BaseAction(){
    public void action(){
      JFileChooser chooser=new JFileChooser(prefs.get("workingDirectory"));
      chooser.setFileFilter(new OpenFileFilter());
      int returnVal=chooser.showSaveDialog(frame);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        String name=chooser.getSelectedFile().getName(), path=chooser.getSelectedFile().getParent();
        if (!name.endsWith(".bib"))         name=name + ".bib";
        file=new File(path,name);
        if (!file.exists() || (JOptionPane.showConfirmDialog(frame,"File '" + name + "' exists. Overwrite?","Save database",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)) {
          runCommand("save");
          prefs.put("workingDirectory",path);
          frame.fileHistory.newFile(file.getPath());
        }
 else         file=null;
      }
 else {
      }
    }
  }
);
  actions.put("copy",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        TransferableBibtexEntry trbe=new TransferableBibtexEntry(bes);
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(trbe,ths);
        output(Globals.lang("Copied") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : "1 " + Globals.lang("entry") + "."));
      }
 else {
        int[] rows=entryTable.getSelectedRows(), cols=entryTable.getSelectedColumns();
        if ((cols.length == 1) && (rows.length == 1)) {
          Object o=tableModel.getValueAt(rows[0],cols[0]);
          if (o != null) {
            StringSelection ss=new StringSelection(o.toString());
            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,ths);
            output(Globals.lang("Copied cell contents") + ".");
          }
        }
      }
    }
  }
);
  actions.put("cut",new BaseAction(){
    public void action(){
      runCommand("copy");
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        NamedCompound ce=new NamedCompound(bes.length > 1 ? "cut entries" : "cut entry");
        for (int i=0; i < bes.length; i++) {
          database.removeEntry(bes[i].getId());
          ensureNotShowing(bes[i]);
          ce.addEdit(new UndoableRemoveEntry(database,bes[i],ths));
        }
        entryTable.clearSelection();
        frame.output(Globals.lang("Cut_pr") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : Globals.lang("entry"))+ ".");
        ce.end();
        undoManager.addEdit(ce);
        refreshTable();
        markBaseChanged();
      }
    }
  }
);
  actions.put("delete",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if (bes.length > 0) {
        NamedCompound ce=new NamedCompound(bes.length > 1 ? Globals.lang("delete entries") : Globals.lang("delete entry"));
        for (int i=0; i < bes.length; i++) {
          database.removeEntry(bes[i].getId());
          ensureNotShowing(bes[i]);
          ce.addEdit(new UndoableRemoveEntry(database,bes[i],ths));
        }
        entryTable.clearSelection();
        frame.output(Globals.lang("Deleted") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : Globals.lang("entry"))+ ".");
        ce.end();
        undoManager.addEdit(ce);
        refreshTable();
        markBaseChanged();
      }
    }
  }
);
  actions.put("paste",new BaseAction(){
    public void action(){
      Transferable content=Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
      if (content != null) {
        DataFlavor[] flavor=content.getTransferDataFlavors();
        if ((flavor != null) && (flavor.length > 0) && flavor[0].equals(TransferableBibtexEntry.entryFlavor)) {
          BibtexEntry[] bes=null;
          try {
            bes=(BibtexEntry[])(content.getTransferData(TransferableBibtexEntry.entryFlavor));
          }
 catch (          UnsupportedFlavorException ex) {
          }
catch (          IOException ex) {
          }
          if ((bes != null) && (bes.length > 0)) {
            NamedCompound ce=new NamedCompound(bes.length > 1 ? "paste entries" : "paste entry");
            for (int i=0; i < bes.length; i++) {
              try {
                BibtexEntry be=(BibtexEntry)(bes[i].clone());
                be.setId(Util.createId(be.getType(),database));
                database.insertEntry(be);
                ce.addEdit(new UndoableInsertEntry(database,be,ths));
              }
 catch (              KeyCollisionException ex) {
                Util.pr("KeyCollisionException... this shouldn't happen.");
              }
            }
            ce.end();
            undoManager.addEdit(ce);
            tableModel.remap();
            entryTable.clearSelection();
            entryTable.revalidate();
            output(Globals.lang("Pasted") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : "1 " + Globals.lang("entry"))+ ".");
            refreshTable();
            markBaseChanged();
          }
        }
        Util.pr(flavor.length + "");
        Util.pr(flavor[0].toString());
        Util.pr(flavor[1].toString());
        Util.pr(flavor[2].toString());
        Util.pr(flavor[3].toString());
        Util.pr(flavor[4].toString());
        if ((flavor != null) && (flavor.length > 0) && flavor[0].equals(DataFlavor.stringFlavor)) {
          int[] rows=entryTable.getSelectedRows(), cols=entryTable.getSelectedColumns();
          Util.pr(rows.length + " x " + cols.length);
          if ((cols != null) && (cols.length == 1) && (cols[0] != 0)&& (rows != null)&& (rows.length == 1)) {
            try {
              tableModel.setValueAt((String)(content.getTransferData(DataFlavor.stringFlavor)),rows[0],cols[0]);
              refreshTable();
              markBaseChanged();
              output("Pasted cell contents");
            }
 catch (            UnsupportedFlavorException ex) {
            }
catch (            IOException ex) {
            }
catch (            IllegalArgumentException ex) {
              output("Can't paste.");
            }
          }
        }
      }
    }
  }
);
  actions.put("selectAll",new BaseAction(){
    public void action(){
      entryTable.selectAll();
    }
  }
);
  actions.put("editPreamble",new BaseAction(){
    public void action(){
      if (preambleEditor == null) {
        PreambleEditor form=new PreambleEditor(frame,ths,database,prefs);
        Util.placeDialog(form,frame);
        form.setVisible(true);
        preambleEditor=form;
      }
 else {
        preambleEditor.setVisible(true);
      }
    }
  }
);
  actions.put("editStrings",new BaseAction(){
    public void action(){
      if (stringDialog == null) {
        StringDialog form=new StringDialog(frame,ths,database,prefs);
        Util.placeDialog(form,frame);
        form.setVisible(true);
        stringDialog=form;
      }
 else {
        stringDialog.setVisible(true);
      }
    }
  }
);
  actions.put("toggleGroups",new BaseAction(){
    public void action(){
      sidePaneManager.togglePanel("groups");
    }
  }
);
  actions.put("pushToLyX",new BaseAction(){
    public void action(){
      int[] rows=entryTable.getSelectedRows();
      int numSelected=rows.length;
      BibtexEntry bes=null;
      File lyxpipe=new File(prefs.get("lyxpipe") + ".in");
      if (!lyxpipe.exists() || !lyxpipe.canWrite()) {
        output("ERROR: verify that LyX is running and that the lyxpipe is valid. [" + prefs.get("lyxpipe") + "]");
        return;
      }
      if (numSelected > 0) {
        try {
          BufferedWriter lyx_out=new BufferedWriter(new FileWriter(lyxpipe));
          String citeStr="", citeKey="", message="";
          for (int i=0; i < numSelected; i++) {
            bes=database.getEntryById(tableModel.getNameFromNumber(rows[i]));
            citeKey=(String)bes.getField(GUIGlobals.KEY_FIELD);
            if (citeKey == null || citeKey.equals(""))             continue;
            if (citeStr.equals(""))             citeStr=citeKey;
 else             citeStr+="," + citeKey;
            message+=", " + rows[i];
          }
          if (citeStr.equals(""))           output("Please define citekey first");
 else {
            citeStr="LYXCMD:sampleclient:citation-insert:" + citeStr;
            lyx_out.write(citeStr + "\n");
            output("Pushed the citations for the following rows to Lyx: " + message);
          }
          lyx_out.close();
        }
 catch (        IOException excep) {
          output("ERROR: unable to write to " + prefs.get("lyxpipe") + ".in");
        }
      }
    }
  }
);
  actions.put("makeKey",new BaseAction(){
    public void action(){
      int[] rows=entryTable.getSelectedRows();
      int numSelected=rows.length;
      BibtexEntry bes=null;
      if (numSelected > 0) {
      }
 else {
        JOptionPane.showMessageDialog(frame,Globals.lang("First select the entries you want keys to be generated for."),Globals.lang("Autogenerate BibTeX key"),JOptionPane.INFORMATION_MESSAGE);
        return;
      }
      output(Globals.lang("Generating BibTeX key for") + " " + numSelected+ " "+ (numSelected > 1 ? Globals.lang("entries") : Globals.lang("entry")));
      NamedCompound ce=new NamedCompound("autogenerate keys");
      Object oldValue;
      for (int i=0; i < numSelected; i++) {
        bes=database.getEntryById(tableModel.getNameFromNumber(rows[i]));
        oldValue=bes.getField(GUIGlobals.KEY_FIELD);
        bes=frame.labelMaker.applyRule(bes,database);
        ce.addEdit(new UndoableKeyChange(database,bes.getId(),(String)oldValue,(String)bes.getField(GUIGlobals.KEY_FIELD)));
      }
      ce.end();
      undoManager.addEdit(ce);
      markBaseChanged();
      refreshTable();
    }
  }
);
  actions.put("search",new BaseAction(){
    public void action(){
      sidePaneManager.ensureVisible("search");
      searchManager.startSearch();
    }
  }
);
  actions.put("incSearch",new BaseAction(){
    public void action(){
      sidePaneManager.ensureVisible("search");
      searchManager.startIncrementalSearch();
    }
  }
);
  actions.put("copyKey",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        Vector keys=new Vector();
        for (int i=0; i < bes.length; i++)         if (bes[i].getField(Globals.KEY_FIELD) != null)         keys.add(bes[i].getField(Globals.KEY_FIELD));
        if (keys.size() == 0) {
          output("None of the selected entries have BibTeX keys.");
          return;
        }
        StringBuffer sb=new StringBuffer((String)keys.elementAt(0));
        for (int i=1; i < keys.size(); i++) {
          sb.append(',');
          sb.append((String)keys.elementAt(i));
        }
        StringSelection ss=new StringSelection(sb.toString());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,ths);
        if (keys.size() == bes.length)         output(Globals.lang((bes.length > 1) ? "Copied keys" : "Copied key") + ".");
 else         output(Globals.lang("Warning") + ": " + (bes.length - keys.size())+ " "+ Globals.lang("out of")+ " "+ bes.length+ " "+ Globals.lang("entries have undefined BibTeX key")+ ".");
      }
    }
  }
);
  actions.put("copyCiteKey",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        Vector keys=new Vector();
        for (int i=0; i < bes.length; i++)         if (bes[i].getField(Globals.KEY_FIELD) != null)         keys.add(bes[i].getField(Globals.KEY_FIELD));
        if (keys.size() == 0) {
          output("None of the selected entries have BibTeX keys.");
          return;
        }
        StringBuffer sb=new StringBuffer((String)keys.elementAt(0));
        for (int i=1; i < keys.size(); i++) {
          sb.append(',');
          sb.append((String)keys.elementAt(i));
        }
        StringSelection ss=new StringSelection("\\cite{" + sb.toString() + "}");
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,ths);
        if (keys.size() == bes.length)         output(Globals.lang((bes.length > 1) ? "Copied keys" : "Copied key") + ".");
 else         output(Globals.lang("Warning") + ": " + (bes.length - keys.size())+ " "+ Globals.lang("out of")+ " "+ bes.length+ " "+ Globals.lang("entries have undefined BibTeX key")+ ".");
      }
    }
  }
);
  actions.put("mergeDatabase",new BaseAction(){
    public void action(){
      final MergeDialog md=new MergeDialog(frame,Globals.lang("Append database"),true);
      Util.placeDialog(md,ths);
      md.setVisible(true);
      if (md.okPressed) {
        JFileChooser chooser=(prefs.get("workingDirectory") == null) ? new JabRefFileChooser((File)null) : new JabRefFileChooser(new File(prefs.get("workingDirectory")));
        chooser.addChoosableFileFilter(new OpenFileFilter());
        int returnVal=chooser.showOpenDialog(ths);
        if (returnVal != JFileChooser.APPROVE_OPTION)         return;
        fileToOpen=chooser.getSelectedFile();
        if (fileToOpen != null) {
          (new Thread(){
            public void run(){
              openIt(md.importEntries(),md.importStrings(),md.importGroups(),md.importSelectorWords());
            }
          }
).start();
          frame.fileHistory.newFile(fileToOpen.getPath());
        }
      }
    }
    void openIt(    boolean importEntries,    boolean importStrings,    boolean importGroups,    boolean importSelectorWords){
      if ((fileToOpen != null) && (fileToOpen.exists())) {
        try {
          prefs.put("workingDirectory",fileToOpen.getPath());
          ParserResult pr=frame.loadDatabase(fileToOpen);
          BibtexDatabase db=pr.getDatabase();
          MetaData meta=new MetaData(pr.getMetaData());
          NamedCompound ce=new NamedCompound("Append database");
          if (importEntries) {
            Iterator i=db.getKeySet().iterator();
            while (i.hasNext()) {
              BibtexEntry be=(BibtexEntry)(db.getEntryById((String)i.next()).clone());
              be.setId(Util.createNeutralId());
              database.insertEntry(be);
              ce.addEdit(new UndoableInsertEntry(database,be,ths));
            }
          }
          if (importStrings) {
            BibtexString bs;
            int pos=0;
            for (int i=0; i < db.getStringCount(); i++) {
              bs=(BibtexString)(db.getString(i).clone());
              if (!database.hasStringLabel(bs.getName())) {
                pos=database.getStringCount();
                database.addString(bs,pos);
                ce.addEdit(new UndoableInsertString(ths,database,bs,pos));
              }
            }
          }
          if (importGroups) {
            Vector newGroups=meta.getData("groups");
            if (newGroups != null) {
              Vector groups=metaData.getData("groups");
              if (groupSelector == null) {
                groupSelector=new GroupSelector(frame,ths,new Vector(),sidePaneManager,prefs);
                sidePaneManager.register("groups",groupSelector);
              }
              groupSelector.addGroups(newGroups,ce);
              groupSelector.revalidateList();
            }
          }
          if (importSelectorWords) {
            Iterator i=meta.iterator();
            for (; i.hasNext(); ) {
              String s=(String)i.next();
              if (s.startsWith(Globals.SELECTOR_META_PREFIX)) {
                metaData.putData(s,meta.getData(s));
              }
            }
          }
          ce.end();
          undoManager.addEdit(ce);
          markBaseChanged();
          refreshTable();
          output("Imported from database '" + fileToOpen.getPath() + "':");
          fileToOpen=null;
        }
 catch (        Throwable ex) {
          ex.printStackTrace();
          JOptionPane.showMessageDialog(ths,ex.getMessage(),"Open database",JOptionPane.ERROR_MESSAGE);
        }
      }
    }
  }
);
  actions.put("openFile",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length == 1)) {
        Object link=bes[0].getField("ps");
        if (bes[0].getField("pdf") != null)         link=bes[0].getField("pdf");
        if (link != null)         Util.openExternalViewer(link.toString(),prefs);
 else         output("No pdf or ps defined.");
      }
    }
  }
);
}
