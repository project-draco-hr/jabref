{
  actions.put("undo",undoAction);
  actions.put("redo",redoAction);
  actions.put("edit",new BaseAction(){
    public void action(){
      if (isShowingEditor()) {
        new FocusRequester(splitPane.getBottomComponent());
        return;
      }
      frame.block();
      int clickedOn=-1;
      if (entryTable.getSelectedRowCount() == 1) {
        clickedOn=entryTable.getSelectedRow();
      }
      if (clickedOn >= 0) {
        String id=tableModel.getNameFromNumber(clickedOn);
        BibtexEntry be=database.getEntryById(id);
        showEntry(be);
        if (splitPane.getBottomComponent() != null) {
          new FocusRequester(splitPane.getBottomComponent());
        }
      }
      frame.unblock();
    }
  }
);
  actions.put("save",new BaseAction(){
    public void action() throws Throwable {
      if (file == null)       runCommand("saveAs");
 else {
        if (updatedExternally || Globals.fileUpdateMonitor.hasBeenModified(fileMonitorHandle)) {
          String[] opts=new String[]{Globals.lang("Review changes"),Globals.lang("Save"),Globals.lang("Cancel")};
          int answer=JOptionPane.showOptionDialog(frame,Globals.lang("File has been updated externally. " + "What do you want to do?"),Globals.lang("File updated externally"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,opts,opts[0]);
          if (answer == JOptionPane.CANCEL_OPTION)           return;
 else           if (answer == JOptionPane.YES_OPTION) {
            ChangeScanner scanner=new ChangeScanner(frame,BasePanel.this);
            scanner.changeScan(file());
            setUpdatedExternally(false);
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                sidePaneManager.hideAway("fileUpdate");
              }
            }
);
            return;
          }
        }
        saving=true;
        saveDatabase(file,false);
        try {
          Globals.fileUpdateMonitor.updateTimeStamp(fileMonitorHandle);
        }
 catch (        IllegalArgumentException ex) {
        }
        saving=false;
        undoManager.markUnchanged();
        nonUndoableChange=false;
        baseChanged=false;
        updatedExternally=false;
        frame.setTabTitle(BasePanel.this,file.getName());
        frame.output(Globals.lang("Saved database") + " '" + file.getPath()+ "'.");
      }
    }
  }
);
  actions.put("saveAs",new BaseAction(){
    public void action() throws Throwable {
      String chosenFile=Globals.getNewFile(frame,prefs,new File(prefs.get("workingDirectory")),".bib",JFileChooser.SAVE_DIALOG,false);
      if (chosenFile != null) {
        file=new File(chosenFile);
        if (!file.exists() || (JOptionPane.showConfirmDialog(frame,"'" + file.getName() + "' "+ Globals.lang("exists. Overwrite file?"),Globals.lang("Save database"),JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)) {
          runCommand("save");
          try {
            fileMonitorHandle=Globals.fileUpdateMonitor.addUpdateListener(BasePanel.this,file);
          }
 catch (          IOException ex) {
            ex.printStackTrace();
          }
          prefs.put("workingDirectory",file.getParent());
          frame.getFileHistory().newFile(file.getPath());
        }
 else         file=null;
      }
    }
  }
);
  actions.put("saveSelectedAs",new BaseAction(){
    public void action() throws Throwable {
      String chosenFile=Globals.getNewFile(frame,prefs,new File(prefs.get("workingDirectory")),".bib",JFileChooser.SAVE_DIALOG,false);
      if (chosenFile != null) {
        File expFile=new File(chosenFile);
        if (!expFile.exists() || (JOptionPane.showConfirmDialog(frame,"'" + expFile.getName() + "' "+ Globals.lang("exists. Overwrite file?"),Globals.lang("Save database"),JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)) {
          saveDatabase(expFile,true);
          frame.getFileHistory().newFile(expFile.getPath());
          frame.output(Globals.lang("Saved selected to") + " '" + expFile.getPath()+ "'.");
        }
      }
    }
  }
);
  actions.put("copy",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        TransferableBibtexEntry trbe=new TransferableBibtexEntry(bes);
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(trbe,BasePanel.this);
        output(Globals.lang("Copied") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : "1 " + Globals.lang("entry") + "."));
      }
 else {
        int[] rows=entryTable.getSelectedRows(), cols=entryTable.getSelectedColumns();
        if ((cols.length == 1) && (rows.length == 1)) {
          Object o=tableModel.getValueAt(rows[0],cols[0]);
          if (o != null) {
            StringSelection ss=new StringSelection(o.toString());
            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,BasePanel.this);
            output(Globals.lang("Copied cell contents") + ".");
          }
        }
      }
    }
  }
);
  actions.put("cut",new BaseAction(){
    public void action() throws Throwable {
      runCommand("copy");
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      int row0=entryTable.getSelectedRow();
      if ((bes != null) && (bes.length > 0)) {
        NamedCompound ce=new NamedCompound(Globals.lang(bes.length > 1 ? "cut entries" : "cut entry"));
        for (int i=0; i < bes.length; i++) {
          database.removeEntry(bes[i].getId());
          ensureNotShowing(bes[i]);
          ce.addEdit(new UndoableRemoveEntry(database,bes[i],BasePanel.this));
        }
        entryTable.clearSelection();
        frame.output(Globals.lang("Cut_pr") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : Globals.lang("entry"))+ ".");
        ce.end();
        undoManager.addEdit(ce);
        refreshTable();
        markBaseChanged();
        if (row0 >= entryTable.getRowCount())         row0=entryTable.getRowCount() - 1;
        if (row0 >= 0)         entryTable.addRowSelectionInterval(row0,row0);
      }
    }
  }
);
  actions.put("delete",new BaseAction(){
    public void action(){
      boolean cancelled=false;
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      int row0=entryTable.getSelectedRow();
      if ((bes != null) && (bes.length > 0)) {
        boolean goOn=showDeleteConfirmationDialog(bes.length);
        if (!goOn) {
          return;
        }
 else {
          NamedCompound ce=new NamedCompound(Globals.lang(bes.length > 1 ? "delete entries" : "delete entry"));
          for (int i=0; i < bes.length; i++) {
            database.removeEntry(bes[i].getId());
            ensureNotShowing(bes[i]);
            ce.addEdit(new UndoableRemoveEntry(database,bes[i],BasePanel.this));
          }
          frame.output(Globals.lang("Deleted") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : Globals.lang("entry"))+ ".");
          ce.end();
          undoManager.addEdit(ce);
          refreshTable();
          markBaseChanged();
          if (row0 >= entryTable.getRowCount())           row0=entryTable.getRowCount() - 1;
          if (row0 >= 0) {
            final int toSel=row0;
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                entryTable.addRowSelectionInterval(toSel,toSel);
              }
            }
);
          }
        }
      }
    }
  }
);
  actions.put("paste",new BaseAction(){
    public void action(){
      Transferable content=Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
      if (content != null) {
        BibtexEntry[] bes=null;
        if (content.isDataFlavorSupported(TransferableBibtexEntry.entryFlavor)) {
          try {
            bes=(BibtexEntry[])(content.getTransferData(TransferableBibtexEntry.entryFlavor));
          }
 catch (          UnsupportedFlavorException ex) {
            ex.printStackTrace();
          }
catch (          IOException ex) {
            ex.printStackTrace();
          }
        }
 else         if (content.isDataFlavorSupported(DataFlavor.stringFlavor)) {
          int[] rows=entryTable.getSelectedRows(), cols=entryTable.getSelectedColumns();
          Util.pr(rows.length + " x " + cols.length);
          if ((cols != null) && (cols.length == 1) && (cols[0] != 0)&& (rows != null)&& (rows.length == 1)) {
            try {
              tableModel.setValueAt((String)(content.getTransferData(DataFlavor.stringFlavor)),rows[0],cols[0]);
              refreshTable();
              markBaseChanged();
              output("Pasted cell contents");
            }
 catch (            UnsupportedFlavorException ex) {
              ex.printStackTrace();
            }
catch (            IOException ex) {
              ex.printStackTrace();
            }
catch (            IllegalArgumentException ex) {
              output("Can't paste.");
            }
          }
 else {
            try {
              BibtexParser bp=new BibtexParser(new java.io.StringReader((String)(content.getTransferData(DataFlavor.stringFlavor))));
              BibtexDatabase db=bp.parse().getDatabase();
              Util.pr("Parsed " + db.getEntryCount() + " entries from clipboard text");
              if (db.getEntryCount() > 0) {
                Set keySet=db.getKeySet();
                if (keySet != null) {
                  bes=new BibtexEntry[db.getEntryCount()];
                  Iterator it=keySet.iterator();
                  for (int i=0; it.hasNext(); i++) {
                    bes[i]=db.getEntryById((String)(it.next()));
                  }
                }
              }
            }
 catch (            UnsupportedFlavorException ex) {
              ex.printStackTrace();
            }
catch (            Throwable ex) {
              ex.printStackTrace();
            }
          }
        }
        if ((bes != null) && (bes.length > 0)) {
          NamedCompound ce=new NamedCompound(Globals.lang(bes.length > 1 ? "paste entries" : "paste entry"));
          for (int i=0; i < bes.length; i++) {
            try {
              BibtexEntry be=(BibtexEntry)(bes[i].clone());
              be.setId(Util.createNeutralId());
              database.insertEntry(be);
              ce.addEdit(new UndoableInsertEntry(database,be,BasePanel.this));
            }
 catch (            KeyCollisionException ex) {
              Util.pr("KeyCollisionException... this shouldn't happen.");
            }
          }
          ce.end();
          undoManager.addEdit(ce);
          tableModel.remap();
          entryTable.clearSelection();
          entryTable.revalidate();
          output(Globals.lang("Pasted") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : "1 " + Globals.lang("entry"))+ ".");
          refreshTable();
          markBaseChanged();
        }
      }
    }
  }
);
  actions.put("selectAll",new BaseAction(){
    public void action(){
      entryTable.selectAll();
    }
  }
);
  actions.put("editPreamble",new BaseAction(){
    public void action(){
      if (preambleEditor == null) {
        PreambleEditor form=new PreambleEditor(frame,BasePanel.this,database,prefs);
        Util.placeDialog(form,frame);
        form.setVisible(true);
        preambleEditor=form;
      }
 else {
        preambleEditor.setVisible(true);
      }
    }
  }
);
  actions.put("editStrings",new BaseAction(){
    public void action(){
      if (stringDialog == null) {
        StringDialog form=new StringDialog(frame,BasePanel.this,database,prefs);
        Util.placeDialog(form,frame);
        form.setVisible(true);
        stringDialog=form;
      }
 else {
        stringDialog.setVisible(true);
      }
    }
  }
);
  actions.put("toggleGroups",new BaseAction(){
    public void action(){
      sidePaneManager.togglePanel("groups");
      frame.groupToggle.setSelected(sidePaneManager.isPanelVisible("groups"));
    }
  }
);
  actions.put("pushToLyX",new PushToLyx(BasePanel.this));
  actions.put("pushToWinEdt",new BaseAction(){
    public void action(){
      final int[] rows=entryTable.getSelectedRows();
      final int numSelected=rows.length;
      if (numSelected > 0) {
        Thread pushThread=new Thread(){
          public void run(){
            String winEdt=prefs.get("winEdtPath");
            try {
              StringBuffer toSend=new StringBuffer("\"[InsText('\\cite{");
              String citeKey="", message="";
              boolean first=true;
              for (int i=0; i < numSelected; i++) {
                BibtexEntry bes=database.getEntryById(tableModel.getNameFromNumber(rows[i]));
                citeKey=(String)bes.getField(GUIGlobals.KEY_FIELD);
                if (citeKey == null || citeKey.equals(""))                 continue;
                if (first) {
                  toSend.append(citeKey);
                  first=false;
                }
 else                 toSend.append("," + citeKey);
                if (i > 0)                 message+=", ";
                message+=(1 + rows[i]);
              }
              if (first)               output(Globals.lang("Please define BibTeX key first"));
 else {
                toSend.append("}');]\"");
                Runtime.getRuntime().exec(winEdt + " " + toSend.toString());
                output(Globals.lang("Pushed the citations for the following rows to") + "WinEdt: " + message);
              }
            }
 catch (            IOException excep) {
              output(Globals.lang("Error") + ": " + Globals.lang("Could not call executable")+ " '"+ winEdt+ "'.");
              excep.printStackTrace();
            }
          }
        }
;
        pushThread.start();
      }
    }
  }
);
  actions.put("makeKey",new AbstractWorker(){
    List entries;
    int numSelected;
    boolean cancelled=false;
    public void init(){
      entries=new ArrayList(Arrays.asList(getSelectedEntries()));
      if (entries.size() == 0) {
        JOptionPane.showMessageDialog(frame,Globals.lang("First select the entries you want keys to be generated for."),Globals.lang("Autogenerate BibTeX key"),JOptionPane.INFORMATION_MESSAGE);
        return;
      }
      frame.block();
      output(Globals.lang("Generating BibTeX key for") + " " + numSelected+ " "+ (numSelected > 1 ? Globals.lang("entries") : Globals.lang("entry"))+ "...");
    }
    public void run(){
      BibtexEntry bes=null;
      NamedCompound ce=new NamedCompound(Globals.lang("autogenerate keys"));
      Object oldValue;
      boolean hasShownWarning=false;
      loop:       for (Iterator i=entries.iterator(); i.hasNext(); ) {
        bes=(BibtexEntry)i.next();
        if (bes.getField(GUIGlobals.KEY_FIELD) != null) {
          if (prefs.getBoolean("avoidOverwritingKey"))           i.remove();
 else           if (prefs.getBoolean("warnBeforeOverwritingKey")) {
            CheckBoxMessage cbm=new CheckBoxMessage(Globals.lang("One or more keys will be overwritten. Continue?"),Globals.lang("Disable this confirmation dialog"),false);
            int answer=JOptionPane.showConfirmDialog(frame,cbm,Globals.lang("Overwrite keys"),JOptionPane.YES_NO_OPTION);
            if (cbm.isSelected())             prefs.putBoolean("warnBeforeOverwritingKey",false);
            if (answer == JOptionPane.NO_OPTION) {
              cancelled=true;
              return;
            }
            break loop;
          }
        }
      }
      HashMap oldvals=new HashMap();
      if (!prefs.getBoolean("avoidOverwritingKey"))       for (Iterator i=entries.iterator(); i.hasNext(); ) {
        bes=(BibtexEntry)i.next();
        oldvals.put(bes,bes.getField(GUIGlobals.KEY_FIELD));
        database.setCiteKeyForEntry(bes.getId(),null);
      }
      for (Iterator i=entries.iterator(); i.hasNext(); ) {
        bes=(BibtexEntry)i.next();
        bes=LabelPatternUtil.makeLabel(prefs.getKeyPattern(),database,bes);
        ce.addEdit(new UndoableKeyChange(database,bes.getId(),(String)oldvals.get(bes),(String)bes.getField(GUIGlobals.KEY_FIELD)));
      }
      ce.end();
      undoManager.addEdit(ce);
    }
    public void update(){
      if (cancelled) {
        frame.unblock();
        return;
      }
      markBaseChanged();
      refreshTable();
      numSelected=entries.size();
      output(Globals.lang("Generated BibTeX key for") + " " + numSelected+ " "+ (numSelected != 1 ? Globals.lang("entries") : Globals.lang("entry")));
      frame.unblock();
    }
  }
);
  actions.put("search",new BaseAction(){
    public void action(){
      sidePaneManager.ensureVisible("search");
      frame.searchToggle.setSelected(true);
      if (true)       frame.searchManager.startSearch();
    }
  }
);
  actions.put("toggleSearch",new BaseAction(){
    public void action(){
      sidePaneManager.togglePanel("search");
      boolean on=sidePaneManager.isPanelVisible("search");
      frame.searchToggle.setSelected(on);
      if (on)       frame.searchManager.startSearch();
    }
  }
);
  actions.put("incSearch",new BaseAction(){
    public void action(){
      sidePaneManager.ensureVisible("search");
      frame.searchToggle.setSelected(true);
      frame.searchManager.startIncrementalSearch();
    }
  }
);
  actions.put("copyKey",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        storeCurrentEdit();
        Vector keys=new Vector();
        for (int i=0; i < bes.length; i++)         if (bes[i].getField(Globals.KEY_FIELD) != null)         keys.add(bes[i].getField(Globals.KEY_FIELD));
        if (keys.size() == 0) {
          output("None of the selected entries have BibTeX keys.");
          return;
        }
        StringBuffer sb=new StringBuffer((String)keys.elementAt(0));
        for (int i=1; i < keys.size(); i++) {
          sb.append(',');
          sb.append((String)keys.elementAt(i));
        }
        StringSelection ss=new StringSelection(sb.toString());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,BasePanel.this);
        if (keys.size() == bes.length)         output(Globals.lang((bes.length > 1) ? "Copied keys" : "Copied key") + ".");
 else         output(Globals.lang("Warning") + ": " + (bes.length - keys.size())+ " "+ Globals.lang("out of")+ " "+ bes.length+ " "+ Globals.lang("entries have undefined BibTeX key")+ ".");
      }
    }
  }
);
  actions.put("copyCiteKey",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        storeCurrentEdit();
        Vector keys=new Vector();
        for (int i=0; i < bes.length; i++)         if (bes[i].getField(Globals.KEY_FIELD) != null)         keys.add(bes[i].getField(Globals.KEY_FIELD));
        if (keys.size() == 0) {
          output("None of the selected entries have BibTeX keys.");
          return;
        }
        StringBuffer sb=new StringBuffer((String)keys.elementAt(0));
        for (int i=1; i < keys.size(); i++) {
          sb.append(',');
          sb.append((String)keys.elementAt(i));
        }
        StringSelection ss=new StringSelection("\\cite{" + sb.toString() + "}");
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,BasePanel.this);
        if (keys.size() == bes.length)         output(Globals.lang((bes.length > 1) ? "Copied keys" : "Copied key") + ".");
 else         output(Globals.lang("Warning") + ": " + (bes.length - keys.size())+ " "+ Globals.lang("out of")+ " "+ bes.length+ " "+ Globals.lang("entries have undefined BibTeX key")+ ".");
      }
    }
  }
);
  actions.put("mergeDatabase",new BaseAction(){
    public void action(){
      final MergeDialog md=new MergeDialog(frame,Globals.lang("Append database"),true);
      Util.placeDialog(md,BasePanel.this);
      md.setVisible(true);
      if (md.okPressed) {
        String chosenFile=Globals.getNewFile(frame,prefs,new File(prefs.get("workingDirectory")),null,JFileChooser.OPEN_DIALOG,false);
        if (chosenFile == null)         return;
        fileToOpen=new File(chosenFile);
        if (fileToOpen != null) {
          (new Thread(){
            public void run(){
              openIt(md.importEntries(),md.importStrings(),md.importGroups(),md.importSelectorWords());
            }
          }
).start();
          frame.getFileHistory().newFile(fileToOpen.getPath());
        }
      }
    }
    void openIt(    boolean importEntries,    boolean importStrings,    boolean importGroups,    boolean importSelectorWords){
      if ((fileToOpen != null) && (fileToOpen.exists())) {
        try {
          prefs.put("workingDirectory",fileToOpen.getPath());
          String encoding=Globals.prefs.get("defaultEncoding");
          ParserResult pr=ImportFormatReader.loadDatabase(fileToOpen,encoding);
          BibtexDatabase db=pr.getDatabase();
          MetaData meta=new MetaData(pr.getMetaData(),pr.getDatabase());
          NamedCompound ce=new NamedCompound(Globals.lang("Append database"));
          Vector appendedEntries=new Vector();
          Vector originalEntries=new Vector();
          BibtexEntry originalEntry;
          if (importEntries) {
            Iterator i=db.getKeySet().iterator();
            while (i.hasNext()) {
              originalEntry=db.getEntryById((String)i.next());
              BibtexEntry be=(BibtexEntry)(originalEntry.clone());
              be.setId(Util.createNeutralId());
              database.insertEntry(be);
              appendedEntries.add(be);
              originalEntries.add(originalEntry);
              ce.addEdit(new UndoableInsertEntry(database,be,BasePanel.this));
            }
          }
          if (importStrings) {
            BibtexString bs;
            int pos=0;
            Iterator i=db.getStringKeySet().iterator();
            for (; i.hasNext(); ) {
              bs=(BibtexString)(db.getString(i.next()).clone());
              if (!database.hasStringLabel(bs.getName())) {
                database.addString(bs);
                ce.addEdit(new UndoableInsertString(BasePanel.this,database,bs));
              }
            }
          }
          if (importGroups) {
            GroupTreeNode newGroups=meta.getGroups();
            if (newGroups != null) {
              if (newGroups.getGroup() instanceof AllEntriesGroup) {
                ExplicitGroup group=new ExplicitGroup("Imported",AbstractGroup.INDEPENDENT);
                newGroups.setGroup(group);
                for (int i=0; i < appendedEntries.size(); ++i)                 group.addEntry((BibtexEntry)appendedEntries.elementAt(i));
              }
              frame.groupSelector.addGroups(newGroups,ce);
              GroupTreeNode node;
              ExplicitGroup group;
              BibtexEntry entry;
              for (Enumeration e=newGroups.preorderEnumeration(); e.hasMoreElements(); ) {
                node=(GroupTreeNode)e.nextElement();
                if (!(node.getGroup() instanceof ExplicitGroup))                 continue;
                group=(ExplicitGroup)node.getGroup();
                for (int i=0; i < originalEntries.size(); ++i) {
                  entry=(BibtexEntry)originalEntries.elementAt(i);
                  if (group.contains(entry)) {
                    group.removeEntry(entry);
                    group.addEntry((BibtexEntry)appendedEntries.elementAt(i));
                  }
                }
              }
              frame.groupSelector.revalidateGroups();
            }
          }
          if (importSelectorWords) {
            Iterator i=meta.iterator();
            while (i.hasNext()) {
              String s=(String)i.next();
              if (s.startsWith(Globals.SELECTOR_META_PREFIX)) {
                metaData.putData(s,meta.getData(s));
              }
            }
          }
          ce.end();
          undoManager.addEdit(ce);
          markBaseChanged();
          refreshTable();
          output("Imported from database '" + fileToOpen.getPath() + "':");
          fileToOpen=null;
        }
 catch (        Throwable ex) {
          ex.printStackTrace();
          JOptionPane.showMessageDialog(BasePanel.this,ex.getMessage(),"Open database",JOptionPane.ERROR_MESSAGE);
        }
      }
    }
  }
);
  actions.put("openFile",new BaseAction(){
    public void action(){
      (new Thread(){
        public void run(){
          BibtexEntry[] bes=entryTable.getSelectedEntries();
          String field="ps";
          if ((bes != null) && (bes.length == 1)) {
            Object link=bes[0].getField("ps");
            if (bes[0].getField("pdf") != null) {
              link=bes[0].getField("pdf");
              field="pdf";
            }
            String filepath=null;
            if (link != null) {
              filepath=link.toString();
            }
 else {
              String basefile;
              Object key=bes[0].getField(Globals.KEY_FIELD);
              if (key != null) {
                basefile=key.toString();
                String dir=prefs.get("pdfDirectory");
                if (dir.endsWith(System.getProperty("file.separator"))) {
                  basefile=dir + basefile;
                }
 else {
                  basefile=dir + System.getProperty("file.separator") + basefile;
                }
                final String[] typesToTry=new String[]{"html","ps","pdf"};
                for (int i=0; i < typesToTry.length; i++) {
                  File f=new File(basefile + "." + typesToTry[i]);
                  Util.pr("Checking for " + f);
                  if (f.exists()) {
                    field=typesToTry[i];
                    filepath=f.getPath();
                    break;
                  }
                }
              }
            }
            if (filepath != null) {
              try {
                Util.openExternalViewer(filepath,field,prefs);
                output(Globals.lang("External viewer called") + ".");
              }
 catch (              IOException ex) {
                output(Globals.lang("Error") + ": " + ex.getMessage());
              }
            }
 else             output(Globals.lang("No pdf or ps defined, and no file matching Bibtex key found") + ".");
          }
 else           output(Globals.lang("No entries or multiple entries selected."));
        }
      }
).start();
    }
  }
);
  actions.put("openUrl",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      String field="doi";
      if ((bes != null) && (bes.length == 1)) {
        Object link=bes[0].getField("doi");
        if (bes[0].getField("url") != null) {
          link=bes[0].getField("url");
          field="url";
        }
        if (link != null) {
          try {
            Util.openExternalViewer(link.toString(),field,prefs);
            output(Globals.lang("External viewer called") + ".");
          }
 catch (          IOException ex) {
            output(Globals.lang("Error: check your External viewer settings in Preferences") + ".");
          }
        }
 else         output(Globals.lang("No url defined") + ".");
      }
 else       output(Globals.lang("No entries or multiple entries selected."));
    }
  }
);
  actions.put("replaceAll",new BaseAction(){
    public void action(){
      ReplaceStringDialog rsd=new ReplaceStringDialog(frame);
      rsd.setVisible(true);
      if (!rsd.okPressed())       return;
      int counter=0;
      NamedCompound ce=new NamedCompound(Globals.lang("Replace string"));
      if (!rsd.selOnly()) {
        for (Iterator i=database.getKeySet().iterator(); i.hasNext(); )         counter+=rsd.replace(database.getEntryById((String)i.next()),ce);
      }
 else {
        BibtexEntry[] bes=entryTable.getSelectedEntries();
        for (int i=0; i < bes.length; i++)         counter+=rsd.replace(bes[i],ce);
      }
      output(Globals.lang("Replaced") + " " + counter+ " "+ Globals.lang(counter == 1 ? "occurence" : "occurences")+ ".");
      if (counter > 0) {
        ce.end();
        undoManager.addEdit(ce);
        markBaseChanged();
        refreshTable();
      }
    }
  }
);
  actions.put("dupliCheck",new BaseAction(){
    public void action(){
      DuplicateSearch ds=new DuplicateSearch(BasePanel.this);
      ds.start();
    }
  }
);
  actions.put("strictDupliCheck",new BaseAction(){
    public void action(){
      StrictDuplicateSearch ds=new StrictDuplicateSearch(BasePanel.this);
      ds.start();
    }
  }
);
  actions.put("plainTextImport",new BaseAction(){
    public void action(){
      EntryTypeDialog etd=new EntryTypeDialog(frame);
      Util.placeDialog(etd,BasePanel.this);
      etd.setVisible(true);
      BibtexEntryType tp=etd.getChoice();
      if (tp == null)       return;
      String id=Util.createNeutralId();
      BibtexEntry bibEntry=new BibtexEntry(id,tp);
      TextInputDialog tidialog=new TextInputDialog(frame,BasePanel.this,"import",true,bibEntry);
      Util.placeDialog(tidialog,BasePanel.this);
      tidialog.setVisible(true);
      if (tidialog.okPressed()) {
        insertEntry(bibEntry);
      }
    }
  }
);
  actions.put("importPlainText",new BaseAction(){
    public void action(){
      BibtexEntry bibEntry=null;
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0))       bibEntry=bes[0];
      if (bibEntry != null) {
        undoManager.addEdit(new UndoableInsertEntry(database,bibEntry,BasePanel.this));
        TextInputDialog tidialog=new TextInputDialog(frame,BasePanel.this,"import",true,bibEntry);
        Util.placeDialog(tidialog,BasePanel.this);
        tidialog.setVisible(true);
        if (tidialog.okPressed()) {
          output(Globals.lang("changed ") + " '" + bibEntry.getType().getName().toLowerCase()+ "' "+ Globals.lang("entry")+ ".");
          refreshTable();
          int row=tableModel.getNumberFromName(bibEntry.getId());
          entryTable.clearSelection();
          entryTable.scrollTo(row);
          markBaseChanged();
          if (prefs.getBoolean("autoOpenForm")) {
            showEntry(bibEntry);
          }
        }
      }
    }
  }
);
  actions.put("markEntries",new AbstractWorker(){
    private int besLength=-1;
    public void run(){
      NamedCompound ce=new NamedCompound(Globals.lang("Mark entries"));
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      besLength=bes.length;
      if (bes == null)       return;
      for (int i=0; i < bes.length; i++) {
        Object o=bes[i].getField(Globals.MARKED);
        if ((o != null) && (o.toString().equals("0")))         continue;
        ce.addEdit(new UndoableFieldChange(bes[i],Globals.MARKED,bes[i].getField(Globals.MARKED),"0"));
        bes[i].setField(Globals.MARKED,"0");
      }
      ce.end();
      undoManager.addEdit(ce);
    }
    public void update(){
      markBaseChanged();
      refreshTable();
      output(Globals.lang("Marked selected") + " " + Globals.lang(besLength > 0 ? "entry" : "entries"));
    }
  }
);
  actions.put("unmarkEntries",new BaseAction(){
    public void action(){
      try {
        NamedCompound ce=new NamedCompound(Globals.lang("Unmark entries"));
        BibtexEntry[] bes=entryTable.getSelectedEntries();
        if (bes == null)         return;
        for (int i=0; i < bes.length; i++) {
          ce.addEdit(new UndoableFieldChange(bes[i],Globals.MARKED,bes[i].getField(Globals.MARKED),null));
          bes[i].setField(Globals.MARKED,null);
        }
        ce.end();
        undoManager.addEdit(ce);
        markBaseChanged();
        refreshTable();
        output(Globals.lang("Unmarked selected") + " " + Globals.lang(bes.length > 0 ? "entry" : "entries"));
      }
 catch (      Throwable ex) {
        ex.printStackTrace();
      }
    }
  }
);
  actions.put("unmarkAll",new BaseAction(){
    public void action(){
      NamedCompound ce=new NamedCompound(Globals.lang("Unmark all"));
      Set keySet=database.getKeySet();
      for (Iterator i=keySet.iterator(); i.hasNext(); ) {
        BibtexEntry be=database.getEntryById((String)i.next());
        ce.addEdit(new UndoableFieldChange(be,Globals.MARKED,be.getField(Globals.MARKED),null));
        be.setField(Globals.MARKED,null);
      }
      ce.end();
      undoManager.addEdit(ce);
      markBaseChanged();
      refreshTable();
    }
  }
);
  actions.put("togglePreview",new BaseAction(){
    public void action(){
      boolean enabled=!Globals.prefs.getBoolean("previewEnabled");
      Globals.prefs.putBoolean("previewEnabled",enabled);
      if (!enabled)       hidePreview();
 else {
        updateViewToSelected();
      }
      frame.previewToggle.setSelected(enabled);
    }
  }
);
  actions.put("switchPreview",new BaseAction(){
    public void action(){
      if (activePreview < previewPanel.length - 1)       activePreview++;
 else       activePreview=0;
      if (!Globals.prefs.getBoolean("previewEnabled"))       hidePreview();
 else {
        updateViewToSelected();
      }
    }
  }
);
  actions.put("manageSelectors",new BaseAction(){
    public void action(){
      ContentSelectorDialog2 csd=new ContentSelectorDialog2(frame,frame,BasePanel.this,false,metaData,null);
      Util.placeDialog(csd,frame);
      csd.setVisible(true);
    }
  }
);
  actions.put("exportToClipboard",new AbstractWorker(){
    String message=null;
    public void run(){
      if (entryTable.getSelectedRowCount() == 0) {
        message=Globals.lang("No entries selected") + ".";
        getCallBack().update();
        return;
      }
      Map formats=new HashMap();
      formats.put("BibTeXML","bibtexml");
      formats.put("DocBook","docbook");
      formats.put("HTML","html");
      formats.put("RTF (Harvard)","harvard/harvard");
      formats.put("Simple HTML","simplehtml");
      for (int i=0; i < prefs.customExports.size(); i++) {
        Object o=(prefs.customExports.getElementAt(i))[0];
        formats.put(o,o);
      }
      Object[] array=formats.keySet().toArray();
      Arrays.sort(array);
      JList list=new JList(array);
      list.setBorder(BorderFactory.createEtchedBorder());
      list.setSelectionInterval(0,0);
      list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      int answer=JOptionPane.showOptionDialog(frame,list,Globals.lang("Select format"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,new String[]{Globals.lang("Ok"),Globals.lang("Cancel")},Globals.lang("Ok"));
      if (answer == JOptionPane.NO_OPTION)       return;
      String lfName=(String)(formats.get(list.getSelectedValue()));
      final boolean custom=(list.getSelectedIndex() >= Globals.STANDARD_EXPORT_COUNT);
      String dir=null;
      if (custom) {
        int index=list.getSelectedIndex() - Globals.STANDARD_EXPORT_COUNT;
        dir=(String)(prefs.customExports.getElementAt(index)[1]);
        File f=new File(dir);
        lfName=f.getName();
        lfName=lfName.substring(0,lfName.indexOf("."));
        dir=f.getParent() + System.getProperty("file.separator");
      }
      final String format=lfName, directory=dir;
      try {
        BibtexEntry[] bes=entryTable.getSelectedEntries();
        StringWriter sw=new StringWriter();
        FileActions.exportEntries(database,bes,format,custom,directory,sw);
        ClipboardOwner owner=new ClipboardOwner(){
          public void lostOwnership(          Clipboard clipboard,          Transferable content){
          }
        }
;
        RtfSelection rs=new RtfSelection(sw.toString());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(rs,owner);
        message=Globals.lang("Entries exported to clipboard") + ": " + bes.length;
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    public void update(){
      output(message);
    }
  }
);
  actions.put("test",new AbstractWorker(){
    public void init(){
      output("Downloading.");
    }
    public void run(){
    }
  }
);
  actions.put("autoSetPdf",new AutoSetExternalFileForEntries(this,"pdf"));
  actions.put("autoSetPs",new AutoSetExternalFileForEntries(this,"ps"));
}
