{
  actions.put("undo",undoAction);
  actions.put("redo",redoAction);
  actions.put("edit",new BaseAction(){
    public void action(){
      int clickedOn=-1;
      if (entryTable.getSelectedRowCount() == 1) {
        clickedOn=entryTable.getSelectedRow();
      }
      if (clickedOn >= 0) {
        String id=tableModel.getNameFromNumber(clickedOn);
        BibtexEntry be=database.getEntryById(id);
        showEntry(be);
      }
    }
  }
);
  actions.put("save",new BaseAction(){
    public void action(){
      if (file == null)       runCommand("saveAs");
 else {
        try {
          FileActions.saveDatabase(database,metaData,file,prefs,false,false);
          undoManager.markUnchanged();
          baseChanged=false;
          frame.setTabTitle(ths,file.getName());
          frame.output(Globals.lang("Saved database") + " '" + file.getPath()+ "'.");
        }
 catch (        SaveException ex) {
          if (ex.specificEntry()) {
            int row=tableModel.getNumberFromName(ex.getEntry().getId()), topShow=Math.max(0,row - 3);
            entryTable.setRowSelectionInterval(row,row);
            entryTable.setColumnSelectionInterval(0,entryTable.getColumnCount() - 1);
            entryTable.scrollTo(topShow);
          }
          ex.printStackTrace();
          JOptionPane.showMessageDialog(frame,Globals.lang("Could not save file") + ".\n" + ex.getMessage(),Globals.lang("Save database"),JOptionPane.ERROR_MESSAGE);
        }
      }
    }
  }
);
  actions.put("saveAs",new BaseAction(){
    public void action(){
      JFileChooser chooser=new JFileChooser(prefs.get("workingDirectory"));
      Util.pr("BasePanel: must set file filter");
      int returnVal=chooser.showSaveDialog(frame);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        String name=chooser.getSelectedFile().getName(), path=chooser.getSelectedFile().getParent();
        if (!name.endsWith(".bib"))         name=name + ".bib";
        file=new File(path,name);
        if (!file.exists() || (JOptionPane.showConfirmDialog(frame,"File '" + name + "' exists. Overwrite?","Save database",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)) {
          runCommand("save");
          prefs.put("workingDirectory",path);
        }
 else         file=null;
      }
 else {
      }
    }
  }
);
  actions.put("copy",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        TransferableBibtexEntry trbe=new TransferableBibtexEntry(bes);
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(trbe,ths);
        output("Copied " + (bes.length > 1 ? bes.length + " entries." : "1 entry."));
      }
 else {
        int[] rows=entryTable.getSelectedRows(), cols=entryTable.getSelectedColumns();
        if ((cols.length == 1) && (rows.length == 1)) {
          Object o=tableModel.getValueAt(rows[0],cols[0]);
          if (o != null) {
            StringSelection ss=new StringSelection(o.toString());
            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,ths);
            output(Globals.lang("Copied cell contents") + ".");
          }
        }
      }
    }
  }
);
  actions.put("cut",new BaseAction(){
    public void action(){
      runCommand("copy");
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if (bes.length > 0) {
        NamedCompound ce=new NamedCompound(bes.length > 1 ? Globals.lang("cut entries") : Globals.lang("cut entry"));
        for (int i=0; i < bes.length; i++) {
          database.removeEntry(bes[i].getId());
          ensureNotShowing(bes[i]);
          ce.addEdit(new UndoableRemoveEntry(database,bes[i],ths));
        }
        entryTable.clearSelection();
        frame.output(Globals.lang("Cut") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : Globals.lang("entry"))+ ".");
        ce.end();
        undoManager.addEdit(ce);
        refreshTable();
        markBaseChanged();
      }
    }
  }
);
  actions.put("delete",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if (bes.length > 0) {
        NamedCompound ce=new NamedCompound(bes.length > 1 ? Globals.lang("delete entries") : Globals.lang("delete entry"));
        for (int i=0; i < bes.length; i++) {
          database.removeEntry(bes[i].getId());
          ensureNotShowing(bes[i]);
          ce.addEdit(new UndoableRemoveEntry(database,bes[i],ths));
        }
        entryTable.clearSelection();
        frame.output(Globals.lang("Deleted") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : Globals.lang("entry"))+ ".");
        ce.end();
        undoManager.addEdit(ce);
        refreshTable();
        markBaseChanged();
      }
    }
  }
);
  actions.put("paste",new BaseAction(){
    public void action(){
      Transferable content=Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
      if (content != null) {
        DataFlavor[] flavor=content.getTransferDataFlavors();
        if ((flavor != null) && (flavor.length > 0) && flavor[0].equals(TransferableBibtexEntry.entryFlavor)) {
          BibtexEntry[] bes=null;
          try {
            bes=(BibtexEntry[])(content.getTransferData(TransferableBibtexEntry.entryFlavor));
          }
 catch (          UnsupportedFlavorException ex) {
          }
catch (          IOException ex) {
          }
          if ((bes != null) && (bes.length > 0)) {
            NamedCompound ce=new NamedCompound(bes.length > 1 ? "paste entries" : "paste entry");
            for (int i=0; i < bes.length; i++) {
              try {
                BibtexEntry be=(BibtexEntry)(bes[i].clone());
                be.setId(Util.createId(be.getType(),database));
                database.insertEntry(be);
                ce.addEdit(new UndoableInsertEntry(database,be,ths));
              }
 catch (              KeyCollisionException ex) {
                Util.pr("KeyCollisionException... this shouldn't happen.");
              }
            }
            ce.end();
            undoManager.addEdit(ce);
            tableModel.remap();
            entryTable.clearSelection();
            entryTable.revalidate();
            output("Pasted " + (bes.length > 1 ? bes.length + " entries." : "1 entry."));
            refreshTable();
            markBaseChanged();
          }
        }
        if ((flavor != null) && (flavor.length > 0) && flavor[0].equals(DataFlavor.stringFlavor)) {
          int[] rows=entryTable.getSelectedRows(), cols=entryTable.getSelectedColumns();
          if ((cols != null) && (cols.length == 1) && (cols[0] != 0)&& (rows != null)&& (rows.length == 1)) {
            try {
              tableModel.setValueAt((String)(content.getTransferData(DataFlavor.stringFlavor)),rows[0],cols[0]);
              refreshTable();
              markBaseChanged();
              output("Pasted cell contents");
            }
 catch (            UnsupportedFlavorException ex) {
            }
catch (            IOException ex) {
            }
catch (            IllegalArgumentException ex) {
              output("Can't paste.");
            }
          }
        }
      }
    }
  }
);
  actions.put("selectAll",new BaseAction(){
    public void action(){
      entryTable.selectAll();
    }
  }
);
  actions.put("editPreamble",new BaseAction(){
    public void action(){
      if (preambleEditor == null) {
        PreambleEditor form=new PreambleEditor(frame,ths,database,prefs);
        Util.placeDialog(form,frame);
        form.setVisible(true);
        preambleEditor=form;
      }
 else {
        preambleEditor.setVisible(true);
      }
    }
  }
);
  actions.put("editStrings",new BaseAction(){
    public void action(){
      if (stringDialog == null) {
        StringDialog form=new StringDialog(frame,ths,database,prefs);
        Util.placeDialog(form,frame);
        form.setVisible(true);
        stringDialog=form;
      }
 else {
        stringDialog.setVisible(true);
      }
    }
  }
);
  actions.put("toggleGroups",new BaseAction(){
    public void action(){
      sidePaneManager.togglePanel("groups");
    }
  }
);
  actions.put("pushToLyX",new BaseAction(){
    public void action(){
      int[] rows=entryTable.getSelectedRows();
      int numSelected=rows.length;
      BibtexEntry bes=null;
      output("Pushing " + numSelected + (numSelected > 1 ? " entries" : "entry")+ " to LyX");
      Object citekey;
      File lyxpipe=new File(System.getProperty("user.home") + File.separator + ".lyx/lyxpipe"+ ".in");
      if (!lyxpipe.exists() || !lyxpipe.canWrite()) {
        output("ERROR: verify that LyX is running and that the lyxpipe is valid. [" + prefs.get("lyxpipe") + "]");
        return;
      }
      if (numSelected > 0) {
        try {
          BufferedWriter lyx_out=new BufferedWriter(new FileWriter(lyxpipe));
          String citeStr="LYXCMD:sampleclient:citation-insert:" + database.getEntryById(tableModel.getNameFromNumber(rows[0])).getField(GUIGlobals.KEY_FIELD);
          String message="LYXPIPE: sent rows " + rows[0];
          for (int i=1; i < numSelected; i++) {
            bes=database.getEntryById(tableModel.getNameFromNumber(rows[i]));
            citekey=bes.getField(GUIGlobals.KEY_FIELD);
            citeStr+="," + citekey;
            message+=", " + rows[i];
          }
          lyx_out.write(citeStr + "\n");
          lyx_out.close();
          output(message);
        }
 catch (        IOException excep) {
          output("ERROR: unable to write to " + prefs.get("lyxpipe") + ".in");
        }
      }
    }
  }
);
  actions.put("makeKey",new BaseAction(){
    public void action(){
      int[] rows=entryTable.getSelectedRows();
      int numSelected=rows.length;
      BibtexEntry bes=null;
      if (numSelected > 0) {
        int answer=JOptionPane.showConfirmDialog(frame,"Generate bibtex key" + (numSelected > 1 ? "s for the selected " + numSelected + " entries?" : " for the selected entry?"),"Autogenerate Bibtexkey",JOptionPane.YES_NO_CANCEL_OPTION);
        if (answer != JOptionPane.YES_OPTION) {
          return;
        }
      }
 else {
        JOptionPane.showMessageDialog(frame,"First select the entries you want keys to be generated for.","Autogenerate Bibtexkey",JOptionPane.INFORMATION_MESSAGE);
        return;
      }
      output("Generating Bibtexkey for " + numSelected + (numSelected > 1 ? " entries" : "entry"));
      NamedCompound ce=new NamedCompound("autogenerate keys");
      Object oldValue;
      for (int i=0; i < numSelected; i++) {
        bes=database.getEntryById(tableModel.getNameFromNumber(rows[i]));
        oldValue=bes.getField(GUIGlobals.KEY_FIELD);
        bes=frame.labelMaker.applyRule(bes);
        ce.addEdit(new UndoableFieldChange(bes,GUIGlobals.KEY_FIELD,oldValue,bes.getField(GUIGlobals.KEY_FIELD)));
      }
      ce.end();
      undoManager.addEdit(ce);
      markBaseChanged();
      refreshTable();
    }
  }
);
}
