{
  actions.put("undo",undoAction);
  actions.put("redo",redoAction);
  actions.put("edit",new BaseAction(){
    public void action(){
      int clickedOn=-1;
      if (entryTable.getSelectedRowCount() == 1) {
        clickedOn=entryTable.getSelectedRow();
      }
      if (clickedOn >= 0) {
        String id=tableModel.getNameFromNumber(clickedOn);
        BibtexEntry be=database.getEntryById(id);
        showEntry(be);
        if (splitPane.getBottomComponent() != null)         new FocusRequester(splitPane.getBottomComponent());
      }
    }
  }
);
  actions.put("save",new BaseAction(){
    public void action() throws Throwable {
      if (file == null)       runCommand("saveAs");
 else {
        saveDatabase(file,false);
        undoManager.markUnchanged();
        nonUndoableChange=false;
        baseChanged=false;
        frame.setTabTitle(ths,file.getName());
        frame.output(Globals.lang("Saved database") + " '" + file.getPath()+ "'.");
      }
    }
  }
);
  actions.put("saveAs",new BaseAction(){
    public void action() throws Throwable {
      String chosenFile=Globals.getNewFile(frame,prefs,new File(prefs.get("workingDirectory")),".bib",JFileChooser.SAVE_DIALOG,false);
      if (chosenFile != null) {
        file=new File(chosenFile);
        if (!file.exists() || (JOptionPane.showConfirmDialog(frame,"'" + file.getName() + "' "+ Globals.lang("exists. Overwrite file?"),Globals.lang("Save database"),JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)) {
          runCommand("save");
          prefs.put("workingDirectory",file.getParent());
          frame.fileHistory.newFile(file.getPath());
        }
 else         file=null;
      }
    }
  }
);
  actions.put("saveSelectedAs",new BaseAction(){
    public void action() throws Throwable {
      String chosenFile=Globals.getNewFile(frame,prefs,new File(prefs.get("workingDirectory")),".bib",JFileChooser.SAVE_DIALOG,false);
      if (chosenFile != null) {
        File expFile=new File(chosenFile);
        if (!expFile.exists() || (JOptionPane.showConfirmDialog(frame,"'" + expFile.getName() + "' "+ Globals.lang("exists. Overwrite file?"),Globals.lang("Save database"),JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)) {
          saveDatabase(expFile,true);
          frame.fileHistory.newFile(expFile.getPath());
          frame.output(Globals.lang("Saved selected to") + " '" + expFile.getPath()+ "'.");
        }
      }
    }
  }
);
  actions.put("copy",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        TransferableBibtexEntry trbe=new TransferableBibtexEntry(bes);
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(trbe,ths);
        output(Globals.lang("Copied") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : "1 " + Globals.lang("entry") + "."));
      }
 else {
        int[] rows=entryTable.getSelectedRows(), cols=entryTable.getSelectedColumns();
        if ((cols.length == 1) && (rows.length == 1)) {
          Object o=tableModel.getValueAt(rows[0],cols[0]);
          if (o != null) {
            StringSelection ss=new StringSelection(o.toString());
            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,ths);
            output(Globals.lang("Copied cell contents") + ".");
          }
        }
      }
    }
  }
);
  actions.put("cut",new BaseAction(){
    public void action() throws Throwable {
      runCommand("copy");
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        NamedCompound ce=new NamedCompound(bes.length > 1 ? "cut entries" : "cut entry");
        for (int i=0; i < bes.length; i++) {
          database.removeEntry(bes[i].getId());
          ensureNotShowing(bes[i]);
          ce.addEdit(new UndoableRemoveEntry(database,bes[i],ths));
        }
        entryTable.clearSelection();
        frame.output(Globals.lang("Cut_pr") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : Globals.lang("entry"))+ ".");
        ce.end();
        undoManager.addEdit(ce);
        refreshTable();
        markBaseChanged();
      }
    }
  }
);
  actions.put("delete",new BaseAction(){
    public void action(){
      boolean cancelled=false;
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      int row0=entryTable.getSelectedRow();
      if ((bes != null) && (bes.length > 0)) {
        if (prefs.getBoolean("confirmDelete")) {
          String msg=Globals.lang("Really delete the selected") + " " + Globals.lang("entry")+ "?", title=Globals.lang("Delete entry");
          if (bes.length > 1) {
            msg=Globals.lang("Really delete the selected") + " " + bes.length+ " "+ Globals.lang("entries")+ "?";
            title=Globals.lang("Delete multiple entries");
          }
          CheckBoxMessage cb=new CheckBoxMessage(msg,Globals.lang("Disable this confirmation dialog"),false);
          int answer=JOptionPane.showConfirmDialog(frame,cb,title,JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
          if (answer == JOptionPane.NO_OPTION) {
            entryTable.clearSelection();
            cancelled=true;
          }
          if (cb.isSelected())           prefs.putBoolean("confirmDelete",false);
        }
        if (!cancelled) {
          NamedCompound ce=new NamedCompound(bes.length > 1 ? Globals.lang("delete entries") : Globals.lang("delete entry"));
          for (int i=0; i < bes.length; i++) {
            database.removeEntry(bes[i].getId());
            ce.addEdit(new UndoableRemoveEntry(database,bes[i],ths));
          }
          frame.output(Globals.lang("Deleted") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : Globals.lang("entry"))+ ".");
          ce.end();
          undoManager.addEdit(ce);
          entryTable.clearSelection();
          refreshTable();
          markBaseChanged();
        }
      }
    }
  }
);
  actions.put("paste",new BaseAction(){
    public void action(){
      Transferable content=Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
      if (content != null) {
        BibtexEntry[] bes=null;
        if (content.isDataFlavorSupported(TransferableBibtexEntry.entryFlavor)) {
          try {
            bes=(BibtexEntry[])(content.getTransferData(TransferableBibtexEntry.entryFlavor));
          }
 catch (          UnsupportedFlavorException ex) {
            ex.printStackTrace();
          }
catch (          IOException ex) {
            ex.printStackTrace();
          }
        }
 else         if (content.isDataFlavorSupported(DataFlavor.stringFlavor)) {
          int[] rows=entryTable.getSelectedRows(), cols=entryTable.getSelectedColumns();
          Util.pr(rows.length + " x " + cols.length);
          if ((cols != null) && (cols.length == 1) && (cols[0] != 0)&& (rows != null)&& (rows.length == 1)) {
            try {
              tableModel.setValueAt((String)(content.getTransferData(DataFlavor.stringFlavor)),rows[0],cols[0]);
              refreshTable();
              markBaseChanged();
              output("Pasted cell contents");
            }
 catch (            UnsupportedFlavorException ex) {
              ex.printStackTrace();
            }
catch (            IOException ex) {
              ex.printStackTrace();
            }
catch (            IllegalArgumentException ex) {
              output("Can't paste.");
            }
          }
 else {
            try {
              BibtexParser bp=new BibtexParser(new java.io.StringReader((String)(content.getTransferData(DataFlavor.stringFlavor))));
              BibtexDatabase db=bp.parse().getDatabase();
              Util.pr("Parsed " + db.getEntryCount() + " entries from clipboard text");
              if (db.getEntryCount() > 0) {
                Set keySet=db.getKeySet();
                if (keySet != null) {
                  bes=new BibtexEntry[db.getEntryCount()];
                  Iterator it=keySet.iterator();
                  for (int i=0; it.hasNext(); i++) {
                    bes[i]=db.getEntryById((String)(it.next()));
                  }
                }
              }
 else {
                String cont=(String)(content.getTransferData(DataFlavor.stringFlavor));
                Util.pr("----------------\n" + cont + "\n---------------------");
                TextAnalyzer ta=new TextAnalyzer(cont);
                output(Globals.lang("Unable to parse clipboard text as Bibtex entries."));
              }
            }
 catch (            UnsupportedFlavorException ex) {
              ex.printStackTrace();
            }
catch (            Throwable ex) {
              ex.printStackTrace();
            }
          }
        }
        if ((bes != null) && (bes.length > 0)) {
          NamedCompound ce=new NamedCompound(bes.length > 1 ? "paste entries" : "paste entry");
          for (int i=0; i < bes.length; i++) {
            try {
              BibtexEntry be=(BibtexEntry)(bes[i].clone());
              be.setId(Util.createId(be.getType(),database));
              database.insertEntry(be);
              ce.addEdit(new UndoableInsertEntry(database,be,ths));
            }
 catch (            KeyCollisionException ex) {
              Util.pr("KeyCollisionException... this shouldn't happen.");
            }
          }
          ce.end();
          undoManager.addEdit(ce);
          tableModel.remap();
          entryTable.clearSelection();
          entryTable.revalidate();
          output(Globals.lang("Pasted") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : "1 " + Globals.lang("entry"))+ ".");
          refreshTable();
          markBaseChanged();
        }
      }
    }
  }
);
  actions.put("selectAll",new BaseAction(){
    public void action(){
      entryTable.selectAll();
    }
  }
);
  actions.put("editPreamble",new BaseAction(){
    public void action(){
      if (preambleEditor == null) {
        PreambleEditor form=new PreambleEditor(frame,ths,database,prefs);
        Util.placeDialog(form,frame);
        form.setVisible(true);
        preambleEditor=form;
      }
 else {
        preambleEditor.setVisible(true);
      }
    }
  }
);
  actions.put("editStrings",new BaseAction(){
    public void action(){
      if (stringDialog == null) {
        StringDialog form=new StringDialog(frame,ths,database,prefs);
        Util.placeDialog(form,frame);
        form.setVisible(true);
        stringDialog=form;
      }
 else {
        stringDialog.setVisible(true);
      }
    }
  }
);
  actions.put("toggleGroups",new BaseAction(){
    public void action(){
      sidePaneManager.togglePanel("groups");
      frame.groupToggle.setSelected(sidePaneManager.isPanelVisible("groups"));
    }
  }
);
  actions.put("pushToLyX",new BaseAction(){
    public void action(){
      final int[] rows=entryTable.getSelectedRows();
      final int numSelected=rows.length;
      final File lyxpipe=new File(prefs.get("lyxpipe") + ".in");
      if (!lyxpipe.exists() || !lyxpipe.canWrite()) {
        output(Globals.lang("Error") + ": " + Globals.lang("verify that LyX is running and that the lyxpipe is valid")+ ". ["+ prefs.get("lyxpipe")+ "]");
        return;
      }
      if (numSelected > 0) {
        Thread pushThread=new Thread(){
          public void run(){
            try {
              FileWriter fw=new FileWriter(lyxpipe);
              BufferedWriter lyx_out=new BufferedWriter(fw);
              String citeStr="", citeKey="", message="";
              for (int i=0; i < numSelected; i++) {
                BibtexEntry bes=database.getEntryById(tableModel.getNameFromNumber(rows[i]));
                citeKey=(String)bes.getField(GUIGlobals.KEY_FIELD);
                if (citeKey == null || citeKey.equals(""))                 continue;
                if (citeStr.equals(""))                 citeStr=citeKey;
 else                 citeStr+="," + citeKey;
                if (i > 0)                 message+=", ";
                message+=(1 + rows[i]);
              }
              if (citeStr.equals(""))               output(Globals.lang("Please define BibTeX key first"));
 else {
                citeStr="LYXCMD:sampleclient:citation-insert:" + citeStr;
                lyx_out.write(citeStr + "\n");
                output(Globals.lang("Pushed the citations for the following rows to") + " Lyx: " + message);
              }
              lyx_out.close();
            }
 catch (            IOException excep) {
              output(Globals.lang("Error") + ": " + Globals.lang("unable to write to")+ " "+ prefs.get("lyxpipe")+ ".in");
            }
          }
        }
;
        pushThread.start();
        Timeout t=new Timeout(2000,pushThread,Globals.lang("Error") + ": " + Globals.lang("unable to access LyX-pipe"));
        t.start();
      }
    }
  }
);
  actions.put("pushToWinEdt",new BaseAction(){
    public void action(){
      final int[] rows=entryTable.getSelectedRows();
      final int numSelected=rows.length;
      if (numSelected > 0) {
        Thread pushThread=new Thread(){
          public void run(){
            String winEdt=prefs.get("winEdtPath");
            try {
              StringBuffer toSend=new StringBuffer("\"[InsText('\\cite{");
              String citeKey="", message="";
              boolean first=true;
              for (int i=0; i < numSelected; i++) {
                BibtexEntry bes=database.getEntryById(tableModel.getNameFromNumber(rows[i]));
                citeKey=(String)bes.getField(GUIGlobals.KEY_FIELD);
                if (citeKey == null || citeKey.equals(""))                 continue;
                if (first) {
                  toSend.append(citeKey);
                  first=false;
                }
 else                 toSend.append("," + citeKey);
                if (i > 0)                 message+=", ";
                message+=(1 + rows[i]);
              }
              if (first)               output(Globals.lang("Please define BibTeX key first"));
 else {
                toSend.append("}');]\"");
                Util.pr(toSend.toString());
                Runtime.getRuntime().exec(winEdt + " " + toSend.toString());
                output(Globals.lang("Pushed the citations for the following rows to") + "WinEdt: " + message);
              }
            }
 catch (            IOException excep) {
              output(Globals.lang("Error") + ": " + Globals.lang("Could not call executable")+ " '"+ winEdt+ "'.");
              excep.printStackTrace();
            }
          }
        }
;
        pushThread.start();
      }
    }
  }
);
  actions.put("makeKey",new BaseAction(){
    public void action(){
      int[] rows=entryTable.getSelectedRows();
      int numSelected=rows.length;
      BibtexEntry bes=null;
      if (numSelected == 0) {
        JOptionPane.showMessageDialog(frame,Globals.lang("First select the entries you want keys to be generated for."),Globals.lang("Autogenerate BibTeX key"),JOptionPane.INFORMATION_MESSAGE);
        return;
      }
      output(Globals.lang("Generating BibTeX key for") + " " + numSelected+ " "+ (numSelected > 1 ? Globals.lang("entries") : Globals.lang("entry")));
      NamedCompound ce=new NamedCompound("autogenerate keys");
      Object oldValue;
      for (int i=0; i < numSelected; i++) {
        bes=database.getEntryById(tableModel.getNameFromNumber(rows[i]));
        oldValue=bes.getField(GUIGlobals.KEY_FIELD);
        bes=LabelPatternUtil.makeLabel(prefs.getKeyPattern(),database,bes);
        ce.addEdit(new UndoableKeyChange(database,bes.getId(),(String)oldValue,(String)bes.getField(GUIGlobals.KEY_FIELD)));
      }
      ce.end();
      undoManager.addEdit(ce);
      markBaseChanged();
      refreshTable();
      output(Globals.lang("Generated BibTeX key for") + " " + numSelected+ " "+ (numSelected > 1 ? Globals.lang("entries") : Globals.lang("entry")));
    }
  }
);
  actions.put("search",new BaseAction(){
    public void action(){
      sidePaneManager.togglePanel("search");
      boolean on=sidePaneManager.isPanelVisible("search");
      frame.searchToggle.setSelected(on);
      if (on)       searchManager.startSearch();
    }
  }
);
  actions.put("incSearch",new BaseAction(){
    public void action(){
      sidePaneManager.ensureVisible("search");
      frame.searchToggle.setSelected(true);
      searchManager.startIncrementalSearch();
    }
  }
);
  actions.put("copyKey",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        Vector keys=new Vector();
        for (int i=0; i < bes.length; i++)         if (bes[i].getField(Globals.KEY_FIELD) != null)         keys.add(bes[i].getField(Globals.KEY_FIELD));
        if (keys.size() == 0) {
          output("None of the selected entries have BibTeX keys.");
          return;
        }
        StringBuffer sb=new StringBuffer((String)keys.elementAt(0));
        for (int i=1; i < keys.size(); i++) {
          sb.append(',');
          sb.append((String)keys.elementAt(i));
        }
        StringSelection ss=new StringSelection(sb.toString());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,ths);
        if (keys.size() == bes.length)         output(Globals.lang((bes.length > 1) ? "Copied keys" : "Copied key") + ".");
 else         output(Globals.lang("Warning") + ": " + (bes.length - keys.size())+ " "+ Globals.lang("out of")+ " "+ bes.length+ " "+ Globals.lang("entries have undefined BibTeX key")+ ".");
      }
    }
  }
);
  actions.put("copyCiteKey",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      if ((bes != null) && (bes.length > 0)) {
        Vector keys=new Vector();
        for (int i=0; i < bes.length; i++)         if (bes[i].getField(Globals.KEY_FIELD) != null)         keys.add(bes[i].getField(Globals.KEY_FIELD));
        if (keys.size() == 0) {
          output("None of the selected entries have BibTeX keys.");
          return;
        }
        StringBuffer sb=new StringBuffer((String)keys.elementAt(0));
        for (int i=1; i < keys.size(); i++) {
          sb.append(',');
          sb.append((String)keys.elementAt(i));
        }
        StringSelection ss=new StringSelection("\\cite{" + sb.toString() + "}");
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,ths);
        if (keys.size() == bes.length)         output(Globals.lang((bes.length > 1) ? "Copied keys" : "Copied key") + ".");
 else         output(Globals.lang("Warning") + ": " + (bes.length - keys.size())+ " "+ Globals.lang("out of")+ " "+ bes.length+ " "+ Globals.lang("entries have undefined BibTeX key")+ ".");
      }
    }
  }
);
  actions.put("mergeDatabase",new BaseAction(){
    public void action(){
      final MergeDialog md=new MergeDialog(frame,Globals.lang("Append database"),true);
      Util.placeDialog(md,ths);
      md.setVisible(true);
      if (md.okPressed) {
        String chosenFile=Globals.getNewFile(frame,prefs,new File(prefs.get("workingDirectory")),null,JFileChooser.OPEN_DIALOG,false);
        if (chosenFile == null)         return;
        fileToOpen=new File(chosenFile);
        if (fileToOpen != null) {
          (new Thread(){
            public void run(){
              openIt(md.importEntries(),md.importStrings(),md.importGroups(),md.importSelectorWords());
            }
          }
).start();
          frame.fileHistory.newFile(fileToOpen.getPath());
        }
      }
    }
    void openIt(    boolean importEntries,    boolean importStrings,    boolean importGroups,    boolean importSelectorWords){
      if ((fileToOpen != null) && (fileToOpen.exists())) {
        try {
          prefs.put("workingDirectory",fileToOpen.getPath());
          String encoding=Globals.prefs.get("defaultEncoding");
          ParserResult pr=ImportFormatReader.loadDatabase(fileToOpen,encoding);
          BibtexDatabase db=pr.getDatabase();
          MetaData meta=new MetaData(pr.getMetaData());
          NamedCompound ce=new NamedCompound("Append database");
          if (importEntries) {
            Iterator i=db.getKeySet().iterator();
            while (i.hasNext()) {
              BibtexEntry be=(BibtexEntry)(db.getEntryById((String)i.next()).clone());
              be.setId(Util.createNeutralId());
              database.insertEntry(be);
              ce.addEdit(new UndoableInsertEntry(database,be,ths));
            }
          }
          if (importStrings) {
            BibtexString bs;
            int pos=0;
            for (int i=0; i < db.getStringCount(); i++) {
              bs=(BibtexString)(db.getString(i).clone());
              if (!database.hasStringLabel(bs.getName())) {
                pos=database.getStringCount();
                database.addString(bs,pos);
                ce.addEdit(new UndoableInsertString(ths,database,bs,pos));
              }
            }
          }
          if (importGroups) {
            Vector newGroups=meta.getData("groups");
            if (newGroups != null) {
              groupSelector.addGroups(newGroups,ce);
              groupSelector.revalidateList();
            }
          }
          if (importSelectorWords) {
            Iterator i=meta.iterator();
            while (i.hasNext()) {
              String s=(String)i.next();
              if (s.startsWith(Globals.SELECTOR_META_PREFIX)) {
                metaData.putData(s,meta.getData(s));
              }
            }
          }
          ce.end();
          undoManager.addEdit(ce);
          markBaseChanged();
          refreshTable();
          output("Imported from database '" + fileToOpen.getPath() + "':");
          fileToOpen=null;
        }
 catch (        Throwable ex) {
          ex.printStackTrace();
          JOptionPane.showMessageDialog(ths,ex.getMessage(),"Open database",JOptionPane.ERROR_MESSAGE);
        }
      }
    }
  }
);
  actions.put("openFile",new BaseAction(){
    public void action(){
      (new Thread(){
        public void run(){
          BibtexEntry[] bes=entryTable.getSelectedEntries();
          String field="ps";
          if ((bes != null) && (bes.length == 1)) {
            Object link=bes[0].getField("ps");
            if (bes[0].getField("pdf") != null) {
              link=bes[0].getField("pdf");
              field="pdf";
            }
            String filepath=null;
            if (link != null) {
              filepath=link.toString();
            }
 else {
              String basefile;
              Object key=bes[0].getField(Globals.KEY_FIELD);
              if (key != null) {
                basefile=key.toString();
                String dir=prefs.get("pdfDirectory");
                if (dir.endsWith(System.getProperty("file.separator"))) {
                  basefile=dir + basefile;
                }
 else {
                  basefile=dir + System.getProperty("file.separator") + basefile;
                }
                final String[] typesToTry=new String[]{"html","ps","pdf"};
                for (int i=0; i < typesToTry.length; i++) {
                  File f=new File(basefile + "." + typesToTry[i]);
                  Util.pr("Checking for " + f);
                  if (f.exists()) {
                    field=typesToTry[i];
                    filepath=f.getPath();
                    break;
                  }
                }
              }
            }
            if (filepath != null) {
              try {
                Util.openExternalViewer(filepath,field,prefs);
                output(Globals.lang("External viewer called") + ".");
              }
 catch (              IOException ex) {
                output(Globals.lang("Error") + ": " + ex.getMessage());
              }
            }
 else             output(Globals.lang("No pdf or ps defined, and no file matching Bibtex key found") + ".");
          }
 else           output(Globals.lang("No entries or multiple entries selected."));
        }
      }
).start();
    }
  }
);
  actions.put("openUrl",new BaseAction(){
    public void action(){
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      String field="doi";
      if ((bes != null) && (bes.length == 1)) {
        Object link=bes[0].getField("doi");
        if (bes[0].getField("url") != null) {
          link=bes[0].getField("url");
          field="url";
        }
        if (link != null) {
          try {
            Util.openExternalViewer(link.toString(),field,prefs);
            output(Globals.lang("External viewer called") + ".");
          }
 catch (          IOException ex) {
            output(Globals.lang("Error: check your External viewer settings in Preferences") + ".");
          }
        }
 else         output(Globals.lang("No url defined") + ".");
      }
 else       output(Globals.lang("No entries or multiple entries selected."));
    }
  }
);
  actions.put("replaceAll",new BaseAction(){
    public void action(){
      ReplaceStringDialog rsd=new ReplaceStringDialog(frame);
      rsd.show();
      if (!rsd.okPressed())       return;
      int counter=0;
      NamedCompound ce=new NamedCompound("Replace string");
      if (!rsd.selOnly()) {
        for (Iterator i=database.getKeySet().iterator(); i.hasNext(); )         counter+=rsd.replace(database.getEntryById((String)i.next()),ce);
      }
 else {
        BibtexEntry[] bes=entryTable.getSelectedEntries();
        for (int i=0; i < bes.length; i++)         counter+=rsd.replace(bes[i],ce);
      }
      output(Globals.lang("Replaced") + " " + counter+ " "+ Globals.lang(counter == 1 ? "occurence" : "occurences")+ ".");
      if (counter > 0) {
        ce.end();
        undoManager.addEdit(ce);
        markBaseChanged();
        refreshTable();
      }
    }
  }
);
  actions.put("dupliCheck",new BaseAction(){
    public void action(){
      DuplicateSearch ds=new DuplicateSearch(ths);
      ds.start();
    }
  }
);
  actions.put("markEntries",new BaseAction(){
    public void action(){
      NamedCompound ce=new NamedCompound("Mark entries");
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      for (int i=0; i < bes.length; i++) {
        ce.addEdit(new UndoableFieldChange(bes[i],Globals.MARKED,bes[i].getField(Globals.MARKED),"0"));
        bes[i].setField(Globals.MARKED,"0");
      }
      ce.end();
      undoManager.addEdit(ce);
      markBaseChanged();
      refreshTable();
    }
  }
);
  actions.put("unmarkEntries",new BaseAction(){
    public void action(){
      NamedCompound ce=new NamedCompound("Unmark entries");
      BibtexEntry[] bes=entryTable.getSelectedEntries();
      for (int i=0; i < bes.length; i++) {
        ce.addEdit(new UndoableFieldChange(bes[i],Globals.MARKED,bes[i].getField(Globals.MARKED),null));
        bes[i].setField(Globals.MARKED,null);
      }
      ce.end();
      undoManager.addEdit(ce);
      markBaseChanged();
      refreshTable();
    }
  }
);
  actions.put("unmarkAll",new BaseAction(){
    public void action(){
      NamedCompound ce=new NamedCompound("Unmark all");
      Set keySet=database.getKeySet();
      for (Iterator i=keySet.iterator(); i.hasNext(); ) {
        BibtexEntry be=database.getEntryById((String)i.next());
        ce.addEdit(new UndoableFieldChange(be,Globals.MARKED,be.getField(Globals.MARKED),null));
        be.setField(Globals.MARKED,null);
      }
      ce.end();
      undoManager.addEdit(ce);
      markBaseChanged();
      refreshTable();
    }
  }
);
  actions.put("togglePreview",new BaseAction(){
    public void action(){
      previewEnabled=!previewEnabled;
      if (!previewEnabled)       hidePreview();
 else {
        updateViewToSelected();
      }
    }
  }
);
}
