{
  LabelPatternUtil._db=database;
  ArrayList<String> _al;
  String _label;
  StringBuilder _sb=new StringBuilder();
  boolean forceUpper=false, forceLower=false;
  try {
    String _type=_entry.getType().getName().toLowerCase();
    _al=metaData.getLabelPattern().getValue(_type);
    int _alSize=_al.size();
    boolean field=false;
    for (int i=1; i < _alSize; i++) {
      String val=_al.get(i);
      if (val.equals("[")) {
        field=true;
      }
 else       if (val.equals("]")) {
        field=false;
      }
 else       if (field) {
        String[] parts=LabelPatternUtil.parseFieldMarker(val);
        String label=LabelPatternUtil.makeLabel(_entry,parts[0]);
        if (parts.length > 1) {
          label=LabelPatternUtil.applyModifiers(label,parts,1);
        }
        _sb.append(label);
      }
 else {
        _sb.append(val);
      }
    }
  }
 catch (  Exception e) {
    System.err.println(e);
  }
  _label=Util.checkLegalKey(_sb.toString());
  String regex=Globals.prefs.get("KeyPatternRegex");
  if (regex != null && !regex.trim().isEmpty()) {
    String replacement=Globals.prefs.get("KeyPatternReplacement");
    _label=_label.replaceAll(regex,replacement);
  }
  if (forceUpper) {
    _label=_label.toUpperCase();
  }
  if (forceLower) {
    _label=_label.toLowerCase();
  }
  String oldKey=_entry.getCiteKey();
  int occurences=LabelPatternUtil._db.getNumberOfKeyOccurences(_label);
  if (oldKey != null && oldKey.equals(_label)) {
    occurences--;
  }
  boolean alwaysAddLetter=Globals.prefs.getBoolean(JabRefPreferences.KEY_GEN_ALWAYS_ADD_LETTER), firstLetterA=Globals.prefs.getBoolean(JabRefPreferences.KEY_GEN_FIRST_LETTER_A);
  if (!alwaysAddLetter && occurences == 0) {
    if (!_label.equals(oldKey)) {
      if (LabelPatternUtil._db.getEntryById(_entry.getId()) == null) {
        _entry.setField(BibtexFields.KEY_FIELD,_label);
      }
 else {
        LabelPatternUtil._db.setCiteKeyForEntry(_entry.getId(),_label);
      }
    }
  }
 else {
    int number=0;
    if (!alwaysAddLetter && !firstLetterA) {
      number=1;
    }
    String moddedKey=_label + LabelPatternUtil.getAddition(number);
    occurences=LabelPatternUtil._db.getNumberOfKeyOccurences(moddedKey);
    if (oldKey != null && oldKey.equals(moddedKey)) {
      occurences--;
    }
    while (occurences > 0) {
      number++;
      moddedKey=_label + LabelPatternUtil.getAddition(number);
      occurences=LabelPatternUtil._db.getNumberOfKeyOccurences(moddedKey);
      if (oldKey != null && oldKey.equals(moddedKey)) {
        occurences--;
      }
    }
    if (!moddedKey.equals(oldKey)) {
      if (LabelPatternUtil._db.getEntryById(_entry.getId()) == null) {
        _entry.setField(BibtexFields.KEY_FIELD,moddedKey);
      }
 else {
        LabelPatternUtil._db.setCiteKeyForEntry(_entry.getId(),moddedKey);
      }
    }
  }
  return _entry;
}
