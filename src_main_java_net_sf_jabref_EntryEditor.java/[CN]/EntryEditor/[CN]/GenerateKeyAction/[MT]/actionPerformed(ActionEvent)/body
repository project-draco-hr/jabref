{
  try {
    storeCurrentEdit();
    Object oldValue=entry.getField(BibtexFields.KEY_FIELD);
    if (oldValue != null) {
      if (Globals.prefs.getBoolean("avoidOverwritingKey")) {
        panel.output(Globals.lang("Not overwriting existing key. To change this setting, open Options -> Prefererences -> BibTeX key generator"));
        return;
      }
 else       if (Globals.prefs.getBoolean("warnBeforeOverwritingKey")) {
        CheckBoxMessage cbm=new CheckBoxMessage(Globals.lang("The current BibTeX key will be overwritten. Continue?"),Globals.lang("Disable this confirmation dialog"),false);
        int answer=JOptionPane.showConfirmDialog(frame,cbm,Globals.lang("Overwrite key"),JOptionPane.YES_NO_OPTION);
        if (cbm.isSelected()) {
          Globals.prefs.putBoolean("warnBeforeOverwritingKey",false);
        }
        if (answer == JOptionPane.NO_OPTION) {
          return;
        }
      }
    }
    LabelPatternUtil.makeLabel(panel.metaData,panel.database,entry);
    panel.undoManager.addEdit(new UndoableKeyChange(panel.database,entry.getId(),(String)oldValue,entry.getField(BibtexFields.KEY_FIELD)));
    String bibtexKeyData=entry.getField(BibtexFields.KEY_FIELD);
    setField(BibtexFields.KEY_FIELD,bibtexKeyData);
    updateSource();
    panel.markBaseChanged();
  }
 catch (  Throwable t) {
    System.err.println("error setting key: " + t);
  }
}
