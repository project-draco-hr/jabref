{
  BibtexParser bp=new BibtexParser(new java.io.StringReader(source.getText()));
  try {
    BibtexDatabase db=bp.parse().getDatabase();
    if (db.getEntryCount() > 1)     throw new Exception("More than one entry found.");
    if (db.getEntryCount() < 1)     throw new Exception("No entries found.");
    NamedCompound compound=new NamedCompound(Globals.lang("source edit"));
    BibtexEntry nu=db.getEntryById((String)db.getKeySet().iterator().next());
    String id=entry.getId();
    String newKey=nu.getCiteKey();
    boolean anyChanged=false;
    boolean duplicateWarning=false;
    boolean emptyWarning=newKey == null || newKey.equals("");
    if (panel.database.setCiteKeyForEntry(id,newKey)) {
      duplicateWarning=true;
    }
    Object[] fields=entry.getAllFields();
    for (int i=0; i < fields.length; i++) {
      if (GUIGlobals.isWriteableField(fields[i].toString())) {
        if (nu.getField(fields[i].toString()) == null) {
          compound.addEdit(new UndoableFieldChange(entry,fields[i].toString(),entry.getField(fields[i].toString()),(Object)null));
          entry.clearField(fields[i].toString());
          anyChanged=true;
        }
      }
    }
    fields=nu.getAllFields();
    for (int i=0; i < fields.length; i++) {
      if (entry.getField(fields[i].toString()) != nu.getField(fields[i].toString())) {
        String toSet=(String)nu.getField(fields[i].toString());
        (new LatexFieldFormatter()).format(toSet,GUIGlobals.isStandardField(fields[i].toString()));
        compound.addEdit(new UndoableFieldChange(entry,fields[i].toString(),entry.getField(fields[i].toString()),toSet));
        entry.setField(fields[i].toString(),toSet);
        anyChanged=true;
      }
    }
    compound.end();
    if (!anyChanged)     return true;
    panel.undoManager.addEdit(compound);
    if (duplicateWarning) {
      warnDuplicateBibtexkey();
    }
 else     if (emptyWarning) {
      warnEmptyBibtexkey();
    }
 else {
      panel.output(Globals.lang("Stored entry") + ".");
    }
    lastSourceStringAccepted=source.getText();
    updateAllFields();
    lastSourceAccepted=true;
    updateSource=true;
    panel.markBaseChanged();
    return true;
  }
 catch (  Throwable ex) {
    updateSource=false;
    lastSourceAccepted=false;
    tabbed.setSelectedComponent(srcPanel);
    if (showError) {
      Object[] options={Globals.lang("Edit"),Globals.lang("Revert to original source")};
      int answer=JOptionPane.showOptionDialog(frame,"Error: " + ex.getMessage(),Globals.lang("Problem with parsing entry"),JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[0]);
      if (answer != 0) {
        updateSource=true;
        updateSource();
      }
    }
    return false;
  }
}
