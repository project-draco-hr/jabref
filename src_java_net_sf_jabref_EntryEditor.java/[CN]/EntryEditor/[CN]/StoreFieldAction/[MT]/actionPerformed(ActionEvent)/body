{
  if (e.getSource() instanceof FieldTextArea) {
    String toSet=null;
    FieldEditor fe=(FieldEditor)e.getSource();
    boolean set;
    fe.setText(fe.getText().trim());
    if (fe.getText().length() > 0) {
      toSet=fe.getText();
    }
    if (toSet == null) {
      if (entry.getField(fe.getFieldName()) == null) {
        set=false;
      }
 else {
        set=true;
      }
    }
 else {
      if ((entry.getField(fe.getFieldName()) != null) && toSet.equals(entry.getField(fe.getFieldName()).toString())) {
        set=false;
      }
 else {
        set=true;
      }
    }
    if (set) {
      try {
        if (toSet != null) {
          (new LatexFieldFormatter()).format(toSet,GUIGlobals.isStandardField(fe.getFieldName()));
        }
        Object oldValue=entry.getField(fe.getFieldName());
        if (toSet != null) {
          entry.setField(fe.getFieldName(),toSet);
        }
 else {
          entry.clearField(fe.getFieldName());
        }
        if ((toSet != null) && (toSet.length() > 0)) {
          fe.setBackground(GUIGlobals.validFieldBackground);
        }
 else {
          fe.setBackground(GUIGlobals.validFieldBackground);
        }
        panel.undoManager.addEdit(new UndoableFieldChange(entry,fe.getFieldName(),oldValue,toSet));
        updateSource();
        panel.refreshTable();
        panel.markBaseChanged();
      }
 catch (      IllegalArgumentException ex) {
        JOptionPane.showMessageDialog(frame,"Error: " + ex.getMessage(),Globals.lang("Error setting field"),JOptionPane.ERROR_MESSAGE);
        fe.setBackground(GUIGlobals.invalidFieldBackground);
      }
    }
 else {
      fe.setBackground(GUIGlobals.validFieldBackground);
    }
  }
 else   if (e.getSource() instanceof FieldTextField) {
    FieldTextField fe=(FieldTextField)e.getSource();
    String oldValue=entry.getCiteKey(), newValue=fe.getText();
    if (newValue.equals("")) {
      newValue=null;
    }
    if (((oldValue == null) && (newValue == null)) || ((oldValue != null) && (newValue != null) && oldValue.equals(newValue))) {
      return;
    }
    boolean isDuplicate=panel.database.setCiteKeyForEntry(entry.getId(),newValue);
    if (newValue != null) {
      if (isDuplicate) {
        panel.output(Globals.lang("Warning") + ": " + Globals.lang("duplicate BibTeX key."));
        if (prefs.getBoolean("dialogWarningForDuplicateKey")) {
          CheckBoxMessage jcb=new CheckBoxMessage(Globals.lang("Warning") + ": " + Globals.lang("duplicate BibTeX key."),Globals.lang("Disable this warning dialog"),false);
          JOptionPane.showMessageDialog(frame,jcb,Globals.lang("Warning"),JOptionPane.WARNING_MESSAGE);
          if (jcb.isSelected()) {
            prefs.putBoolean("dialogWarningForDuplicateKey",false);
          }
        }
      }
 else {
        panel.output(Globals.lang("BibTeX key is unique."));
      }
    }
    panel.undoManager.addEdit(new UndoableKeyChange(panel.database,entry.getId(),oldValue,newValue));
    if ((newValue != null) && (newValue.length() > 0)) {
      fe.setBackground(GUIGlobals.validFieldBackground);
    }
 else {
      fe.setBackground(GUIGlobals.validFieldBackground);
    }
    updateSource();
    panel.refreshTable();
    panel.markBaseChanged();
  }
 else   if ((source.isEditable()) && (!source.getText().equals(lastSourceStringAccepted))) {
    boolean accepted=storeSource(true);
    if (accepted) {
    }
  }
}
