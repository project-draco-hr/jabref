{
  ArrayList<BibtexEntry> bibitems=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  BufferedReader in=new BufferedReader(ImportFormatReader.getReaderDefaultEncoding(stream));
  String str;
  while ((str=in.readLine()) != null) {
    if (str.length() < 3) {
      continue;
    }
    if (str.substring(0,6).equals("PMID- ")) {
      sb.append("::").append(str);
    }
 else {
      String beg=str.substring(0,6);
      if (beg.indexOf(" ") > 0) {
        sb.append(" ## ");
        sb.append(str);
      }
 else {
        sb.append("EOLEOL");
        sb.append(str.trim());
      }
    }
  }
  String[] entries=sb.toString().split("::");
  HashMap<String,String> hm=new HashMap<>();
  for (  String entry : entries) {
    String[] fields=entry.split(" ## ");
    if (fields.length == 0) {
      fields=entry.split("\n");
    }
    String Type="";
    String pages="";
    String shortauthor="";
    String fullauthor="";
    hm.clear();
    for (    String field : fields) {
      System.out.println(">>>" + field + "<<<");
      if (field.length() <= 2) {
        continue;
      }
      String beg=field.substring(0,6);
      String value=field.substring(6);
      value=value.trim();
switch (beg) {
case "PT  - ":
        Type="article";
      break;
case "TY  - ":
    if ("CONF".equals(value)) {
      Type="inproceedings";
    }
  break;
case "JO  - ":
hm.put("booktitle",value);
break;
case "FAU - ":
{
String tmpauthor=value.replaceAll("EOLEOL"," and ");
if (!"".equals(fullauthor)) {
fullauthor=fullauthor + " and " + tmpauthor;
}
 else {
fullauthor=tmpauthor;
}
break;
}
case "AU  - ":
{
String tmpauthor=value.replaceAll("EOLEOL"," and ").replaceAll(" ",", ");
if (!"".equals(shortauthor)) {
shortauthor=shortauthor + " and " + tmpauthor;
}
 else {
shortauthor=tmpauthor;
}
break;
}
case "TI  - ":
hm.put("title",value.replaceAll("EOLEOL"," "));
break;
case "TA  - ":
hm.put("journal",value.replaceAll("EOLEOL"," "));
break;
case "AB  - ":
hm.put("abstract",value.replaceAll("EOLEOL"," "));
break;
case "PG  - ":
pages=value.replaceAll("-","--");
break;
case "IP  - ":
hm.put("number",value);
break;
case "DP  - ":
{
String[] parts=value.split(" ");
hm.put("year",parts[0]);
break;
}
case "VI  - ":
hm.put("volume",value);
break;
case "AID - ":
{
String[] parts=value.split(" ");
if ("[doi]".equals(parts[1])) {
hm.put("doi",parts[0]);
hm.put("url","http://dx.doi.org/" + parts[0]);
}
break;
}
}
}
if (!"".equals(pages)) {
hm.put("pages",pages);
}
if (!"".equals(fullauthor)) {
hm.put("author",fullauthor);
}
 else if (!"".equals(shortauthor)) {
hm.put("author",shortauthor);
}
BibtexEntry b=new BibtexEntry(BibtexFields.DEFAULT_BIBTEXENTRY_ID,Globals.getEntryType(Type));
b.setField(hm);
if (hm.get("author") != null || hm.get("title") != null) {
bibitems.add(b);
}
}
return bibitems;
}
