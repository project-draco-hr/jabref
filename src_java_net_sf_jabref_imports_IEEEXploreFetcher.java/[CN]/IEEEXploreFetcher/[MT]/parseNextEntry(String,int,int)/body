{
  String toFind=new StringBuffer().append("<div align=\"left\"><strong>").append(entryNumber).append(".</strong></div>").toString();
  int index=allText.indexOf(toFind,startIndex);
  int endIndex=allText.indexOf("</table>",index + 1);
  if (endIndex < 0)   endIndex=allText.length();
  if (index >= 0) {
    piv=index + 1;
    String text=allText.substring(index,endIndex);
    BibtexEntryType type;
    String sourceField;
    if (text.indexOf("IEEE JNL") >= 0) {
      type=BibtexEntryType.getType("article");
      sourceField="journal";
    }
 else {
      type=BibtexEntryType.getType("inproceedings");
      sourceField="booktitle";
    }
    index=0;
    BibtexEntry entry=new BibtexEntry(Util.createNeutralId(),type);
    Matcher m1=entryPattern1.matcher(text);
    Matcher m2=entryPattern2.matcher(text);
    Matcher m3=entryPattern3.matcher(text);
    Matcher m4=entryPattern4.matcher(text);
    Matcher m;
    String tmp;
    String rest="";
    if (m1.find()) {
      m=m1;
      entry.setField("title",convertHTMLChars(m.group(1)));
      tmp=convertHTMLChars(m.group(2));
      if (tmp.charAt(tmp.length() - 1) == ';')       tmp=tmp.substring(0,tmp.length() - 1);
      entry.setField("author",tmp.replaceAll("; "," and "));
      tmp=m.group(4);
      entry.setField(sourceField,convertHTMLChars(tmp));
      entry.setField("volume",convertHTMLChars(m.group(5)));
      entry.setField("month",convertHTMLChars(m.group(6)));
      entry.setField("year",m.group(7));
    }
 else     if (m2.find()) {
      m=m2;
      entry.setField("title",convertHTMLChars(m.group(1)));
      tmp=convertHTMLChars(m.group(2));
      if (tmp.charAt(tmp.length() - 1) == ';')       tmp=tmp.substring(0,tmp.length() - 1);
      entry.setField("author",tmp.replaceAll("; "," and "));
      tmp=m.group(4);
      entry.setField(sourceField,convertHTMLChars(tmp));
      entry.setField("volume",convertHTMLChars(m.group(5)));
      entry.setField("number",convertHTMLChars(m.group(6)));
      entry.setField("month",convertHTMLChars(m.group(7)));
      entry.setField("year",m.group(8));
    }
 else     if (m3.find()) {
      m=m3;
      entry.setField("title",convertHTMLChars(m.group(1)));
      tmp=convertHTMLChars(m.group(2));
      if (tmp.charAt(tmp.length() - 1) == ';')       tmp=tmp.substring(0,tmp.length() - 1);
      entry.setField("author",tmp.replaceAll("; "," and "));
      tmp=m.group(4);
      entry.setField(sourceField,convertHTMLChars(tmp));
      entry.setField("volume",convertHTMLChars(m.group(5)));
      entry.setField("number",convertHTMLChars(m.group(6)));
      entry.setField("month",convertHTMLChars(m.group(8)));
      entry.setField("year",m.group(9));
    }
 else     if (m4.find()) {
      m=m4;
      entry.setField("title",convertHTMLChars(m.group(1)));
      tmp=convertHTMLChars(m.group(2));
      if (tmp.charAt(tmp.length() - 1) == ';')       tmp=tmp.substring(0,tmp.length() - 1);
      entry.setField("author",tmp.replaceAll("; "," and "));
      tmp=m.group(4);
      entry.setField(sourceField,convertHTMLChars(tmp));
      entry.setField("month",convertHTMLChars(m.group(5)));
      entry.setField("year",m.group(6));
    }
 else {
      System.err.println("---no structure match---");
      System.err.println(text);
      unparseable++;
    }
    int pgInd=text.indexOf("Page(s):");
    if (pgInd >= 0) {
      rest=text.substring(pgInd + 8);
      pgInd=rest.indexOf("<br>");
      if (pgInd >= 0) {
        tmp=rest.substring(0,pgInd);
        entry.setField("pages",tmp.replaceAll("\\s+","").replaceAll("-","--"));
      }
      pgInd=rest.indexOf("Digital Object Identifier ",pgInd);
      if (pgInd >= 0) {
        int fieldEnd=rest.indexOf("<br>",pgInd);
        if (fieldEnd >= 0) {
          entry.setField("doi",rest.substring(pgInd + 26,fieldEnd).trim());
        }
      }
    }
    if (fetchingAbstracts) {
      Matcher abstractLink=abstractLinkPattern.matcher(text);
      if (abstractLink.find()) {
        StringBuffer sb=new StringBuffer(startUrl).append(abstractLink.group(1));
        try {
          String abstractText=fetchAbstract(sb.toString());
          if ((abstractText != null) && (abstractText.length() > 0) && !abstractText.equalsIgnoreCase("not available")) {
            entry.setField("abstract",convertHTMLChars(abstractText));
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    return entry;
  }
  return null;
}
