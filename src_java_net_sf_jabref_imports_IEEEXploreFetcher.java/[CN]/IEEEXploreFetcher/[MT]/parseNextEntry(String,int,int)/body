{
  BibtexEntry entry=null;
  String toFind=new StringBuffer().append("<div align=\"left\"><strong>").append(entryNumber).append(".</strong></div>").toString();
  int index=allText.indexOf(toFind,startIndex);
  int endIndex=allText.indexOf("</table>",index + 1);
  if (endIndex < 0)   endIndex=allText.length();
  if (index >= 0) {
    piv=index + 1;
    String text=allText.substring(index,endIndex);
    BibtexEntryType type=null;
    String sourceField=null;
    if (text.indexOf("JNL") >= 0) {
      type=BibtexEntryType.getType("article");
      sourceField="journal";
    }
 else     if (text.indexOf("CNF") >= 0) {
      type=BibtexEntryType.getType("inproceedings");
      sourceField="booktitle";
    }
 else     if (text.indexOf("STD") >= 0) {
      type=BibtexEntryType.getType("standard");
    }
 else {
      System.err.println("Type detection failed.");
    }
    if (fetchingRIS == true) {
      Matcher number=ieeeArticleNumberPattern.matcher(text);
      if (number.find()) {
        try {
          entry=parseEntryRis(number.group(1),fetchingAbstracts,type.getName() == "Standard");
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (entry != null) {
        int pgInd=text.indexOf("Digital Object Identifier ");
        if (pgInd >= 0) {
          int fieldEnd=text.indexOf("<br>",pgInd);
          if (fieldEnd >= 0) {
            entry.setField("doi",text.substring(pgInd + 26,fieldEnd).trim());
          }
        }
        return cleanup(entry);
      }
    }
    index=0;
    entry=new BibtexEntry(Util.createNeutralId(),type);
    if (type.getName() == "Standard") {
      Matcher mstd=stdEntryPattern.matcher(text);
      if (mstd.find()) {
        entry.setField("title",convertHTMLChars(mstd.group(1)));
        entry.setField("year",convertHTMLChars(mstd.group(2)));
        entry.setField("organization","IEEE");
        return entry;
      }
      System.err.println("Standard entry parsing failed.");
    }
    int pgInd=text.indexOf("Digital Object Identifier ");
    if (pgInd >= 0) {
      int fieldEnd=text.indexOf("<br>",pgInd);
      if (fieldEnd >= 0) {
        entry.setField("doi",text.substring(pgInd + 26,fieldEnd).trim());
      }
      text=text.substring(0,pgInd);
    }
    Matcher m=paperEntryPattern.matcher(text);
    String tmp;
    String rest="";
    if (m.find()) {
      entry.setField("title",convertHTMLChars(m.group(1)));
      tmp=convertHTMLChars(m.group(2));
      if (tmp.charAt(tmp.length() - 1) == ';')       tmp=tmp.substring(0,tmp.length() - 1);
      entry.setField("author",tmp.replaceAll(",;",";").replaceAll("; "," and ").replaceAll(",$",""));
      tmp=m.group(3);
      String fullName=convertHTMLChars(tmp);
      entry.setField(sourceField,fullName);
      String misc=m.group(4);
      for (int i=5; i < 8; i++) {
        tmp=m.group(i);
        if (tmp.startsWith("Page") == false)         misc+=tmp;
 else         break;
      }
      Matcher ms1=volumePattern.matcher(misc);
      if (ms1.find()) {
        entry.setField("volume",convertHTMLChars(ms1.group(1)));
        misc=ms1.group(2);
      }
      Matcher ms2=numberPattern.matcher(misc);
      if (ms2.find()) {
        entry.setField("number",convertHTMLChars(ms2.group(1)));
        misc=ms2.group(2);
      }
      Matcher ms3=partPattern.matcher(misc);
      if (ms3.find()) {
        entry.setField("part",ms3.group(1));
        misc=ms3.group(2);
      }
      Matcher ms4=datePattern.matcher(misc);
      if (ms4.find()) {
        String month=convertHTMLChars(ms4.group(1)).replaceAll("-","--");
        String year=ms4.group(2);
        if (!year.isEmpty()) {
          month=month.replaceAll(year,"");
          entry.setField("year",year);
        }
        entry.setField("month",month.trim());
      }
 else {
        Matcher ms5=datePattern.matcher(fullName);
        if (ms5.find()) {
          entry.setField("year",ms5.group(2));
        }
      }
    }
 else {
      System.err.println("---no structure match---");
      System.err.println(text);
      unparseable++;
    }
    if (entry == null) {
      System.err.println("Parse failed");
      System.err.println(text);
      return null;
    }
    pgInd=text.indexOf("Page(s):");
    if (pgInd >= 0) {
      rest=text.substring(pgInd + 8);
      pgInd=rest.indexOf("<br>");
      if (pgInd >= 0) {
        tmp=rest.substring(0,pgInd);
        pgInd=tmp.indexOf("vol");
        if (pgInd >= 0)         tmp=tmp.substring(0,pgInd);
        pgInd=tmp.indexOf("Vol");
        if (pgInd >= 0)         tmp=tmp.substring(0,pgInd);
        entry.setField("pages",tmp.replaceAll(" - ","--").replaceAll("\\s+",""));
      }
    }
    return cleanup(entry);
  }
  return null;
}
