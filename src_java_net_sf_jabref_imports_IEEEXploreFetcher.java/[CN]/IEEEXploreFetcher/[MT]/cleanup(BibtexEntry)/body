{
  if (entry == null)   return null;
  String title=(String)entry.getField("title");
  if (title != null) {
    title=title.replaceAll("[ ]?img src=[^ ]+ alt=\"([^\"]+)\">[ ]?","\\$$1\\$");
    title=title.replaceAll("/sub /spl infin//","\\$_\\\\infty\\$");
    title=title.replaceAll("/sup /spl infin//","\\$\\^\\\\infty\\$");
    title=title.replaceAll("/[sS]pl ([^/]+)/","\\$\\\\$1\\$");
    if (Globals.prefs.getBoolean("useConvertToEquation")) {
      title=title.replaceAll("/sup ([^/]+)/","\\$\\^\\{$1\\}\\$");
      title=title.replaceAll("/sub ([^/]+)/","\\$_\\{$1\\}\\$");
      title=title.replaceAll("\\(sup\\)([^(]+)\\(/sup\\)","\\$\\^\\{$1\\}\\$");
      title=title.replaceAll("\\(sub\\)([^(]+)\\(/sub\\)","\\_\\{$1\\}\\$");
    }
 else {
      title=title.replaceAll("/sup ([^/]+)/","\\\\textsuperscript\\{$1\\}");
      title=title.replaceAll("/sub ([^/]+)/","\\\\textsubscript\\{$1\\}");
      title=title.replaceAll("\\(sup\\)([^(]+)\\(/sup\\)","\\\\textsuperscript\\{$1\\}");
      title=title.replaceAll("\\(sub\\)([^(]+)\\(/sub\\)","\\\\textsubscript\\{$1\\}");
    }
    title=title.replaceAll("\\\\infin","\\\\infty");
    if (Globals.prefs.getBoolean("useUnitFormatterOnSearch")) {
      title=unitFormatter.format(title);
    }
    if (Globals.prefs.getBoolean("useCaseKeeperOnSearch")) {
      title=caseKeeper.format(title);
    }
    entry.setField("title",title);
  }
  String author=(String)entry.getField("author");
  if (author != null) {
    if (author.indexOf("a href=") >= 0) {
      entry.setField("author","");
    }
 else {
      author=author.replaceAll("\\.",". ");
      author=author.replaceAll("([^;]+),([^;]+),([^;]+)","$1,$3,$2");
      author=author.replaceAll("  "," ");
      author=author.replaceAll("\\. -",".-");
      author=author.replaceAll("; "," and ");
      author=author.replaceAll(" ,",",");
      author=author.replaceAll("  "," ");
      author=author.replaceAll("[ ,;]+$","");
      entry.setField("author",author);
    }
  }
  String month=(String)entry.getField("month");
  if ((month != null) && (month.length() > 0)) {
    month=month.replaceAll("\\.","");
    month=month.toLowerCase();
    Pattern monthPattern=Pattern.compile("(\\d*+)\\s*([a-z]*+)-*(\\d*+)\\s*([a-z]*+)");
    Matcher mm=monthPattern.matcher(month);
    String date=month;
    if (mm.find()) {
      if (mm.group(3).length() == 0) {
        if (mm.group(2).length() > 0) {
          date="#" + mm.group(2).substring(0,3) + "#";
          if (mm.group(1).length() > 0) {
            date+=" " + mm.group(1) + ",";
          }
        }
 else {
          date=mm.group(1) + ",";
        }
      }
 else       if (mm.group(2).length() == 0) {
        if (mm.group(4).length() > 0) {
          date="#" + mm.group(4).substring(0,3) + "# "+ mm.group(1)+ "--"+ mm.group(3)+ ",";
        }
 else         date+=",";
      }
 else {
        date="#" + mm.group(2).substring(0,3) + "# "+ mm.group(1)+ "--#"+ mm.group(4).substring(0,3)+ "# "+ mm.group(3)+ ",";
      }
    }
    entry.setField("month",date);
  }
  String field="pages";
  String pages=entry.getField(field);
  if (pages != null) {
    String[] pageNumbers=pages.split("-");
    if (pageNumbers.length == 2) {
      if (pageNumbers[0].equals(pageNumbers[1])) {
        entry.setField(field,pageNumbers[0]);
      }
 else {
        entry.setField(field,pages.replaceAll("-","--"));
      }
    }
  }
  BibtexEntryType type=entry.getType();
  String sourceField="";
  if (type.getName() == "Article") {
    sourceField="journal";
    entry.clearField("booktitle");
  }
 else   if (type.getName() == "Inproceedings") {
    sourceField="booktitle";
  }
  String fullName=entry.getField(sourceField);
  if (fullName != null) {
    if (type.getName() == "Article") {
      int ind=fullName.indexOf(": Accepted for future publication");
      if (ind > 0) {
        fullName=fullName.substring(0,ind);
        entry.setField("year","to be published");
        entry.clearField("month");
        entry.clearField("pages");
        entry.clearField("number");
      }
      String[] parts=fullName.split("[\\[\\]]");
      fullName=parts[0];
      if (parts.length == 3) {
        fullName+=parts[2];
      }
      if (entry.getField("note") == "Early Access") {
        entry.setField("year","to be published");
        entry.clearField("month");
        entry.clearField("pages");
        entry.clearField("number");
      }
    }
 else {
      fullName=fullName.replace("Conference Proceedings","Proceedings").replace("Proceedings of","Proceedings").replace("Proceedings.","Proceedings");
      fullName=fullName.replaceAll("International","Int.");
      fullName=fullName.replaceAll("Symposium","Symp.");
      fullName=fullName.replaceAll("Conference","Conf.");
      fullName=fullName.replaceAll(" on"," ").replace("  "," ");
    }
    Matcher m1=publicationPattern.matcher(fullName);
    if (m1.find()) {
      String prefix=m1.group(2).trim();
      String postfix=m1.group(1).trim();
      String abrv="";
      String[] parts=prefix.split("\\. ",2);
      if (parts.length == 2) {
        if (parts[0].matches(abrvPattern)) {
          prefix=parts[1];
          abrv=parts[0];
        }
 else {
          prefix=parts[0];
          abrv=parts[1];
        }
      }
      if (prefix.matches(abrvPattern) == false) {
        fullName=prefix + " " + postfix+ " "+ abrv;
        fullName=fullName.trim();
      }
 else {
        fullName=postfix + " " + prefix;
      }
    }
    if (type.getName() == "Article") {
      fullName=fullName.replace(" - ","-");
      fullName=fullName.trim();
      if (Globals.prefs.getBoolean("useIEEEAbrv")) {
        String id=Globals.journalAbbrev.getAbbreviatedName(fullName,false);
        if (id != null)         fullName=id;
      }
    }
    if (type.getName() == "Inproceedings") {
      Matcher m2=proceedingPattern.matcher(fullName);
      if (m2.find()) {
        String prefix=m2.group(2);
        String postfix=m2.group(1).replaceAll("\\.$","");
        if (prefix.matches(abrvPattern) == false) {
          String abrv="";
          String[] parts=postfix.split("\\. ",2);
          if (parts.length == 2) {
            if (parts[0].matches(abrvPattern)) {
              postfix=parts[1];
              abrv=parts[0];
            }
 else {
              postfix=parts[0];
              abrv=parts[1];
            }
          }
          fullName=prefix.trim() + " " + postfix.trim()+ " "+ abrv;
        }
 else {
          fullName=postfix.trim() + " " + prefix.trim();
        }
      }
      fullName=fullName.trim();
      fullName=fullName.replaceAll("^[tT]he ","").replaceAll("^\\d{4} ","").replaceAll("[,.]$","");
      String year=entry.getField("year");
      fullName=fullName.replaceAll(", " + year + "\\.?","");
      if (fullName.contains("Abstract") == false && fullName.contains("Summaries") == false && fullName.contains("Conference Record") == false)       fullName="Proc. " + fullName;
    }
    entry.setField(sourceField,fullName);
  }
  String abstr=(String)entry.getField("abstract");
  if (abstr != null) {
    abstr=abstr.replaceAll("/sub /spl infin//","\\$_\\\\infty\\$");
    abstr=abstr.replaceAll("/sup /spl infin//","\\$\\^\\\\infty\\$");
    abstr=abstr.replaceAll("/[sS]pl ([^/]+)/","\\$\\\\$1\\$");
    if (Globals.prefs.getBoolean("useConvertToEquation")) {
      abstr=abstr.replaceAll("/sup ([^/]+)/","\\$\\^\\{$1\\}\\$");
      abstr=abstr.replaceAll("/sub ([^/]+)/","\\$_\\{$1\\}\\$");
      abstr=abstr.replaceAll("\\(sup\\)([^(]+)\\(/sup\\)","\\$\\^\\{$1\\}\\$");
      abstr=abstr.replaceAll("\\(sub\\)([^(]+)\\(/sub\\)","\\_\\{$1\\}\\$");
    }
 else {
      abstr=abstr.replaceAll("/sup ([^/]+)/","\\\\textsuperscript\\{$1\\}");
      abstr=abstr.replaceAll("/sub ([^/]+)/","\\\\textsubscript\\{$1\\}");
      abstr=abstr.replaceAll("\\(sup\\)([^(]+)\\(/sup\\)","\\\\textsuperscript\\{$1\\}");
      abstr=abstr.replaceAll("\\(sub\\)([^(]+)\\(/sub\\)","\\\\textsubscript\\{$1\\}");
    }
    abstr=abstr.replaceAll("\\\\infin","\\\\infty");
    entry.setField("abstract",abstr);
  }
  String url=(String)entry.getField("url");
  if (url != null) {
    entry.setField("url","http://ieeexplore.ieee.org" + url.replace("tp=&",""));
  }
  return entry;
}
