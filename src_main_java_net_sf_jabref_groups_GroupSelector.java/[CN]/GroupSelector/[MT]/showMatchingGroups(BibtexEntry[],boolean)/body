{
  if (entries == null || entries.length == 0) {
    groupsTree.setHighlight3Cells(null);
    groupsTree.revalidate();
    return;
  }
  Vector<GroupTreeNode> vec=new Vector<>();
  for (Enumeration<GroupTreeNode> e=groupsRoot.preorderEnumeration(); e.hasMoreElements(); ) {
    GroupTreeNode node=e.nextElement();
    AbstractGroup group=node.getGroup();
    int i;
    for (i=0; i < entries.length; ++i) {
      if (requireAll) {
        if (!group.contains(entries[i])) {
          break;
        }
      }
 else {
        if (group.contains(entries[i])) {
          vec.add(node);
        }
      }
    }
    if (requireAll && i >= entries.length) {
      vec.add(node);
    }
  }
  groupsTree.setHighlight3Cells(vec.toArray());
  for (int i=0; i < vec.size(); ++i) {
    GroupTreeNode node=(GroupTreeNode)vec.elementAt(i).getParent();
    if (node != null) {
      groupsTree.expandPath(new TreePath(node.getPath()));
    }
  }
  groupsTree.revalidate();
}
