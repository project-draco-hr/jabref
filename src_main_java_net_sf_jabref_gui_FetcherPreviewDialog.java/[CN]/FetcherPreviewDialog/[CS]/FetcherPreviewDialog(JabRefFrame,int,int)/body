{
  super(frame,Globals.lang("Title"),true);
  this.frame=frame;
  this.warningLimit=warningLimit;
  ok.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (verifySelection()) {
        okPressed=true;
        dispose();
      }
    }
  }
);
  cancel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      okPressed=false;
      dispose();
    }
  }
);
  selectAll.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      setSelectionAll(true);
    }
  }
);
  deselectAll.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      setSelectionAll(false);
    }
  }
);
  EventTableModel<TableEntry> tableModelGl=new EventTableModel<TableEntry>(entries,new EntryTableFormat());
  glTable=new EntryTable(tableModelGl);
  glTable.setRowHeight(tableRowHeight);
  glTable.getColumnModel().getColumn(0).setMaxWidth(45);
  glTable.setPreferredScrollableViewportSize(new Dimension(1100,600));
  EventSelectionModel<TableEntry> selectionModel=new EventSelectionModel<TableEntry>(entries);
  glTable.setSelectionModel(selectionModel);
  ButtonStackBuilder builder=new ButtonStackBuilder();
  builder.addButton(selectAll);
  builder.addButton(deselectAll);
  builder.getPanel().setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  ButtonBarBuilder bb=new ButtonBarBuilder();
  bb.addGlue();
  bb.addButton(ok);
  bb.addButton(cancel);
  bb.addGlue();
  bb.getPanel().setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  JPanel centerPan=new JPanel();
  centerPan.setLayout(new BorderLayout());
  centerPan.add(new JScrollPane(glTable),BorderLayout.CENTER);
  centerPan.add(builder.getPanel(),BorderLayout.WEST);
  getContentPane().add(centerPan,BorderLayout.CENTER);
  getContentPane().add(bb.getPanel(),BorderLayout.SOUTH);
  AbstractAction closeAction=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
;
  ActionMap am=centerPan.getActionMap();
  InputMap im=centerPan.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(Globals.prefs.getKey("Close dialog"),"close");
  am.put("close",closeAction);
  pack();
}
