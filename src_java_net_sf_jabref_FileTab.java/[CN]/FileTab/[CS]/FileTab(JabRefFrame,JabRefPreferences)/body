{
  _prefs=prefs;
  _frame=frame;
  autosaveHelp=new HelpAction(frame.helpDiag,GUIGlobals.autosaveHelp,"Help",GUIGlobals.getIconUrl("helpSmall"));
  openLast=new JCheckBox(Globals.lang("Open last edited databases at startup"));
  backup=new JCheckBox(Globals.lang("Backup old file when saving"));
  saveAuthorOrder=new JRadioButton(Globals.lang("Save ordered by author/editor/year"));
  exportAuthorOrder=new JRadioButton(Globals.lang("Export ordered by author/editor/year"));
  saveOriginalOrder=new JRadioButton(Globals.lang("Save entries in their original order"));
  exportOriginalOrder=new JRadioButton(Globals.lang("Export entries in their original order"));
  saveTableOrder=new JRadioButton(Globals.lang("Save in current table sort order"));
  exportTableOrder=new JRadioButton(Globals.lang("Export in current table sort order"));
  saveTitleOrder=new JRadioButton(Globals.lang("Save entries ordered by title"));
  exportTitleOrder=new JRadioButton(Globals.lang("Export entries ordered by title"));
  autoSave=new JCheckBox(Globals.lang("Autosave"));
  promptBeforeUsingAutoSave=new JCheckBox(Globals.lang("Prompt before recovering a database from an autosave file"));
  autoSaveInterval=new JSpinner(new SpinnerNumberModel(1,1,60,1));
  valueDelimiter=new JComboBox(new String[]{Globals.lang("Quotes") + ": \", \"",Globals.lang("Curly Brackets") + ": {, }"});
  includeEmptyFields=new JCheckBox(Globals.lang("Include empty fields"));
  sameColumn=new JCheckBox(Globals.lang("Start field contents in same column"));
  camelCase=new JCheckBox(Globals.lang("Use camel case for field names (e.g., \"HowPublished\" instead of \"howpublished\")"));
  ButtonGroup bg=new ButtonGroup();
  bg.add(saveAuthorOrder);
  bg.add(saveOriginalOrder);
  bg.add(saveTableOrder);
  bg.add(saveTitleOrder);
  bg=new ButtonGroup();
  bg.add(exportAuthorOrder);
  bg.add(exportOriginalOrder);
  bg.add(exportTableOrder);
  bg.add(exportTitleOrder);
  resolveStringsAll=new JRadioButton(Globals.lang("Resolve strings for all fields except") + ":");
  resolveStringsStandard=new JRadioButton(Globals.lang("Resolve strings for standard BibTeX fields only"));
  bg=new ButtonGroup();
  bg.add(resolveStringsAll);
  bg.add(resolveStringsStandard);
  bracesAroundCapitalsFields=new JTextField(25);
  nonWrappableFields=new JTextField(25);
  doNotResolveStringsFor=new JTextField(30);
  autoDoubleBraces=new JCheckBox(Globals.lang("Remove double braces around BibTeX fields when loading."));
  autoSave.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent changeEvent){
      autoSaveInterval.setEnabled(autoSave.isSelected());
      promptBeforeUsingAutoSave.setEnabled(autoSave.isSelected());
    }
  }
);
  FormLayout layout=new FormLayout("left:pref, 4dlu, fill:pref","");
  DefaultFormBuilder builder=new DefaultFormBuilder(layout);
  builder.appendSeparator(Globals.lang("General"));
  builder.nextLine();
  builder.append(openLast,3);
  builder.nextLine();
  builder.append(backup,3);
  builder.nextLine();
  builder.append(autoDoubleBraces,3);
  builder.nextLine();
  JLabel label=new JLabel(Globals.lang("Store the following fields with braces around capital letters") + ":");
  builder.append(label);
  builder.append(bracesAroundCapitalsFields);
  builder.nextLine();
  label=new JLabel(Globals.lang("Do not wrap the following fields when saving") + ":");
  builder.append(label);
  builder.append(nonWrappableFields);
  builder.nextLine();
  builder.append(resolveStringsStandard,3);
  builder.nextLine();
  builder.append(resolveStringsAll);
  builder.append(doNotResolveStringsFor);
  builder.nextLine();
  builder.appendSeparator(Globals.lang("Autosave"));
  builder.append(autoSave,1);
  JButton hlp=new JButton(autosaveHelp);
  hlp.setText(null);
  hlp.setPreferredSize(new Dimension(24,24));
  JPanel hPan=new JPanel();
  hPan.setLayout(new BorderLayout());
  hPan.add(hlp,BorderLayout.EAST);
  builder.append(hPan);
  builder.nextLine();
  builder.append(Globals.lang("Autosave interval (minutes)") + ":");
  builder.append(autoSaveInterval);
  builder.nextLine();
  builder.append(promptBeforeUsingAutoSave);
  builder.nextLine();
  builder.appendSeparator(Globals.lang("Sort order"));
  builder.append(saveAuthorOrder,1);
  builder.append(exportAuthorOrder,1);
  builder.nextLine();
  builder.append(saveTableOrder,1);
  builder.append(exportTableOrder,1);
  builder.nextLine();
  builder.append(saveOriginalOrder,1);
  builder.append(exportOriginalOrder,1);
  builder.nextLine();
  builder.append(saveTitleOrder,1);
  builder.append(exportTitleOrder,1);
  builder.nextLine();
  builder.appendSeparator(Globals.lang("Field saving options"));
  builder.nextLine();
  builder.append(camelCase);
  builder.nextLine();
  builder.append(sameColumn);
  builder.append(new JPanel());
  builder.nextLine();
  builder.append(includeEmptyFields);
  builder.append(new JPanel());
  builder.nextLine();
  JPanel pan=builder.getPanel();
  pan.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  setLayout(new BorderLayout());
  add(pan,BorderLayout.CENTER);
}
