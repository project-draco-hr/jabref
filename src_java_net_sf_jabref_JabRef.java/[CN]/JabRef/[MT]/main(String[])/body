{
  boolean openGui=true;
  if (args.length > 0)   for (int i=0; i < args.length; i++) {
    if (args[i].startsWith("-o"))     openGui=false;
    if (args[i].equals("-h")) {
      System.out.println("Help info goes here.");
      System.exit(0);
    }
  }
  SplashScreen ss=null;
  if (openGui) {
    ss=new SplashScreen();
    ss.show();
  }
 else   Util.pr("JabRef " + GUIGlobals.version);
  Object fnt=new UIDefaults.ProxyLazyValue("javax.swing.plaf.FontUIResource",null,new Object[]{"Arial",new Integer(Font.PLAIN),new Integer(12)});
  UIManager.put("Button.font",fnt);
  UIManager.put("ToggleButton.font",fnt);
  UIManager.put("RadioButton.font",fnt);
  UIManager.put("CheckBox.font",fnt);
  UIManager.put("ColorChooser.font",fnt);
  UIManager.put("ComboBox.font",fnt);
  UIManager.put("Label.font",fnt);
  UIManager.put("List.font",fnt);
  UIManager.put("MenuBar.font",fnt);
  UIManager.put("MenuItem.font",fnt);
  UIManager.put("RadioButtonMenuItem.font",fnt);
  UIManager.put("CheckBoxMenuItem.font",fnt);
  UIManager.put("Menu.font",fnt);
  UIManager.put("PopupMenu.font",fnt);
  UIManager.put("OptionPane.font",fnt);
  UIManager.put("Panel.font",fnt);
  UIManager.put("ProgressBar.font",fnt);
  UIManager.put("ScrollPane.font",fnt);
  UIManager.put("Viewport.font",fnt);
  UIManager.put("TabbedPane.font",fnt);
  UIManager.put("Table.font",fnt);
  UIManager.put("TableHeader.font",fnt);
  UIManager.put("TextField.font",fnt);
  UIManager.put("PasswordField.font",fnt);
  UIManager.put("TextArea.font",fnt);
  UIManager.put("TextPane.font",fnt);
  UIManager.put("EditorPane.font",fnt);
  UIManager.put("TitledBorder.font",fnt);
  UIManager.put("ToolBar.font",fnt);
  UIManager.put("ToolTip.font",fnt);
  UIManager.put("Tree.font",fnt);
  System.setProperty("apple.laf.useScreenMenuBar","true");
  if (Globals.ON_WIN) {
    try {
      UIManager.setLookAndFeel(new com.sun.java.swing.plaf.windows.WindowsLookAndFeel());
    }
 catch (    UnsupportedLookAndFeelException ex) {
    }
  }
 else   if (!Globals.ON_MAC) {
    try {
      LookAndFeel lnf=new com.incors.plaf.kunststoff.KunststoffLookAndFeel();
      UIManager.setLookAndFeel(lnf);
    }
 catch (    UnsupportedLookAndFeelException ex) {
    }
  }
  JabRefPreferences prefs=new JabRefPreferences();
  BibtexEntryType.loadCustomEntryTypes(prefs);
  Globals.setLanguage(prefs.get("language"),"");
  GUIGlobals.CURRENTFONT=new Font(prefs.get("fontFamily"),prefs.getInt("fontStyle"),prefs.getInt("fontSize"));
  Vector loaded=new Vector();
  if (args.length > 0)   for (int i=0; i < args.length; i++) {
    if (!args[i].startsWith("-")) {
      System.out.println(Globals.lang("Opening") + ": " + args[i]);
      try {
        File file=new File(args[i]);
        ParserResult pr=ImportFormatReader.loadDatabase(file);
        pr.setFile(file);
        loaded.add(pr);
      }
 catch (      IOException ex) {
        System.err.println(Globals.lang("Error opening file") + " '" + args[i]+ "': "+ ex.getMessage());
      }
    }
 else {
      if (args[i].startsWith("-i") && (args[i].length() > 3) && (args.length > i + 1)) {
        try {
          System.out.println(Globals.lang("Importing") + ": " + args[i + 1]);
          BibtexDatabase base=ImportFormatReader.importFile(args[i].substring(3),args[i + 1]);
          ParserResult pr=new ParserResult(base,new HashMap());
          pr.setFile(new File(args[i + 1]));
          loaded.add(pr);
        }
 catch (        IOException ex) {
          System.err.println(Globals.lang("Error opening file") + " '" + args[i + 1]+ "': "+ ex.getMessage());
        }
        i++;
      }
 else       if (args[i].equals("-o") && (args.length > i + 1)) {
        if (loaded.size() > 0) {
          ParserResult pr=(ParserResult)loaded.elementAt(loaded.size() - 1);
          try {
            System.out.println(Globals.lang("Saving") + ": " + args[i + 1]);
            FileActions.saveDatabase(pr.getDatabase(),new MetaData(pr.getMetaData()),new File(args[i + 1]),prefs,false,false);
          }
 catch (          SaveException ex) {
            System.err.println(Globals.lang("Could not save file") + " '" + args[i + 1]+ "': "+ ex.getMessage());
          }
        }
 else         System.err.println(Globals.lang("The -o option must be preceded by an import option."));
        i++;
      }
 else       if (args[i].startsWith("-o") && (args.length > i + 1)) {
        if (loaded.size() > 0) {
          ParserResult pr=(ParserResult)loaded.elementAt(loaded.size() - 1);
          try {
            System.out.println(Globals.lang("Exporting") + ": " + args[i + 1]);
            FileActions.exportDatabase(pr.getDatabase(),args[i].substring(3),new File(args[i + 1]),prefs);
          }
 catch (          IOException ex) {
            System.err.println(Globals.lang("Could not export file") + " '" + args[i + 1]+ "': "+ ex.getMessage());
          }
catch (          NullPointerException ex2) {
            System.err.println(Globals.lang("Unknown export format") + ": " + args[i].substring(3));
          }
        }
 else         System.err.println(Globals.lang("The -o option must be preceded by an import option."));
        i++;
      }
    }
  }
 else {
  }
  if (openGui) {
    JabRefFrame jrf=new JabRefFrame();
    if (loaded.size() > 0)     for (int i=0; i < loaded.size(); i++) {
      ParserResult pr=(ParserResult)loaded.elementAt(i);
      jrf.addTab(pr.getDatabase(),pr.getFile(),pr.getMetaData(),(i == 0));
    }
    ss.dispose();
    jrf.setVisible(true);
  }
 else   System.exit(0);
}
