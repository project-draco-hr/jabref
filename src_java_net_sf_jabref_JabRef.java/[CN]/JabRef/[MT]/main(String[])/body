{
  boolean graphicFailure=false;
  System.runFinalizersOnExit(true);
  JabRefPreferences prefs=JabRefPreferences.getInstance();
  Globals.prefs=prefs;
  BibtexEntryType.loadCustomEntryTypes(prefs);
  Globals.setLanguage(prefs.get("language"),"");
  Options options=new Options("JabRef ");
  options.setVersion(GUIGlobals.version);
  StringOption importFile=new StringOption("");
  importFile.setDescription("imopoepuoeu");
  StringOption exportFile=new StringOption("");
  BooleanOption helpO=new BooleanOption();
  BooleanOption disableGui=new BooleanOption();
  BooleanOption blank=new BooleanOption();
  BooleanOption loadSess=new BooleanOption();
  StringOption exportPrefs=new StringOption("jabref_prefs.xml");
  StringOption importPrefs=new StringOption("jabref_prefs.xml");
  StringOption auxImExport=new StringOption("");
  options.register("nogui",'n',Globals.lang("No GUI. Only process command line options."),disableGui);
  options.register("import",'i',Globals.lang("Import file") + ": " + Globals.lang("filename")+ "[,import format]",importFile);
  options.register("output",'o',Globals.lang("Output or export file") + ": " + Globals.lang("filename")+ "[,export format]",exportFile);
  options.register("help",'h',Globals.lang("Display help on command line options"),helpO);
  options.register("loads",'l',Globals.lang("Load session"),loadSess);
  options.register("prexp",'x',Globals.lang("Export preferences to file"),exportPrefs);
  options.register("primp",'p',Globals.lang("Import preferences from file"),importPrefs);
  options.register("aux",'a',Globals.lang("Subdatabase from aux") + ": " + Globals.lang("file")+ "[.aux]"+ ","+ Globals.lang("new")+ "[.bib]",auxImExport);
  options.register("blank",'b',Globals.lang("Do not open any files at startup"),blank);
  options.setUseMenu(false);
  String[] leftOver=options.process(args);
  if (helpO.isInvoked()) {
    System.out.println("jabref [options] [bibtex-file]\n");
    System.out.println(options.getHelp());
    String importFormats=Globals.importFormatReader.getImportFormatList();
    System.out.println(Globals.lang("Available import formats") + ":\n" + importFormats);
    String outFormats=": bibtexml, docbook, html, simplehtml";
    int length=outFormats.length();
    for (int i=0; i < prefs.customExports.size(); i++) {
      String[] format=prefs.customExports.getElementAt(i);
      if ((length + format[0].length()) > 50) {
        outFormats=outFormats + ",\n\t" + format[0];
        length=format[0].length();
      }
 else {
        outFormats=outFormats + ", " + format[0];
        length+=(1 + format[0].length());
      }
    }
    System.out.println(Globals.lang("Available export formats") + outFormats + ".");
    System.exit(0);
  }
  Frame ss=null;
  if (!disableGui.isInvoked()) {
    try {
      ss=SplashScreen.splash();
    }
 catch (    Throwable ex) {
      graphicFailure=true;
      System.err.println(Globals.lang("Unable to create graphical interface") + ".");
    }
  }
  Vector loaded=new Vector();
  if (!blank.isInvoked() && (leftOver.length > 0)) {
    for (int i=0; i < leftOver.length; i++) {
      ParserResult pr=openBibFile(leftOver[i]);
      if (pr != null)       loaded.add(pr);
    }
  }
  if (!blank.isInvoked() && importFile.isInvoked()) {
    String[] data=importFile.getStringValue().split(",");
    if (data.length == 1) {
      ParserResult pr=openBibFile(data[0]);
      if (pr != null)       loaded.add(pr);
    }
 else     if (data.length == 2) {
      try {
        if (!"*".equals(data[1])) {
          System.out.println(Globals.lang("Importing") + ": " + data[0]);
          List entries=Globals.importFormatReader.importFromFile(data[1],data[0].replaceAll("~",System.getProperty("user.home")));
          BibtexDatabase base=ImportFormatReader.createDatabase(entries);
          ParserResult pr=new ParserResult(base,null,new HashMap());
          loaded.add(pr);
        }
 else {
          System.out.println(Globals.lang("Importing in unknown format") + ": " + data[0]);
          Object[] o=Globals.importFormatReader.importUnknownFormat(data[0].replaceAll("~",System.getProperty("user.home")));
          String formatName=(String)o[0];
          if (formatName.equals(ImportFormatReader.BIBTEX_FORMAT)) {
            ParserResult pr=(ParserResult)o[1];
            loaded.add(pr);
          }
 else {
            List entries=(java.util.List)o[1];
            if (entries != null)             System.out.println(Globals.lang("Format used") + ": " + formatName);
 else             System.out.println(Globals.lang("Could not find a suitable import format."));
            if (entries != null) {
              BibtexDatabase base=ImportFormatReader.createDatabase(entries);
              ParserResult pr=new ParserResult(base,null,new HashMap());
              loaded.add(pr);
            }
          }
        }
      }
 catch (      IOException ex) {
        System.err.println(Globals.lang("Error opening file") + " '" + data[0]+ "': "+ ex.getMessage());
      }
    }
  }
  if (exportFile.isInvoked()) {
    if (loaded.size() > 0) {
      String[] data=exportFile.getStringValue().split(",");
      if (data.length == 1) {
        if (loaded.size() > 0) {
          ParserResult pr=(ParserResult)loaded.elementAt(loaded.size() - 1);
          try {
            System.out.println(Globals.lang("Saving") + ": " + data[0]);
            FileActions.saveDatabase(pr.getDatabase(),new MetaData(pr.getMetaData(),pr.getDatabase()),new File(data[0]),prefs,false,false,prefs.get("defaultEncoding"));
          }
 catch (          SaveException ex) {
            System.err.println(Globals.lang("Could not save file") + " '" + data[0]+ "': "+ ex.getMessage());
          }
        }
 else         System.err.println(Globals.lang("The output option depends on a valid import option."));
      }
 else       if (data.length == 2) {
        ParserResult pr=(ParserResult)loaded.elementAt(loaded.size() - 1);
        boolean foundCustom=false;
        for (int i=0; i < prefs.customExports.size(); i++) {
          String[] format=prefs.customExports.getElementAt(i);
          if (format[0].equals(data[1])) {
            try {
              File lfFile=new File(format[1]);
              String fname=(lfFile.getName().split("\\."))[0];
              FileActions.exportDatabase(pr.getDatabase(),lfFile.getParent() + File.separator,fname,new File(data[0]));
              System.out.println(Globals.lang("Exporting") + ": " + data[0]);
            }
 catch (            Exception ex) {
              System.err.println(Globals.lang("Could not export file") + " '" + data[0]+ "': "+ ex.getMessage());
            }
            foundCustom=true;
            break;
          }
        }
        if (!foundCustom) {
          try {
            System.out.println(Globals.lang("Exporting") + ": " + data[0]);
            FileActions.exportDatabase(pr.getDatabase(),data[1],new File(data[0]));
          }
 catch (          NullPointerException ex2) {
            System.err.println(Globals.lang("Unknown export format") + ": " + data[1]);
          }
catch (          Exception ex) {
            System.err.println(Globals.lang("Could not export file") + " '" + data[0]+ "': "+ ex.getMessage());
          }
        }
      }
    }
 else     System.err.println(Globals.lang("The output option depends on a valid import option."));
  }
  if (exportPrefs.isInvoked()) {
    try {
      prefs.exportPreferences(exportPrefs.getStringValue());
    }
 catch (    IOException ex) {
      Util.pr(ex.getMessage());
    }
  }
  if (importPrefs.isInvoked()) {
    try {
      prefs.importPreferences(importPrefs.getStringValue());
      BibtexEntryType.loadCustomEntryTypes(prefs);
    }
 catch (    IOException ex) {
      Util.pr(ex.getMessage());
    }
  }
  if (!blank.isInvoked() && auxImExport.isInvoked()) {
    boolean usageMsg=false;
    if (loaded.size() > 0) {
      String[] data=auxImExport.getStringValue().split(",");
      if (data.length == 2) {
        ParserResult pr=(ParserResult)loaded.firstElement();
        AuxCommandLine acl=new AuxCommandLine(data[0],pr.getDatabase());
        BibtexDatabase newBase=acl.perform();
        boolean notSavedMsg=false;
        if (newBase != null) {
          if (newBase.getEntryCount() > 0) {
            String subName=Util.getCorrectFileName(data[1],"bib");
            try {
              System.out.println(Globals.lang("Saving") + ": " + subName);
              FileActions.saveDatabase(newBase,new MetaData(),new File(subName),prefs,false,false,prefs.get("defaultEncoding"));
            }
 catch (            SaveException ex) {
              System.err.println(Globals.lang("Could not save file") + " '" + subName+ "': "+ ex.getMessage());
            }
            notSavedMsg=true;
          }
        }
        if (!notSavedMsg)         System.out.println(Globals.lang("no database generated"));
      }
 else       usageMsg=true;
    }
 else     usageMsg=true;
    if (usageMsg) {
      System.out.println(Globals.lang("no base-bibtex-file specified"));
      System.out.println(Globals.lang("usage") + " :");
      System.out.println("jabref --aux infile[.aux],outfile[.bib] base-bibtex-file");
    }
  }
  if (!graphicFailure && !disableGui.isInvoked()) {
    Util.performCompatibilityUpdate();
    System.setProperty("apple.laf.useScreenMenuBar","true");
    if (!Globals.ON_MAC) {
      int fontSizes=prefs.getInt("menuFontSize");
      String defaultLookAndFeel;
      if (Globals.ON_WIN)       defaultLookAndFeel=GUIGlobals.windowsDefaultLookAndFeel;
 else       defaultLookAndFeel=GUIGlobals.linuxDefaultLookAndFeel;
      String lookAndFeel=null;
      if (!prefs.getBoolean("useDefaultLookAndFeel"))       lookAndFeel=prefs.get("lookAndFeel");
 else       lookAndFeel=defaultLookAndFeel;
      LookAndFeel lnf=null;
      Object objLnf=null;
      try {
        if (lookAndFeel != null)         objLnf=Class.forName(lookAndFeel).newInstance();
 else         objLnf=Class.forName(defaultLookAndFeel).newInstance();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        try {
          objLnf=Class.forName(defaultLookAndFeel).newInstance();
        }
 catch (        Exception ex2) {
        }
      }
      if (objLnf != null)       lnf=(LookAndFeel)objLnf;
      if ((lnf != null) && (lnf instanceof Plastic3DLookAndFeel)) {
        Plastic3DLookAndFeel plLnf=(Plastic3DLookAndFeel)lnf;
        plLnf.setFontSizeHints(new FontSizeHints(fontSizes,fontSizes,fontSizes,fontSizes));
      }
 else       if ((lnf != null) && (lnf instanceof ExtWindowsLookAndFeel)) {
        ExtWindowsLookAndFeel plLnf=(ExtWindowsLookAndFeel)lnf;
        plLnf.setFontSizeHints(new FontSizeHints(fontSizes,fontSizes,fontSizes,fontSizes));
      }
      if (lnf != null) {
        try {
          UIManager.setLookAndFeel(lnf);
          if (!Globals.ON_WIN) {
            UIManager.put("SimpleInternalFrame.activeTitleBackground",GUIGlobals.gradientBlue);
          }
        }
 catch (        Throwable ex) {
          ex.printStackTrace();
          System.err.println("Trying to set system default Look&Feel...");
          try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
          }
 catch (          Throwable e) {
            e.printStackTrace();
          }
        }
      }
    }
    if (!blank.isInvoked() && prefs.getBoolean("openLastEdited") && (prefs.get("lastEdited") != null)) {
      String[] names=prefs.getStringArray("lastEdited");
      lastEdLoop:       for (int i=0; i < names.length; i++) {
        File fileToOpen=new File(names[i]);
        for (int j=0; j < loaded.size(); j++) {
          ParserResult pr=(ParserResult)loaded.elementAt(j);
          if ((pr.getFile() != null) && pr.getFile().equals(fileToOpen))           continue lastEdLoop;
        }
        if (fileToOpen.exists()) {
          ParserResult pr=openBibFile(names[i]);
          if (pr != null)           loaded.add(pr);
        }
      }
    }
    GUIGlobals.init();
    GUIGlobals.CURRENTFONT=new Font(prefs.get("fontFamily"),prefs.getInt("fontStyle"),prefs.getInt("fontSize"));
    jrf=new JabRefFrame();
    if (loaded.size() > 0) {
      for (int i=0; i < loaded.size(); i++) {
        ParserResult pr=(ParserResult)loaded.elementAt(i);
        jrf.addTab(pr.getDatabase(),pr.getFile(),pr.getMetaData(),(i == 0));
      }
    }
    if (loadSess.isInvoked())     jrf.loadSessionAction.actionPerformed(new java.awt.event.ActionEvent(jrf,0,""));
    if (ss != null)     ss.dispose();
    jrf.setVisible(true);
    for (int i=0; i < loaded.size(); i++) {
      ParserResult pr=(ParserResult)loaded.elementAt(i);
      if (Globals.prefs.getBoolean("displayKeyWarningDialogAtStartup") && pr.hasWarnings()) {
        String[] wrns=pr.warnings();
        StringBuffer wrn=new StringBuffer();
        for (int j=0; j < wrns.length; j++)         wrn.append((j + 1) + ". " + wrns[j]+ "\n");
        if (wrn.length() > 0)         wrn.deleteCharAt(wrn.length() - 1);
        jrf.showBaseAt(i);
        JOptionPane.showMessageDialog(jrf,wrn.toString(),Globals.lang("Warnings"),JOptionPane.WARNING_MESSAGE);
      }
    }
    if (loaded.size() > 0) {
      jrf.tabbedPane.setSelectedIndex(0);
      new FocusRequester(((BasePanel)jrf.tabbedPane.getComponentAt(0)).entryTable);
    }
  }
 else   System.exit(0);
}
