{
  JabRefPreferences prefs=new JabRefPreferences();
  BibtexEntryType.loadCustomEntryTypes(prefs);
  Globals.setLanguage(prefs.get("language"),"");
  Options options=new Options("JabRef ");
  options.setVersion(GUIGlobals.version);
  StringOption importFile=new StringOption("");
  importFile.setDescription("imopoepuoeu");
  StringOption exportFile=new StringOption("");
  NotifyOption helpO=new NotifyOption("");
  NotifyOption disableGui=new NotifyOption("");
  exportFile.setHelpDescriptionSize(80);
  options.register("nogui",'n',Globals.lang("No GUI. Only process command line options."),disableGui);
  options.register("import",'i',Globals.lang("Imports file: [bibtexml|endnote|isi|ris,]filename"),importFile);
  options.register("output",'o',Globals.lang("Outputs or exports file: [bibtexml|docbook|html|simplehtml,]filename"),exportFile);
  options.register("help",'h',Globals.lang("Displays help on command line options"),helpO);
  options.setUseMenu(false);
  options.process(args);
  if (helpO.isInvoked()) {
    System.out.println(options.getHelp());
    System.exit(0);
  }
  SplashScreen ss=null;
  if (!disableGui.isInvoked()) {
    ss=new SplashScreen();
    ss.show();
  }
  Object fnt=new UIDefaults.ProxyLazyValue("javax.swing.plaf.FontUIResource",null,new Object[]{"Arial",new Integer(Font.PLAIN),new Integer(12)});
  UIManager.put("Button.font",fnt);
  UIManager.put("ToggleButton.font",fnt);
  UIManager.put("RadioButton.font",fnt);
  UIManager.put("CheckBox.font",fnt);
  UIManager.put("ColorChooser.font",fnt);
  UIManager.put("ComboBox.font",fnt);
  UIManager.put("Label.font",fnt);
  UIManager.put("List.font",fnt);
  UIManager.put("MenuBar.font",fnt);
  UIManager.put("MenuItem.font",fnt);
  UIManager.put("RadioButtonMenuItem.font",fnt);
  UIManager.put("CheckBoxMenuItem.font",fnt);
  UIManager.put("Menu.font",fnt);
  UIManager.put("PopupMenu.font",fnt);
  UIManager.put("OptionPane.font",fnt);
  UIManager.put("Panel.font",fnt);
  UIManager.put("ProgressBar.font",fnt);
  UIManager.put("ScrollPane.font",fnt);
  UIManager.put("Viewport.font",fnt);
  UIManager.put("TabbedPane.font",fnt);
  UIManager.put("Table.font",fnt);
  UIManager.put("TableHeader.font",fnt);
  UIManager.put("TextField.font",fnt);
  UIManager.put("PasswordField.font",fnt);
  UIManager.put("TextArea.font",fnt);
  UIManager.put("TextPane.font",fnt);
  UIManager.put("EditorPane.font",fnt);
  UIManager.put("TitledBorder.font",fnt);
  UIManager.put("ToolBar.font",fnt);
  UIManager.put("ToolTip.font",fnt);
  UIManager.put("Tree.font",fnt);
  System.setProperty("apple.laf.useScreenMenuBar","true");
  if (Globals.ON_WIN) {
    try {
      UIManager.setLookAndFeel(new com.sun.java.swing.plaf.windows.WindowsLookAndFeel());
    }
 catch (    UnsupportedLookAndFeelException ex) {
    }
  }
 else   if (!Globals.ON_MAC) {
    try {
      LookAndFeel lnf=new com.incors.plaf.kunststoff.KunststoffLookAndFeel();
      UIManager.setLookAndFeel(lnf);
    }
 catch (    UnsupportedLookAndFeelException ex) {
    }
  }
  GUIGlobals.CURRENTFONT=new Font(prefs.get("fontFamily"),prefs.getInt("fontStyle"),prefs.getInt("fontSize"));
  Vector loaded=new Vector();
  if (importFile.isInvoked()) {
    String[] data=importFile.getStringValue().split(",");
    if (data.length == 1) {
      System.out.println(Globals.lang("Opening") + ": " + data[0]);
      try {
        File file=new File(data[0]);
        ParserResult pr=ImportFormatReader.loadDatabase(file);
        pr.setFile(file);
        loaded.add(pr);
      }
 catch (      IOException ex) {
        System.err.println(Globals.lang("Error opening file") + " '" + data[0]+ "': "+ ex.getMessage());
      }
    }
 else     if (data.length == 2) {
      try {
        System.out.println(Globals.lang("Importing") + ": " + data[0]);
        BibtexDatabase base=ImportFormatReader.importFile(data[1],data[0].replaceAll("~",System.getProperty("user.home")));
        ParserResult pr=new ParserResult(base,new HashMap());
        pr.setFile(new File(data[0]));
        loaded.add(pr);
      }
 catch (      IOException ex) {
        System.err.println(Globals.lang("Error opening file") + " '" + data[0]+ "': "+ ex.getMessage());
      }
    }
  }
  if (exportFile.isInvoked()) {
    if (loaded.size() == 1) {
      String[] data=exportFile.getStringValue().split(",");
      if (data.length == 1) {
        if (loaded.size() > 0) {
          ParserResult pr=(ParserResult)loaded.elementAt(loaded.size() - 1);
          try {
            System.out.println(Globals.lang("Saving") + ": " + data[0]);
            FileActions.saveDatabase(pr.getDatabase(),new MetaData(pr.getMetaData()),new File(data[0]),prefs,false,false);
          }
 catch (          SaveException ex) {
            System.err.println(Globals.lang("Could not save file") + " '" + data[0]+ "': "+ ex.getMessage());
          }
        }
 else         System.err.println(Globals.lang("The output option depends on a valid import option."));
      }
 else       if (data.length == 2) {
        ParserResult pr=(ParserResult)loaded.elementAt(loaded.size() - 1);
        try {
          System.out.println(Globals.lang("Exporting") + ": " + data[0]);
          FileActions.exportDatabase(pr.getDatabase(),data[1],new File(data[0]),prefs);
        }
 catch (        IOException ex) {
          System.err.println(Globals.lang("Could not export file") + " '" + data[0]+ "': "+ ex.getMessage());
        }
catch (        NullPointerException ex2) {
          System.err.println(Globals.lang("Unknown export format") + ": " + data[1]);
        }
      }
    }
 else     System.err.println(Globals.lang("The output option depends on a valid import option."));
  }
  if (!disableGui.isInvoked()) {
    JabRefFrame jrf=new JabRefFrame();
    if (loaded.size() > 0)     for (int i=0; i < loaded.size(); i++) {
      ParserResult pr=(ParserResult)loaded.elementAt(i);
      jrf.addTab(pr.getDatabase(),pr.getFile(),pr.getMetaData(),(i == 0));
    }
    ss.dispose();
    jrf.setVisible(true);
  }
 else   System.exit(0);
}
