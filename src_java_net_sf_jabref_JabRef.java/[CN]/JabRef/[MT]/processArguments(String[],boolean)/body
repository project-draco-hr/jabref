{
  setupOptions();
  String[] leftOver=options.process(args);
  if (initialStartup && showVersion.isInvoked()) {
    options.displayVersion();
    disableGui.setInvoked(true);
  }
  if (initialStartup && helpO.isInvoked()) {
    System.out.println("jabref [options] [bibtex-file]\n");
    System.out.println(options.getHelp());
    String importFormats=Globals.importFormatReader.getImportFormatList();
    System.out.println(Globals.lang("Available import formats") + ":\n" + importFormats);
    String outFormats=ExportFormats.getConsoleExportList(70,20,"\t");
    System.out.println(Globals.lang("Available export formats") + ": " + outFormats+ ".");
    System.exit(0);
  }
  if (initialStartup && !disableGui.isInvoked() && !disableSplash.isInvoked()) {
    try {
      splashScreen=SplashScreen.splash();
    }
 catch (    Throwable ex) {
      graphicFailure=true;
      System.err.println(Globals.lang("Unable to create graphical interface") + ".");
    }
  }
  Vector<ParserResult> loaded=new Vector<ParserResult>();
  Vector<String> toImport=new Vector<String>();
  if (!blank.isInvoked() && (leftOver.length > 0)) {
    for (int i=0; i < leftOver.length; i++) {
      boolean bibExtension=leftOver[i].toLowerCase().endsWith("bib");
      ParserResult pr=null;
      if (bibExtension)       pr=openBibFile(leftOver[i]);
      if ((pr == null) || (pr == ParserResult.INVALID_FORMAT)) {
        if (initialStartup) {
          toImport.add(leftOver[i]);
        }
 else {
          ParserResult res=importToOpenBase(leftOver[i]);
          if (res != null)           loaded.add(res);
        }
      }
 else       loaded.add(pr);
    }
  }
  if (!blank.isInvoked() && importFile.isInvoked()) {
    toImport.add(importFile.getStringValue());
  }
  for (  String filenameString : toImport) {
    ParserResult pr=importFile(filenameString);
    if (pr != null)     loaded.add(pr);
  }
  if (!blank.isInvoked() && importToOpenBase.isInvoked()) {
    ParserResult res=importToOpenBase(importToOpenBase.getStringValue());
    if (res != null)     loaded.add(res);
  }
  if (exportFile.isInvoked()) {
    if (loaded.size() > 0) {
      String[] data=exportFile.getStringValue().split(",");
      if (data.length == 1) {
        if (loaded.size() > 0) {
          ParserResult pr=loaded.elementAt(loaded.size() - 1);
          try {
            System.out.println(Globals.lang("Saving") + ": " + data[0]);
            SaveSession session=FileActions.saveDatabase(pr.getDatabase(),new MetaData(pr.getMetaData(),pr.getDatabase()),new File(data[0]),Globals.prefs,false,false,Globals.prefs.get("defaultEncoding"));
            if (!session.getWriter().couldEncodeAll())             System.err.println(Globals.lang("Warning") + ": " + Globals.lang("The chosen encoding '%0' could not encode the following characters: ",session.getEncoding())+ session.getWriter().getProblemCharacters());
            session.commit();
          }
 catch (          SaveException ex) {
            System.err.println(Globals.lang("Could not save file") + " '" + data[0]+ "': "+ ex.getMessage());
          }
        }
 else         System.err.println(Globals.lang("The output option depends on a valid import option."));
      }
 else       if (data.length == 2) {
        ParserResult pr=loaded.elementAt(loaded.size() - 1);
        MetaData metaData=new MetaData(pr.getMetaData(),pr.getDatabase());
        metaData.setFile(pr.getFile());
        Globals.prefs.fileDirForDatabase=metaData.getFileDirectory(GUIGlobals.FILE_FIELD);
        System.out.println(Globals.lang("Exporting") + ": " + data[0]);
        IExportFormat format=ExportFormats.getExportFormat(data[1]);
        if (format != null) {
          try {
            format.performExport(pr.getDatabase(),new MetaData(pr.getMetaData(),pr.getDatabase()),data[0],pr.getEncoding(),null);
          }
 catch (          Exception ex) {
            System.err.println(Globals.lang("Could not export file") + " '" + data[0]+ "': "+ ex.getMessage());
          }
        }
 else         System.err.println(Globals.lang("Unknown export format") + ": " + data[1]);
      }
    }
 else     System.err.println(Globals.lang("The output option depends on a valid import option."));
  }
  if (exportPrefs.isInvoked()) {
    try {
      Globals.prefs.exportPreferences(exportPrefs.getStringValue());
    }
 catch (    IOException ex) {
      Util.pr(ex.getMessage());
    }
  }
  if (importPrefs.isInvoked()) {
    try {
      Globals.prefs.importPreferences(importPrefs.getStringValue());
      BibtexEntryType.loadCustomEntryTypes(Globals.prefs);
    }
 catch (    IOException ex) {
      Util.pr(ex.getMessage());
    }
  }
  if (!blank.isInvoked() && auxImExport.isInvoked()) {
    boolean usageMsg=false;
    if (loaded.size() > 0) {
      String[] data=auxImExport.getStringValue().split(",");
      if (data.length == 2) {
        ParserResult pr=loaded.firstElement();
        AuxCommandLine acl=new AuxCommandLine(data[0],pr.getDatabase());
        BibtexDatabase newBase=acl.perform();
        boolean notSavedMsg=false;
        if (newBase != null) {
          if (newBase.getEntryCount() > 0) {
            String subName=Util.getCorrectFileName(data[1],"bib");
            try {
              System.out.println(Globals.lang("Saving") + ": " + subName);
              SaveSession session=FileActions.saveDatabase(newBase,new MetaData(),new File(subName),Globals.prefs,false,false,Globals.prefs.get("defaultEncoding"));
              if (!session.getWriter().couldEncodeAll())               System.err.println(Globals.lang("Warning") + ": " + Globals.lang("The chosen encoding '%0' could not encode the following characters: ",session.getEncoding())+ session.getWriter().getProblemCharacters());
              session.commit();
            }
 catch (            SaveException ex) {
              System.err.println(Globals.lang("Could not save file") + " '" + subName+ "': "+ ex.getMessage());
            }
            notSavedMsg=true;
          }
        }
        if (!notSavedMsg)         System.out.println(Globals.lang("no database generated"));
      }
 else       usageMsg=true;
    }
 else     usageMsg=true;
    if (usageMsg) {
      System.out.println(Globals.lang("no base-bibtex-file specified"));
      System.out.println(Globals.lang("usage") + " :");
      System.out.println("jabref --aux infile[.aux],outfile[.bib] base-bibtex-file");
    }
  }
  return loaded;
}
