{
  XParagraphCursor parCursor=UnoRuntime.queryInterface(XParagraphCursor.class,cursor);
  XPropertySet props=UnoRuntime.queryInterface(XPropertySet.class,parCursor);
  try {
    props.setPropertyValue("ParaStyleName",parStyle);
  }
 catch (  com.sun.star.lang.IllegalArgumentException ex) {
    throw new UndefinedParagraphFormatException(parStyle);
  }
  int piv=0;
  int italic=0, bold=0, sup=0, sub=0, mono=0, smallCaps=0;
  Matcher m=OOUtil.htmlTag.matcher(lText);
  while (m.find()) {
    String ss=lText.substring(piv,m.start());
    if (!ss.isEmpty()) {
      OOUtil.insertTextAtCurrentLocation(text,cursor,ss,(bold % 2) > 0,(italic % 2) > 0,mono > 0,smallCaps > 0,sup > 0,sub > 0);
    }
    String tag=m.group();
    if (tag.equals("<b>")) {
      bold++;
    }
 else     if (tag.equals("</b>")) {
      bold--;
    }
 else     if (tag.equals("<i>") || tag.equals("<em>")) {
      italic++;
    }
 else     if (tag.equals("</i>") || tag.equals("</em>")) {
      italic--;
    }
 else     if (tag.equals("</monospace>")) {
      mono=0;
    }
 else     if (tag.equals("<monospace>")) {
      mono=1;
    }
 else     if (tag.equals("</smallcaps>")) {
      smallCaps=0;
    }
 else     if (tag.equals("<smallcaps>")) {
      smallCaps=1;
    }
 else     if (tag.equals("</sup>")) {
      sup=0;
    }
 else     if (tag.equals("<sup>")) {
      sup=1;
    }
 else     if (tag.equals("</sub>")) {
      sub=0;
    }
 else     if (tag.equals("<sub>")) {
      sub=1;
    }
    piv=m.end();
  }
  if (piv < lText.length()) {
    OOUtil.insertTextAtCurrentLocation(text,cursor,lText.substring(piv),(bold % 2) > 0,(italic % 2) > 0,mono > 0,smallCaps > 0,sup > 0,sub > 0);
  }
  cursor.collapseToEnd();
}
