{
  URL url;
  try {
    url=new URL(startUrl + fullCitation);
    String page=getResults(url);
    Thread.sleep(10000);
    Matcher bibtexAddr=bibPattern.matcher(page);
    if (bibtexAddr.find()) {
      URL bibtexUrl=new URL(startUrl + bibtexAddr.group(1));
      BufferedReader in=new BufferedReader(new InputStreamReader(bibtexUrl.openStream()));
      ParserResult result=BibtexParser.parse(in);
      in.close();
      Collection<BibtexEntry> item=result.getDatabase().getEntries();
      BibtexEntry entry=item.iterator().next();
      if (abs == true) {
        Matcher absMatch=absPattern.matcher(page);
        if (absMatch.find()) {
          String absBlock=absMatch.group(1);
          entry.setField("abstract",convertHTMLChars(absBlock).trim());
        }
 else {
          System.out.println("No abstract matched.");
        }
      }
      Thread.sleep(10000);
      return entry;
    }
 else     return null;
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
    return null;
  }
catch (  ConnectException e) {
    e.printStackTrace();
    return null;
  }
catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  InterruptedException e) {
    e.printStackTrace();
    return null;
  }
}
