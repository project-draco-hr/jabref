{
  if (metaData == null) {
    return;
  }
  for (  String key : metaData) {
    StringBuffer sb=new StringBuffer();
    sb.append(Globals.NEWLINE);
    sb.append(Globals.NEWLINE);
    List<String> orderedData=metaData.getData(key);
    sb.append("@comment{").append(MetaData.META_FLAG).append(key).append(":");
    for (int j=0; j < orderedData.size(); j++) {
      sb.append(StringUtil.quote(orderedData.get(j),";",'\\')).append(";");
    }
    sb.append("}");
    out.write(sb.toString());
  }
  GroupTreeNode groupsRoot=metaData.getGroups();
  if ((groupsRoot != null) && (groupsRoot.getChildCount() > 0)) {
    StringBuffer sb=new StringBuffer();
    sb.append(Globals.NEWLINE);
    sb.append(Globals.NEWLINE);
    sb.append("@comment{").append(MetaData.META_FLAG).append("groupsversion:");
    sb.append("" + VersionHandling.CURRENT_VERSION + ";");
    sb.append("}");
    out.write(sb.toString());
    sb=new StringBuffer();
    sb.append(Globals.NEWLINE);
    sb.append(Globals.NEWLINE);
    sb.append("@comment{").append(MetaData.META_FLAG).append("groupstree:");
    sb.append(Globals.NEWLINE);
    StringTokenizer tok=new StringTokenizer(groupsRoot.getTreeAsString(),Globals.NEWLINE);
    while (tok.hasMoreTokens()) {
      StringBuffer s=new StringBuffer(StringUtil.quote(tok.nextToken(),";",'\\') + ";");
      sb.append(s);
      sb.append(Globals.NEWLINE);
    }
    sb.append("}");
    out.write(sb.toString());
  }
}
