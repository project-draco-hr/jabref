{
  database=dBase;
  String key;
  StringBuilder stringBuilder=new StringBuilder();
  try {
    String entryType=entry.getType();
    List<String> typeList=new ArrayList<>(metaData.getBibtexKeyPattern(bibtexKeyPatternPreferences.getKeyPattern()).getValue(entryType));
    if (!typeList.isEmpty()) {
      typeList.remove(0);
    }
    boolean field=false;
    for (    String typeListEntry : typeList) {
      if ("[".equals(typeListEntry)) {
        field=true;
      }
 else       if ("]".equals(typeListEntry)) {
        field=false;
      }
 else       if (field) {
        List<String> parts=parseFieldMarker(typeListEntry);
        String label=makeLabel(entry,parts.get(0),bibtexKeyPatternPreferences.getKeywordDelimiter());
        if (parts.size() > 1) {
          label=applyModifiers(label,parts,1);
        }
        stringBuilder.append(label);
      }
 else {
        stringBuilder.append(typeListEntry);
      }
    }
  }
 catch (  Exception e) {
    LOGGER.warn("Cannot make label",e);
  }
  key=checkLegalKey(stringBuilder.toString(),bibtexKeyPatternPreferences.isEnforceLegalKey());
  String regex=bibtexKeyPatternPreferences.getKeyPatternRegex();
  if ((regex != null) && !regex.trim().isEmpty()) {
    String replacement=bibtexKeyPatternPreferences.getKeyPatternReplacement();
    key=key.replaceAll(regex,replacement);
  }
  String oldKey=entry.getCiteKeyOptional().orElse(null);
  int occurrences=database.getNumberOfKeyOccurrences(key);
  if (Objects.equals(oldKey,key)) {
    occurrences--;
  }
  boolean alwaysAddLetter=bibtexKeyPatternPreferences.isAlwaysAddLetter();
  boolean firstLetterA=bibtexKeyPatternPreferences.isFirstLetterA();
  if (!alwaysAddLetter && (occurrences == 0)) {
    if (!key.equals(oldKey)) {
      if (database.containsEntryWithId(entry.getId())) {
        database.setCiteKeyForEntry(entry,key);
      }
 else {
        entry.setCiteKey(key);
      }
    }
  }
 else {
    int number=0;
    if (!alwaysAddLetter && !firstLetterA) {
      number=1;
    }
    String moddedKey=key + getAddition(number);
    occurrences=database.getNumberOfKeyOccurrences(moddedKey);
    if (Objects.equals(oldKey,moddedKey)) {
      occurrences--;
    }
    while (occurrences > 0) {
      number++;
      moddedKey=key + getAddition(number);
      occurrences=database.getNumberOfKeyOccurrences(moddedKey);
      if (Objects.equals(oldKey,moddedKey)) {
        occurrences--;
      }
    }
    if (!moddedKey.equals(oldKey)) {
      if (database.containsEntryWithId(entry.getId())) {
        database.setCiteKeyForEntry(entry,moddedKey);
      }
 else {
        entry.setCiteKey(moddedKey);
      }
    }
  }
}
