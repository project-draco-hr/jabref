{
  panel=panel_;
  metaData=metaData_;
  boolean multiple=panel.mainTable.getSelectedRowCount() > 1;
  BibtexEntry be=null;
  if (panel.mainTable.getSelectedRowCount() == 1) {
    be=panel.mainTable.getSelected().get(0);
  }
  addPopupMenuListener(this);
  add(new AbstractAction(Localization.lang("Copy"),IconTheme.getImage("copy")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.COPY);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not execute copy",ex);
      }
    }
  }
);
  add(new AbstractAction(Localization.lang("Paste"),IconTheme.getImage("paste")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.PASTE);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not execute paste",ex);
      }
    }
  }
);
  add(new AbstractAction(Localization.lang("Cut"),IconTheme.getImage("cut")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.CUT);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not execute cut",ex);
      }
    }
  }
);
  add(new AbstractAction(Localization.lang("Delete"),IconTheme.getImage("delete")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.DELETE);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not execute delete",ex);
      }
    }
  }
);
  addSeparator();
  add(new AbstractAction(Localization.lang("Export to clipboard")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.EXPORT_TO_CLIPBOARD);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not execute exportToClipboard",ex);
      }
    }
  }
);
  add(new AbstractAction(Localization.lang("Send as email")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.SEND_AS_EMAIL);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not execute sendAsEmail",ex);
      }
    }
  }
);
  addSeparator();
  JMenu markSpecific=JabRefFrame.subMenu("Mark specific color");
  JabRefFrame frame=panel.frame;
  for (int i=0; i < EntryMarker.MAX_MARKING_LEVEL; i++) {
    markSpecific.add(new MarkEntriesAction(frame,i).getMenuItem());
  }
  if (multiple) {
    add(new AbstractAction(Localization.lang("Mark entries"),IconTheme.getImage("markEntries")){
      @Override public void actionPerformed(      ActionEvent e){
        try {
          panel.runCommand(Actions.MARK_ENTRIES);
        }
 catch (        Throwable ex) {
          LOGGER.warn("Could not execute markEntries",ex);
        }
      }
    }
);
    add(markSpecific);
    add(new AbstractAction(Localization.lang("Unmark entries"),IconTheme.getImage("unmarkEntries")){
      @Override public void actionPerformed(      ActionEvent e){
        try {
          panel.runCommand(Actions.UNMARK_ENTRIES);
        }
 catch (        Throwable ex) {
          LOGGER.warn("Could not execute unmarkEntries",ex);
        }
      }
    }
);
    addSeparator();
  }
 else   if (be != null) {
    String marked=be.getField(BibtexFields.MARKED);
    if (marked == null || marked.isEmpty()) {
      add(new AbstractAction(Localization.lang("Mark entry"),IconTheme.getImage("markEntries")){
        @Override public void actionPerformed(        ActionEvent e){
          try {
            panel.runCommand(Actions.MARK_ENTRIES);
          }
 catch (          Throwable ex) {
            LOGGER.warn("Could not execute markEntries",ex);
          }
        }
      }
);
      add(markSpecific);
    }
 else {
      add(markSpecific);
      add(new AbstractAction(Localization.lang("Unmark entry"),IconTheme.getImage("unmarkEntries")){
        @Override public void actionPerformed(        ActionEvent e){
          try {
            panel.runCommand(Actions.UNMARK_ENTRIES);
          }
 catch (          Throwable ex) {
            LOGGER.warn("Could not execute unmarkEntries",ex);
          }
        }
      }
);
    }
    addSeparator();
  }
  if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SPECIALFIELDSENABLED)) {
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_RANKING)) {
      JMenu rankingMenu=new JMenu();
      RightClickMenu.populateSpecialFieldMenu(rankingMenu,Rank.getInstance(),panel.frame);
      add(rankingMenu);
    }
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_RELEVANCE)) {
      add(Relevance.getInstance().getValues().get(0).getMenuAction(panel.frame));
    }
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_QUALITY)) {
      add(Quality.getInstance().getValues().get(0).getMenuAction(panel.frame));
    }
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_PRINTED)) {
      add(Printed.getInstance().getValues().get(0).getMenuAction(panel.frame));
    }
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_PRIORITY)) {
      JMenu priorityMenu=new JMenu();
      RightClickMenu.populateSpecialFieldMenu(priorityMenu,Priority.getInstance(),panel.frame);
      add(priorityMenu);
    }
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_READ)) {
      JMenu readStatusMenu=new JMenu();
      RightClickMenu.populateSpecialFieldMenu(readStatusMenu,ReadStatus.getInstance(),panel.frame);
      add(readStatusMenu);
    }
    addSeparator();
  }
  add(new AbstractAction(Localization.lang("Open folder"),IconTheme.getImage("openFolder")){
{
      if (!isFieldSetForSelectedEntry("file")) {
        this.setEnabled(false);
      }
    }
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.OPEN_FOLDER);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not open folder",ex);
      }
    }
  }
);
  add(new AbstractAction(Localization.lang("Open file"),IconTheme.getImage("openExternalFile")){
{
      if (!isFieldSetForSelectedEntry("file")) {
        this.setEnabled(false);
      }
    }
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.OPEN_EXTERNAL_FILE);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not open external file",ex);
      }
    }
  }
);
  add(new AbstractAction(Localization.lang("Attach file"),IconTheme.getImage("open")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.ADD_FILE_LINK);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not attach file",ex);
      }
    }
  }
);
  add(new AbstractAction(Localization.lang("Open URL or DOI"),IconTheme.getImage("www")){
{
      if (!(isFieldSetForSelectedEntry("url") || isFieldSetForSelectedEntry("doi"))) {
        this.setEnabled(false);
      }
    }
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.OPEN_URL);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not execute open URL",ex);
      }
    }
  }
);
  add(new AbstractAction(Localization.lang("Get BibTeX data from DOI"),IconTheme.getImage("doi")){
{
      if (!(isFieldSetForSelectedEntry("doi"))) {
        this.setEnabled(false);
      }
    }
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.MERGE_DOI);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not merge with DOI data",ex);
      }
    }
  }
);
  add(new AbstractAction(Localization.lang("Copy BibTeX key")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.COPY_KEY);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not copy BibTex key",ex);
      }
    }
  }
);
  add(new AbstractAction(Localization.lang("Copy") + " \\cite{" + Localization.lang("BibTeX key")+ '}'){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.COPY_CITE_KEY);
      }
 catch (      Throwable ex) {
        LOGGER.warn("Could not copy cite key",ex);
      }
    }
  }
);
  addSeparator();
  populateTypeMenu();
  add(typeMenu);
  add(new AbstractAction(Localization.lang("Plain text import")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.PLAIN_TEXT_IMPORT);
      }
 catch (      Throwable ex) {
        LOGGER.debug("Could not import plain text",ex);
      }
    }
  }
);
  add(JabRef.jrf.massSetField);
  add(JabRef.jrf.manageKeywords);
  addSeparator();
  groupAdd=new JMenuItem(new AbstractAction(Localization.lang("Add to group")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.ADD_TO_GROUP);
      }
 catch (      Throwable ex) {
        LOGGER.debug("Could not add to group",ex);
      }
    }
  }
);
  add(groupAdd);
  groupRemove=new JMenuItem(new AbstractAction(Localization.lang("Remove from group")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.REMOVE_FROM_GROUP);
      }
 catch (      Throwable ex) {
        LOGGER.debug("Could not remove from group",ex);
      }
    }
  }
);
  add(groupRemove);
  JMenuItem groupMoveTo=add(new AbstractAction(Localization.lang("Move to group")){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        panel.runCommand(Actions.MOVE_TO_GROUP);
      }
 catch (      Throwable ex) {
        LOGGER.debug("Could not execute move to group",ex);
      }
    }
  }
);
  add(groupMoveTo);
  floatMarked.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Globals.prefs.putBoolean(JabRefPreferences.FLOAT_MARKED_ENTRIES,floatMarked.isSelected());
      panel.mainTable.refreshSorting();
    }
  }
);
}
