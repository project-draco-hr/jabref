{
  panel=panel_;
  metaData=metaData_;
  JMenu typeMenu=ChangeEntryTypeMenu.getChangeEntryTypeMenu(panel);
  boolean multiple=panel.mainTable.getSelectedRowCount() > 1;
  BibEntry be=null;
  if (panel.mainTable.getSelectedRowCount() == 1) {
    be=panel.mainTable.getSelected().get(0);
  }
  addPopupMenuListener(this);
  add(new GeneralAction(Actions.COPY,Localization.lang("Copy"),IconTheme.JabRefIcon.COPY.getSmallIcon()));
  add(new GeneralAction(Actions.PASTE,Localization.lang("Paste"),IconTheme.JabRefIcon.PASTE.getSmallIcon()));
  add(new GeneralAction(Actions.CUT,Localization.lang("Cut"),IconTheme.JabRefIcon.CUT.getSmallIcon()));
  add(new GeneralAction(Actions.DELETE,Localization.lang("Delete"),IconTheme.JabRefIcon.DELETE_ENTRY.getSmallIcon()));
  addSeparator();
  add(new GeneralAction(Actions.COPY_KEY,Localization.lang("Copy BibTeX key")));
  add(new GeneralAction(Actions.COPY_CITE_KEY,Localization.lang("Copy \\cite{BibTeX key}")));
  add(new GeneralAction(Actions.COPY_KEY_AND_TITLE,Localization.lang("Copy BibTeX key and title")));
  add(new GeneralAction(Actions.EXPORT_TO_CLIPBOARD,Localization.lang("Export to clipboard"),IconTheme.JabRefIcon.EXPORT_TO_CLIPBOARD.getSmallIcon()));
  add(new GeneralAction(Actions.SEND_AS_EMAIL,Localization.lang("Send as email"),IconTheme.JabRefIcon.EMAIL.getSmallIcon()));
  addSeparator();
  JMenu markSpecific=JabRefFrame.subMenu("Mark specific color");
  JabRefFrame frame=panel.frame;
  for (int i=0; i < EntryMarker.MAX_MARKING_LEVEL; i++) {
    markSpecific.add(new MarkEntriesAction(frame,i).getMenuItem());
  }
  if (multiple) {
    add(new GeneralAction(Actions.MARK_ENTRIES,Localization.lang("Mark entries"),IconTheme.JabRefIcon.MARK_ENTRIES.getSmallIcon()));
    add(markSpecific);
    add(new GeneralAction(Actions.UNMARK_ENTRIES,Localization.lang("Unmark entries"),IconTheme.JabRefIcon.UNMARK_ENTRIES.getSmallIcon()));
    addSeparator();
  }
 else   if (be != null) {
    String marked=be.getField(BibtexFields.MARKED);
    if ((marked == null) || marked.isEmpty()) {
      add(new GeneralAction(Actions.MARK_ENTRIES,Localization.lang("Mark entry"),IconTheme.JabRefIcon.MARK_ENTRIES.getSmallIcon()));
      add(markSpecific);
    }
 else {
      add(markSpecific);
      add(new GeneralAction(Actions.UNMARK_ENTRIES,Localization.lang("Unmark entry"),IconTheme.JabRefIcon.UNMARK_ENTRIES.getSmallIcon()));
    }
    addSeparator();
  }
  if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SPECIALFIELDSENABLED)) {
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_RANKING)) {
      JMenu rankingMenu=new JMenu();
      RightClickMenu.populateSpecialFieldMenu(rankingMenu,Rank.getInstance(),panel.frame);
      add(rankingMenu);
    }
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_RELEVANCE)) {
      add(Relevance.getInstance().getValues().get(0).getMenuAction(panel.frame));
    }
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_QUALITY)) {
      add(Quality.getInstance().getValues().get(0).getMenuAction(panel.frame));
    }
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_PRINTED)) {
      add(Printed.getInstance().getValues().get(0).getMenuAction(panel.frame));
    }
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_PRIORITY)) {
      JMenu priorityMenu=new JMenu();
      RightClickMenu.populateSpecialFieldMenu(priorityMenu,Priority.getInstance(),panel.frame);
      add(priorityMenu);
    }
    if (Globals.prefs.getBoolean(SpecialFieldsUtils.PREF_SHOWCOLUMN_READ)) {
      JMenu readStatusMenu=new JMenu();
      RightClickMenu.populateSpecialFieldMenu(readStatusMenu,ReadStatus.getInstance(),panel.frame);
      add(readStatusMenu);
    }
    addSeparator();
  }
  add(new GeneralAction(Actions.OPEN_FOLDER,Localization.lang("Open folder")){
{
      if (!isFieldSetForSelectedEntry("file")) {
        this.setEnabled(false);
      }
    }
  }
);
  add(new GeneralAction(Actions.OPEN_EXTERNAL_FILE,Localization.lang("Open file"),getFileIconForSelectedEntry()){
{
      if (!isFieldSetForSelectedEntry("file")) {
        this.setEnabled(false);
      }
    }
  }
);
  add(new GeneralAction(Actions.ADD_FILE_LINK,Localization.lang("Attach file"),IconTheme.JabRefIcon.ATTACH_FILE.getSmallIcon()));
  add(new GeneralAction(Actions.OPEN_URL,Localization.lang("Open URL or DOI"),IconTheme.JabRefIcon.WWW.getSmallIcon()){
{
      if (!(isFieldSetForSelectedEntry("url") || isFieldSetForSelectedEntry("doi"))) {
        this.setEnabled(false);
      }
    }
  }
);
  add(new GeneralAction(Actions.MERGE_DOI,Localization.lang("Get BibTeX data from DOI")){
{
      if (!(isFieldSetForSelectedEntry("doi"))) {
        this.setEnabled(false);
      }
    }
  }
);
  addSeparator();
  add(typeMenu);
  add(new GeneralAction(Actions.PLAIN_TEXT_IMPORT,Localization.lang("Plain text import")));
  add(JabRef.jrf.massSetField);
  add(JabRef.jrf.manageKeywords);
  addSeparator();
  groupAdd=new JMenuItem(new GeneralAction(Actions.ADD_TO_GROUP,Localization.lang("Add to group")));
  add(groupAdd);
  groupRemove=new JMenuItem(new GeneralAction(Actions.REMOVE_FROM_GROUP,Localization.lang("Remove from group")));
  add(groupRemove);
  JMenuItem groupMoveTo=add(new GeneralAction(Actions.MOVE_TO_GROUP,Localization.lang("Move to group")));
  add(groupMoveTo);
  floatMarked.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Globals.prefs.putBoolean(JabRefPreferences.FLOAT_MARKED_ENTRIES,floatMarked.isSelected());
      panel.mainTable.refreshSorting();
    }
  }
);
  frame.createDisabledIconsForMenuEntries(this);
}
