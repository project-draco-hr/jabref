{
  super(owner,Globals.lang("External changes"),true);
  this.root=root;
  tree=new JTree(root);
  tree.addTreeSelectionListener(this);
  JSplitPane pane=new JSplitPane();
  pane.setLeftComponent(new JScrollPane(tree));
  pane.setRightComponent(infoBorder);
  cb.setMargin(new Insets(2,2,2,2));
  cb.setEnabled(false);
  infoPanel.setLayout(new BorderLayout());
  infoBorder.setLayout(new BorderLayout());
  infoBorder.setBorder(BorderFactory.createEtchedBorder());
  infoBorder.add(infoPanel,BorderLayout.CENTER);
  setInfo(rootInfo);
  infoPanel.add(cb,BorderLayout.SOUTH);
  buttonPanel.add(ok);
  buttonPanel.add(cancel);
  getContentPane().add(pane,BorderLayout.CENTER);
  getContentPane().add(buttonPanel,BorderLayout.SOUTH);
  cb.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (selected != null)       selected.setAccepted(cb.isSelected());
    }
  }
);
  cancel.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
);
  ok.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      NamedCompound ce=new NamedCompound(Globals.lang("Merged external changes"));
      Enumeration enum=root.children();
      for (; enum.hasMoreElements(); ) {
        Change c=(Change)enum.nextElement();
        if (c.isAcceptable() && c.isAccepted())         c.makeChange(panel,ce);
      }
      ce.end();
      panel.undoManager.addEdit(ce);
      panel.markBaseChanged();
      panel.refreshTable();
      panel.updateViewToSelected();
      panel.setUpdatedExternally(false);
      dispose();
    }
  }
);
  pack();
}
