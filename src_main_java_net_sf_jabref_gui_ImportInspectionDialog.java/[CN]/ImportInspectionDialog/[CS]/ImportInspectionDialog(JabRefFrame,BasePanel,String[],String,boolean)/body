{
  this.frame=frame;
  this.panel=panel;
  this.metaData=(panel != null) ? panel.metaData() : new MetaData();
  this.fields=fields;
  this.undoName=undoName;
  this.newDatabase=newDatabase;
  preview=new PreviewPanel(null,metaData,Globals.prefs.get(JabRefPreferences.PREVIEW_0));
  duplLabel.setToolTipText(Globals.lang("Possible duplicate of existing entry. Click to resolve."));
  sortedList=new SortedList<BibtexEntry>(entries);
  EventTableModel<BibtexEntry> tableModelGl=new EventTableModel<BibtexEntry>(sortedList,new EntryTableFormat());
  glTable=new EntryTable(tableModelGl);
  GeneralRenderer renderer=new GeneralRenderer(Color.white);
  glTable.setDefaultRenderer(JLabel.class,renderer);
  glTable.setDefaultRenderer(String.class,renderer);
  glTable.getInputMap().put(Globals.prefs.getKey("Delete"),"delete");
  DeleteListener deleteListener=new DeleteListener();
  glTable.getActionMap().put("delete",deleteListener);
  selectionModel=new EventSelectionModel<BibtexEntry>(sortedList);
  glTable.setSelectionModel(selectionModel);
  selectionModel.getSelected().addListEventListener(new EntrySelectionListener());
  comparatorChooser=TableComparatorChooser.install(glTable,sortedList,AbstractTableComparatorChooser.MULTIPLE_COLUMN_KEYBOARD);
  setupComparatorChooser();
  glTable.addMouseListener(new TableClickListener());
  setWidths();
  getContentPane().setLayout(new BorderLayout());
  progressBar.setIndeterminate(true);
  JPanel centerPan=new JPanel();
  centerPan.setLayout(new BorderLayout());
  contentPane.setTopComponent(new JScrollPane(glTable));
  contentPane.setBottomComponent(preview);
  centerPan.add(contentPane,BorderLayout.CENTER);
  centerPan.add(progressBar,BorderLayout.SOUTH);
  popup.add(deleteListener);
  popup.addSeparator();
  if (!newDatabase) {
    GroupTreeNode node=metaData.getGroups();
    JMenu groupsAdd=new JMenu(Globals.lang("Add to group"));
    groupsAdd.setEnabled(false);
    insertNodes(groupsAdd,node);
    popup.add(groupsAdd);
  }
  popup.add(new LinkLocalFile());
  popup.add(new DownloadFile());
  popup.add(new AutoSetLinks());
  popup.add(new AttachUrl());
  getContentPane().add(centerPan,BorderLayout.CENTER);
  ButtonBarBuilder bb=new ButtonBarBuilder();
  bb.addGlue();
  bb.addButton(ok);
  bb.addButton(stop);
  JButton cancel=new JButton(Globals.lang("Cancel"));
  bb.addButton(cancel);
  bb.addRelatedGap();
  JButton help=new JButton(Globals.lang("Help"));
  bb.addButton(help);
  bb.addGlue();
  bb.getPanel().setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
  ButtonStackBuilder builder=new ButtonStackBuilder();
  JButton selectAll=new JButton(Globals.lang("Select all"));
  builder.addButton(selectAll);
  JButton deselectAll=new JButton(Globals.lang("Deselect all"));
  builder.addButton(deselectAll);
  builder.addButton(deselectAllDuplicates);
  builder.addRelatedGap();
  JButton delete=new JButton(Globals.lang("Delete"));
  builder.addButton(delete);
  builder.addRelatedGap();
  builder.addFixed(autoGenerate);
  builder.addButton(generate);
  builder.getPanel().setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
  centerPan.add(builder.getPanel(),BorderLayout.WEST);
  ok.setEnabled(false);
  generate.setEnabled(false);
  ok.addActionListener(new OkListener());
  cancel.addActionListener(new CancelListener());
  generate.addActionListener(new GenerateListener());
  stop.addActionListener(new StopListener());
  selectAll.addActionListener(new SelectionButton(true));
  deselectAll.addActionListener(new SelectionButton(false));
  deselectAllDuplicates.addActionListener(new DeselectDuplicatesButtonListener());
  deselectAllDuplicates.setEnabled(false);
  delete.addActionListener(deleteListener);
  help.addActionListener(new HelpAction(frame.helpDiag,GUIGlobals.importInspectionHelp));
  getContentPane().add(bb.getPanel(),BorderLayout.SOUTH);
  setSize(new Dimension(Globals.prefs.getInt(JabRefPreferences.IMPORT_INSPECTION_DIALOG_WIDTH),Globals.prefs.getInt(JabRefPreferences.IMPORT_INSPECTION_DIALOG_HEIGHT)));
  addWindowListener(new WindowAdapter(){
    @Override public void windowOpened(    WindowEvent e){
      contentPane.setDividerLocation(0.5f);
    }
    @Override public void windowClosed(    WindowEvent e){
      Globals.prefs.putInt(JabRefPreferences.IMPORT_INSPECTION_DIALOG_WIDTH,getSize().width);
      Globals.prefs.putInt(JabRefPreferences.IMPORT_INSPECTION_DIALOG_HEIGHT,getSize().height);
    }
  }
);
  AbstractAction closeAction=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
;
  ActionMap am=contentPane.getActionMap();
  InputMap im=contentPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(Globals.prefs.getKey("Close dialog"),"close");
  am.put("close",closeAction);
}
