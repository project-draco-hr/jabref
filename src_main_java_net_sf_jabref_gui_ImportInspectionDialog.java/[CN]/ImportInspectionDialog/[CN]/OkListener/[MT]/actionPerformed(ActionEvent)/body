{
  if (Globals.prefs.getBoolean(JabRefPreferences.WARN_ABOUT_DUPLICATES_IN_INSPECTION)) {
    for (    BibtexEntry entry : entries) {
      if (!entry.isSearchHit()) {
        continue;
      }
      if (entry.isGroupHit()) {
        CheckBoxMessage cbm=new CheckBoxMessage(Localization.lang("There are possible duplicates (marked with a 'D' icon) that haven't been resolved. Continue?"),Localization.lang("Disable this confirmation dialog"),false);
        int answer=JOptionPane.showConfirmDialog(ImportInspectionDialog.this,cbm,Localization.lang("Duplicates found"),JOptionPane.YES_NO_OPTION);
        if (cbm.isSelected()) {
          Globals.prefs.putBoolean(JabRefPreferences.WARN_ABOUT_DUPLICATES_IN_INSPECTION,false);
        }
        if (answer == JOptionPane.NO_OPTION) {
          return;
        }
        break;
      }
    }
  }
  NamedCompound ce=new NamedCompound(undoName);
  if (!entriesToDelete.isEmpty()) {
    for (    BibtexEntry entry : entriesToDelete) {
      ce.addEdit(new UndoableRemoveEntry(panel.database(),entry,panel));
      panel.database().removeEntry(entry.getId());
    }
  }
  if (autoGenerate.isSelected() && !generatedKeys) {
    generateKeys();
  }
  Globals.prefs.putBoolean(JabRefPreferences.GENERATE_KEYS_AFTER_INSPECTION,autoGenerate.isSelected());
  final List<BibtexEntry> selected=getSelectedEntries();
  if (!selected.isEmpty()) {
    if (newDatabase) {
      BibtexDatabase base=new BibtexDatabase();
      panel=new BasePanel(frame,base,null,new MetaData(),Charset.forName(Globals.prefs.get(JabRefPreferences.DEFAULT_ENCODING)));
    }
    boolean groupingCanceled=false;
    net.sf.jabref.util.Util.setAutomaticFields(selected,Globals.prefs.getBoolean(JabRefPreferences.OVERWRITE_OWNER),Globals.prefs.getBoolean(JabRefPreferences.OVERWRITE_TIME_STAMP),Globals.prefs.getBoolean(JabRefPreferences.MARK_IMPORTED_ENTRIES));
    if (Globals.prefs.getBoolean(JabRefPreferences.UNMARK_ALL_ENTRIES_BEFORE_IMPORTING)) {
      for (      BibtexEntry entry : panel.database().getEntries()) {
        EntryMarker.unmarkEntry(entry,true,panel.database(),ce);
      }
    }
    for (    BibtexEntry entry : selected) {
      entry.setSearchHit(false);
      entry.setGroupHit(false);
      Set<GroupTreeNode> groups=groupAdditions.get(entry);
      if (!groupingCanceled && (groups != null)) {
        if (entry.getCiteKey() == null) {
          int answer=JOptionPane.showConfirmDialog(ImportInspectionDialog.this,Localization.lang("Cannot add entries to group without generating keys. Generate keys now?"),Localization.lang("Add to group"),JOptionPane.YES_NO_OPTION);
          if (answer == JOptionPane.YES_OPTION) {
            generateKeys();
          }
 else {
            groupingCanceled=true;
          }
        }
        if (entry.getCiteKey() != null) {
          for (          GroupTreeNode node : groups) {
            if (node.getGroup().supportsAdd()) {
              AbstractUndoableEdit undo=node.getGroup().add(new BibtexEntry[]{entry});
              if (undo instanceof UndoableChangeAssignment) {
                ((UndoableChangeAssignment)undo).setEditedNode(node);
              }
              ce.addEdit(undo);
            }
 else {
            }
          }
        }
      }
      entry.setId(IdGenerator.next());
      panel.database().insertEntry(entry);
      ce.addEdit(new UndoableInsertEntry(panel.database(),entry,panel));
    }
    ce.end();
    panel.undoManager.addEdit(ce);
  }
  dispose();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (newDatabase) {
        frame.addTab(panel,null,true);
      }
      panel.markBaseChanged();
      if (!selected.isEmpty()) {
        frame.output(Localization.lang("Number of entries successfully imported") + ": " + selected.size());
      }
 else {
        frame.output(Localization.lang("No entries imported."));
      }
    }
  }
);
}
