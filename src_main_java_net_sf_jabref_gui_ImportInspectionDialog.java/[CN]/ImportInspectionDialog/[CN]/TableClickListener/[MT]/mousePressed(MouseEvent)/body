{
  if (e.isPopupTrigger()) {
    showPopup(e);
    return;
  }
  final int col=glTable.columnAtPoint(e.getPoint());
  final int row=glTable.rowAtPoint(e.getPoint());
  if ((col == DUPL_COL) && (glTable.getValueAt(row,col) != null)) {
    BibEntry first=sortedList.get(row);
    Optional<BibEntry> other=DuplicateCheck.containsDuplicate(panel.getDatabase(),first,panel.getBibDatabaseContext().getMode());
    if (other.isPresent()) {
      DuplicateResolverDialog diag=new DuplicateResolverDialog(ImportInspectionDialog.this,other.get(),first,DuplicateResolverDialog.DuplicateResolverType.INSPECTION);
      diag.setLocationRelativeTo(ImportInspectionDialog.this);
      diag.setVisible(true);
      ImportInspectionDialog.this.toFront();
      if (diag.getSelected() == DuplicateResolverResult.KEEP_UPPER) {
        entriesToDelete.add(other.get());
        entries.getReadWriteLock().writeLock().lock();
        first.setGroupHit(false);
        entries.getReadWriteLock().writeLock().unlock();
      }
 else       if (diag.getSelected() == DuplicateResolverResult.KEEP_LOWER) {
        entries.getReadWriteLock().writeLock().lock();
        entries.remove(first);
        entries.getReadWriteLock().writeLock().unlock();
      }
 else       if (diag.getSelected() == DuplicateResolverResult.KEEP_BOTH) {
        entries.getReadWriteLock().writeLock().lock();
        first.setGroupHit(false);
        entries.getReadWriteLock().writeLock().unlock();
      }
 else       if (diag.getSelected() == DuplicateResolverResult.KEEP_MERGE) {
        entriesToDelete.add(other.get());
        entries.getReadWriteLock().writeLock().lock();
        diag.getMergedEntry().setGroupHit(false);
        diag.getMergedEntry().setSearchHit(true);
        entries.add(diag.getMergedEntry());
        entries.remove(first);
        first=new BibEntry();
        entries.getReadWriteLock().writeLock().unlock();
      }
    }
    other=internalDuplicate(entries,first);
    if (other.isPresent()) {
      DuplicateResolverDialog diag=new DuplicateResolverDialog(ImportInspectionDialog.this,first,other.get(),DuplicateResolverDialog.DuplicateResolverType.DUPLICATE_SEARCH);
      diag.setLocationRelativeTo(ImportInspectionDialog.this);
      diag.setVisible(true);
      ImportInspectionDialog.this.toFront();
      DuplicateResolverResult answer=diag.getSelected();
      if (answer == DuplicateResolverResult.KEEP_UPPER) {
        entries.remove(other.get());
        first.setGroupHit(false);
      }
 else       if (answer == DuplicateResolverResult.KEEP_LOWER) {
        entries.remove(first);
      }
 else       if (answer == DuplicateResolverResult.KEEP_BOTH) {
        first.setGroupHit(false);
      }
 else       if (answer == DuplicateResolverResult.KEEP_MERGE) {
        diag.getMergedEntry().setGroupHit(false);
        diag.getMergedEntry().setSearchHit(true);
        entries.add(diag.getMergedEntry());
        entries.remove(first);
        entries.remove(other.get());
      }
    }
  }
}
