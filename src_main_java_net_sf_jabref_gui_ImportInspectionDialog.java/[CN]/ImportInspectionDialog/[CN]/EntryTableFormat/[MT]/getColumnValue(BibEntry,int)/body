{
  if (i == 0) {
    return entry.isSearchHit() ? Boolean.TRUE : Boolean.FALSE;
  }
 else   if (i < PAD) {
    Object o;
switch (i) {
case DUPL_COL:
      return entry.isGroupHit() ? duplLabel : null;
case FILE_COL:
    o=entry.getField(Globals.FILE_FIELD);
  if (o == null) {
    return null;
  }
 else {
    FileListTableModel model=new FileListTableModel();
    model.setContent((String)o);
    fileLabel.setToolTipText(model.getToolTipHTMLRepresentation());
    if (model.getRowCount() > 0) {
      fileLabel.setIcon(model.getEntry(0).getType().getIcon());
    }
    return fileLabel;
  }
case URL_COL:
o=entry.getField(URL_FIELD);
if (o == null) {
return null;
}
 else {
urlLabel.setToolTipText((String)o);
return urlLabel;
}
default :
return null;
}
}
 else {
String field=fields[i - PAD];
if ("author".equals(field) || "editor".equals(field)) {
String contents=entry.getField(field);
return (contents == null) ? "" : AuthorList.fixAuthor_Natbib(contents);
}
 else {
return entry.getField(field);
}
}
}
