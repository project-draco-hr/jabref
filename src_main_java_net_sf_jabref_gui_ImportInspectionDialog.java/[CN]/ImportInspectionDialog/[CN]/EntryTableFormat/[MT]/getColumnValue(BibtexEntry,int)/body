{
  if (i == 0) {
    return entry.isSearchHit() ? Boolean.TRUE : Boolean.FALSE;
  }
 else   if (i < PAD) {
    Object o;
switch (i) {
case DUPL_COL:
      return entry.isGroupHit() ? duplLabel : null;
case FILE_COL:
    o=entry.getField(Globals.FILE_FIELD);
  if (o != null) {
    FileListTableModel model=new FileListTableModel();
    model.setContent((String)o);
    fileLabel.setToolTipText(model.getToolTipHTMLRepresentation());
    if (model.getRowCount() > 0) {
      fileLabel.setIcon(model.getEntry(0).getType().getIcon());
    }
    return fileLabel;
  }
 else {
    return null;
  }
case PDF_COL:
o=entry.getField("pdf");
if (o != null) {
pdfLabel.setToolTipText((String)o);
return pdfLabel;
}
 else {
return null;
}
case PS_COL:
o=entry.getField("ps");
if (o != null) {
psLabel.setToolTipText((String)o);
return psLabel;
}
 else {
return null;
}
case URL_COL:
o=entry.getField("url");
if (o != null) {
urlLabel.setToolTipText((String)o);
return urlLabel;
}
 else {
return null;
}
default :
return null;
}
}
 else {
String field=fields[i - PAD];
if (field.equals("author") || field.equals("editor")) {
String contents=entry.getField(field);
return (contents != null) ? AuthorList.fixAuthor_Natbib(contents) : "";
}
 else {
return entry.getField(field);
}
}
}
