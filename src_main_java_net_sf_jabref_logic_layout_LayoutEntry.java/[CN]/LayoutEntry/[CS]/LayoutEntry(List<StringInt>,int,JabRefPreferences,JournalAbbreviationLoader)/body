{
  this.repositoryLoader=repositoryLoader;
  this.prefs=prefs;
  List<LayoutEntry> tmpEntries=new ArrayList<>();
  String blockStart=parsedEntries.get(0).s;
  String blockEnd=parsedEntries.get(parsedEntries.size() - 1).s;
  if (!blockStart.equals(blockEnd)) {
    LOGGER.warn("Field start and end entry must be equal.");
  }
  type=layoutType;
  text=blockEnd;
  List<StringInt> blockEntries=null;
  for (  StringInt parsedEntry : parsedEntries.subList(1,parsedEntries.size() - 1)) {
switch (parsedEntry.i) {
case LayoutHelper.IS_FIELD_START:
case LayoutHelper.IS_GROUP_START:
      blockEntries=new ArrayList<>();
    blockStart=parsedEntry.s;
  break;
case LayoutHelper.IS_FIELD_END:
case LayoutHelper.IS_GROUP_END:
if (blockStart.equals(parsedEntry.s)) {
  blockEntries.add(parsedEntry);
  int groupType=parsedEntry.i == LayoutHelper.IS_GROUP_END ? LayoutHelper.IS_GROUP_START : LayoutHelper.IS_FIELD_START;
  LayoutEntry le=new LayoutEntry(blockEntries,groupType,prefs,repositoryLoader);
  tmpEntries.add(le);
  blockEntries=null;
}
 else {
  LOGGER.warn("Nested field entries are not implemented!");
}
break;
case LayoutHelper.IS_LAYOUT_TEXT:
case LayoutHelper.IS_SIMPLE_FIELD:
case LayoutHelper.IS_OPTION_FIELD:
default :
break;
}
if (blockEntries == null) {
tmpEntries.add(new LayoutEntry(parsedEntry,prefs,repositoryLoader));
}
 else {
blockEntries.add(parsedEntry);
}
}
layoutEntries=new ArrayList<>(tmpEntries);
for (LayoutEntry layoutEntry : layoutEntries) {
invalidFormatter.addAll(layoutEntry.getInvalidFormatters());
}
}
