{
  if (inField.isEmpty()) {
    return "";
  }
  int i;
  String field=AMP_LATEX.matcher(inField).replaceAll("&amp;");
  field=P_LATEX.matcher(field).replaceAll("<p>");
  field=DOLLAR_LATEX.matcher(field).replaceAll("&dollar;");
  field=DOLLARS_LATEX.matcher(field).replaceAll("\\{$1\\}");
  StringBuilder sb=new StringBuilder();
  StringBuilder currentCommand=null;
  char c;
  boolean escaped=false;
  boolean incommand=false;
  for (i=0; i < field.length(); i++) {
    c=field.charAt(i);
    if (escaped && (c == '\\')) {
      sb.append('\\');
      escaped=false;
    }
 else     if (c == '\\') {
      if (incommand) {
        String command=currentCommand.toString();
        String result=CHARS.get(command);
        if (result == null) {
          sb.append(command);
        }
 else {
          sb.append(result);
        }
      }
      escaped=true;
      incommand=true;
      currentCommand=new StringBuilder();
    }
 else     if (!incommand && ((c == '{') || (c == '}'))) {
    }
 else     if (Character.isLetter(c) || (c == '%') || StringUtil.SPECIAL_COMMAND_CHARS.contains(String.valueOf(c))) {
      escaped=false;
      if (!incommand) {
        sb.append(c);
      }
 else {
        currentCommand.append(c);
        if ((currentCommand.length() == 1) && StringUtil.SPECIAL_COMMAND_CHARS.contains(currentCommand.toString()) && !(i >= (field.length() - 1))) {
          String command=currentCommand.toString();
          i++;
          c=field.charAt(i);
          String commandBody;
          if (c == '{') {
            String part=StringUtil.getPart(field,i,false);
            i+=part.length();
            commandBody=part;
          }
 else {
            commandBody=field.substring(i,i + 1);
          }
          String result=CHARS.get(command + commandBody);
          if (result == null) {
            if (commandBody.length() <= 1) {
              String accent=ACCENTS.get(command);
              if (accent == null) {
                sb.append(commandBody);
              }
 else {
                sb.append(commandBody).append(accent);
              }
            }
          }
 else {
            sb.append(result);
          }
          incommand=false;
          escaped=false;
        }
 else {
          if ((i + 1) == field.length()) {
            String command=currentCommand.toString();
            String result=CHARS.get(command);
            if (result == null) {
              sb.append(command);
            }
 else {
              sb.append(result);
            }
          }
        }
      }
    }
 else {
      if (!incommand) {
        sb.append(c);
      }
 else       if (Character.isWhitespace(c) || (c == '{') || (c == '}')) {
        String command=currentCommand.toString();
        if (c == '{') {
          String argument=StringUtil.getPart(field,i,true);
          i+=argument.length();
          String result=CHARS.get(command + argument);
          if (result == null) {
            if (argument.length() <= 1) {
              String accent=ACCENTS.get(command);
              if (accent == null) {
                if (argument.isEmpty()) {
                  sb.append(command);
                }
 else {
                  sb.append(argument);
                }
              }
 else {
                sb.append(argument).append(accent);
              }
            }
 else {
              sb.append(argument);
            }
          }
 else {
            sb.append(result);
          }
        }
 else         if (c == '}') {
          String result=CHARS.get(command);
          if (result == null) {
            sb.append(command);
          }
 else {
            sb.append(result);
          }
        }
 else {
          String result=CHARS.get(command);
          if (result == null) {
            sb.append(command);
          }
 else {
            sb.append(result);
          }
          sb.append(' ');
        }
      }
 else {
      }
      incommand=false;
      escaped=false;
    }
  }
  String result=AMP.matcher(sb.toString()).replaceAll("&");
  result=P.matcher(result).replaceAll("\n");
  result=DOLLAR.matcher(result).replaceAll("\\$");
  result=TILDE.matcher(result).replaceAll("\u00A0");
  return result;
}
