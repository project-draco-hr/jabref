{
  super(p0);
  panel=panel_;
  ok.setToolTipText(Globals.lang("Fetch Medline"));
  setLayout(gbl);
  con.fill=GridBagConstraints.BOTH;
  con.insets=new Insets(0,0,2,0);
  con.gridwidth=GridBagConstraints.REMAINDER;
  con.weightx=1;
  con.weighty=1;
  gbl.setConstraints(header,con);
  add(header);
  con.gridwidth=1;
  con.insets=new Insets(0,0,0,0);
  con.fill=GridBagConstraints.HORIZONTAL;
  gbl.setConstraints(tf,con);
  add(tf);
  con.weightx=0;
  gbl.setConstraints(ok,con);
  ActionListener listener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String idList=tf.getText().replace(';',',');
      if (idList == null || idList.trim().equals(""))       return;
      Pattern p=Pattern.compile("\\d+[,\\d+]*");
      Matcher m=p.matcher(idList);
      if (m.matches()) {
        panel.output(Globals.lang("Fetching Medline..."));
        ArrayList bibs=fetchMedline(idList);
        if (bibs.size() > 0) {
          tf.setText("");
          NamedCompound ce=new NamedCompound(Globals.lang("Fetch Medline"));
          Iterator i=bibs.iterator();
          while (i.hasNext()) {
            try {
              BibtexEntry be=(BibtexEntry)i.next();
              panel.database.insertEntry(be);
              ce.addEdit(new UndoableInsertEntry(panel.database,be,panel));
            }
 catch (            KeyCollisionException ex) {
            }
          }
          ce.end();
          panel.output(Globals.lang("Medline entries fetched:") + " " + bibs.size());
          panel.undoManager.addEdit(ce);
          panel.markBaseChanged();
          panel.refreshTable();
        }
 else         panel.output(Globals.lang("No Medline entries found."));
      }
 else {
        JOptionPane.showMessageDialog(panel.frame,"Sorry, I was expecting a semicolon or comma separated list of Medline IDs (numbers)!","Input Error",JOptionPane.ERROR_MESSAGE);
      }
    }
  }
;
  ok.addActionListener(listener);
  tf.addActionListener(listener);
}
