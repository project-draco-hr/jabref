{
  String bracketBefore=getStringCitProperty(BRACKET_BEFORE);
  if (inList && (citProperties.get(BRACKET_BEFORE_IN_LIST) != null)) {
    bracketBefore=getStringCitProperty(BRACKET_BEFORE_IN_LIST);
  }
  String bracketAfter=getStringCitProperty(BRACKET_AFTER);
  if (inList && (citProperties.get(BRACKET_AFTER_IN_LIST) != null)) {
    bracketAfter=getStringCitProperty(BRACKET_AFTER_IN_LIST);
  }
  List<Integer> lNum=new ArrayList<>(number);
  Collections.sort(lNum);
  StringBuilder sb=new StringBuilder(bracketBefore);
  int combineFrom=-1;
  int written=0;
  for (int i=0; i < lNum.size(); i++) {
    int i1=lNum.get(i);
    if (combineFrom < 0) {
      if ((i < (lNum.size() - 1)) && (lNum.get(i + 1) == (i1 + 1)) && (i1 > 0)) {
        combineFrom=i1;
      }
 else {
        if (i > 0) {
          sb.append(getStringCitProperty(CITATION_SEPARATOR));
        }
        sb.append(lNum.get(i) > 0 ? String.valueOf(lNum.get(i)) : OOBibStyle.UNDEFINED_CITATION_MARKER);
        written++;
      }
    }
 else {
      if ((i == (lNum.size() - 1)) || (lNum.get(i + 1) != (i1 + 1))) {
        if (written > 0) {
          sb.append(getStringCitProperty(CITATION_SEPARATOR));
        }
        if ((minGroupingCount > 0) && (((i1 + 1) - combineFrom) >= minGroupingCount)) {
          sb.append(combineFrom);
          sb.append(getStringCitProperty(GROUPED_NUMBERS_SEPARATOR));
          sb.append(i1);
          written++;
        }
 else {
          for (int jj=combineFrom; jj <= i1; jj++) {
            sb.append(jj);
            if (jj < i1) {
              sb.append(getStringCitProperty(CITATION_SEPARATOR));
            }
            written++;
          }
        }
        combineFrom=-1;
      }
    }
  }
  sb.append(bracketAfter);
  return sb.toString();
}
