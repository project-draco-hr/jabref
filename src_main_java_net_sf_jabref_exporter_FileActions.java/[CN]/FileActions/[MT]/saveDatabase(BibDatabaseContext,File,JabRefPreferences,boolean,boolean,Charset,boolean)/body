{
  boolean backup=prefs.getBoolean(JabRefPreferences.BACKUP);
  if (suppressBackup) {
    backup=false;
  }
  SaveSession session;
  BibEntry exceptionCause=null;
  try {
    session=new SaveSession(target,encoding,backup);
  }
 catch (  Throwable e) {
    if (encoding != null) {
      LOGGER.error("Error from encoding: '" + encoding.displayName(),e);
    }
    throw new SaveException(e.getMessage(),e.getLocalizedMessage());
  }
  Map<String,EntryType> types=new TreeMap<>();
  try (VerifyingWriter writer=session.getWriter()){
    FileActions.writeBibFileHeader(writer,encoding);
    FileActions.writePreamble(writer,bibDatabaseContext.getDatabase().getPreamble());
    FileActions.writeStrings(writer,bibDatabaseContext.getDatabase());
    List<BibEntry> sorter=FileActions.getSortedEntries(bibDatabaseContext.getDatabase(),bibDatabaseContext.getMetaData(),null,true);
    sorter=FileActions.applySaveActions(sorter,bibDatabaseContext.getMetaData());
    BibEntryWriter bibtexEntryWriter=new BibEntryWriter(new LatexFieldFormatter(),true);
    for (    BibEntry entry : sorter) {
      exceptionCause=entry;
      EntryType entryType=EntryTypes.getType(entry.getType(),bibDatabaseContext.getMode());
      if (EntryTypes.getStandardType(entryType.getName(),bibDatabaseContext.getMode()) == null) {
        types.put(entryType.getName(),entryType);
      }
      boolean write=true;
      if (checkSearch && !FileActions.nonZeroField(entry,InternalBibtexFields.SEARCH)) {
        write=false;
      }
      if (checkGroup && !FileActions.nonZeroField(entry,InternalBibtexFields.GROUPSEARCH)) {
        write=false;
      }
      if (write) {
        bibtexEntryWriter.write(entry,writer,bibDatabaseContext.getMode());
      }
    }
    if (bibDatabaseContext.getMetaData() != null) {
      bibDatabaseContext.getMetaData().writeMetaData(writer);
    }
    if (!types.isEmpty()) {
      for (      Map.Entry<String,EntryType> stringBibtexEntryTypeEntry : types.entrySet()) {
        EntryType type=stringBibtexEntryTypeEntry.getValue();
        if (type instanceof CustomEntryType) {
          CustomEntryType tp=(CustomEntryType)type;
          CustomEntryTypesManager.save(tp,writer);
        }
      }
    }
    if ((bibDatabaseContext.getDatabase().getEpilog() != null) && !(bibDatabaseContext.getDatabase().getEpilog().isEmpty())) {
      writer.write(bibDatabaseContext.getDatabase().getEpilog());
    }
 else {
      writer.write(Globals.NEWLINE);
    }
  }
 catch (  IOException ex) {
    LOGGER.error("Could not write file",ex);
    session.cancel();
    throw new SaveException(ex.getMessage(),ex.getLocalizedMessage(),exceptionCause);
  }
  return session;
}
