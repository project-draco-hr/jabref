{
  program_return retval=new program_return();
  retval.start=input.LT(1);
  Object root_0=null;
  commands_return commands1=null;
  List list_commands=new ArrayList();
  try {
{
      int cnt1=0;
      loop1:       do {
        int alt1=2;
        int LA1_0=input.LA(1);
        if ((LA1_0 == ENTRY || (LA1_0 >= STRINGS && LA1_0 <= MACRO) || (LA1_0 >= READ && LA1_0 <= SORT))) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            pushFollow(FOLLOW_commands_in_program45);
            commands1=commands();
            _fsp--;
            list_commands.add(commands1.tree);
          }
        break;
default :
      if (cnt1 >= 1)       break loop1;
    EarlyExitException eee=new EarlyExitException(1,input);
  throw eee;
}
cnt1++;
}
 while (true);
int i_0=0;
retval.tree=root_0;
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(COMMANDS,"COMMANDS"),root_1);
{
  int n_1=list_commands == null ? 0 : list_commands.size();
  if (n_1 == 0)   throw new RuntimeException("Must have more than one element for (...)+ loops");
  for (int i_1=0; i_1 < n_1; i_1++) {
    adaptor.addChild(root_1,list_commands.get(i_1));
  }
}
adaptor.addChild(root_0,root_1);
}
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
return retval;
}
