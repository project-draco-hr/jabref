{
  idList0_return retval=new idList0_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal39=null;
  Token char_literal41=null;
  identifier_return identifier40=null;
  List list_identifier=new ArrayList();
  List list_26=new ArrayList();
  List list_25=new ArrayList();
  Object char_literal39_tree=null;
  Object char_literal41_tree=null;
  try {
{
      char_literal39=(Token)input.LT(1);
      match(input,25,FOLLOW_25_in_idList0230);
      list_25.add(char_literal39);
      loop4:       do {
        int alt4=2;
        int LA4_0=input.LA(1);
        if ((LA4_0 == IDENTIFIER)) {
          alt4=1;
        }
switch (alt4) {
case 1:
{
            pushFollow(FOLLOW_identifier_in_idList0232);
            identifier40=identifier();
            _fsp--;
            list_identifier.add(identifier40.tree);
          }
        break;
default :
      break loop4;
  }
}
 while (true);
char_literal41=(Token)input.LT(1);
match(input,26,FOLLOW_26_in_idList0235);
list_26.add(char_literal41);
int i_0=0;
retval.tree=root_0;
root_0=(Object)adaptor.nil();
{
{
    Object root_1=(Object)adaptor.nil();
    root_1=(Object)adaptor.becomeRoot(adaptor.create(IDLIST,"IDLIST"),root_1);
{
      int n_1=list_identifier == null ? 0 : list_identifier.size();
      for (int i_1=0; i_1 < n_1; i_1++) {
        adaptor.addChild(root_1,list_identifier.get(i_1));
      }
    }
    adaptor.addChild(root_0,root_1);
  }
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
return retval;
}
