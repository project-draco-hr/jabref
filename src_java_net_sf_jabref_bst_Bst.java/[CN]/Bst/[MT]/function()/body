{
  function_return retval=new function_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal42=null;
  Token char_literal43=null;
  Token char_literal44=null;
  Token char_literal45=null;
  Token char_literal46=null;
  Token string_literal47=null;
  Token char_literal48=null;
  Token string_literal49=null;
  Token string_literal50=null;
  Token string_literal51=null;
  Token string_literal52=null;
  Token string_literal53=null;
  Token string_literal54=null;
  Token string_literal55=null;
  Token string_literal56=null;
  Token string_literal57=null;
  Token string_literal58=null;
  Token string_literal59=null;
  Token string_literal60=null;
  Token string_literal61=null;
  Token string_literal62=null;
  Token string_literal63=null;
  Token string_literal64=null;
  Token string_literal65=null;
  Token string_literal66=null;
  Token string_literal67=null;
  Token string_literal68=null;
  Token string_literal69=null;
  Token string_literal70=null;
  Token string_literal71=null;
  Token string_literal72=null;
  Token string_literal73=null;
  Token string_literal74=null;
  Token string_literal75=null;
  Token string_literal76=null;
  Token string_literal77=null;
  Token string_literal78=null;
  identifier_return identifier79=null;
  Object char_literal42_tree=null;
  Object char_literal43_tree=null;
  Object char_literal44_tree=null;
  Object char_literal45_tree=null;
  Object char_literal46_tree=null;
  Object string_literal47_tree=null;
  Object char_literal48_tree=null;
  Object string_literal49_tree=null;
  Object string_literal50_tree=null;
  Object string_literal51_tree=null;
  Object string_literal52_tree=null;
  Object string_literal53_tree=null;
  Object string_literal54_tree=null;
  Object string_literal55_tree=null;
  Object string_literal56_tree=null;
  Object string_literal57_tree=null;
  Object string_literal58_tree=null;
  Object string_literal59_tree=null;
  Object string_literal60_tree=null;
  Object string_literal61_tree=null;
  Object string_literal62_tree=null;
  Object string_literal63_tree=null;
  Object string_literal64_tree=null;
  Object string_literal65_tree=null;
  Object string_literal66_tree=null;
  Object string_literal67_tree=null;
  Object string_literal68_tree=null;
  Object string_literal69_tree=null;
  Object string_literal70_tree=null;
  Object string_literal71_tree=null;
  Object string_literal72_tree=null;
  Object string_literal73_tree=null;
  Object string_literal74_tree=null;
  Object string_literal75_tree=null;
  Object string_literal76_tree=null;
  Object string_literal77_tree=null;
  Object string_literal78_tree=null;
  try {
    int alt5=38;
switch (input.LA(1)) {
case 27:
      alt5=1;
    break;
case 28:
  alt5=2;
break;
case 29:
alt5=3;
break;
case 30:
alt5=4;
break;
case 31:
alt5=5;
break;
case 32:
alt5=6;
break;
case 33:
alt5=7;
break;
case 34:
alt5=8;
break;
case 35:
alt5=9;
break;
case 36:
alt5=10;
break;
case 37:
alt5=11;
break;
case 38:
alt5=12;
break;
case 39:
alt5=13;
break;
case 40:
alt5=14;
break;
case 41:
alt5=15;
break;
case 42:
alt5=16;
break;
case 43:
alt5=17;
break;
case 44:
alt5=18;
break;
case 45:
alt5=19;
break;
case 46:
alt5=20;
break;
case 47:
alt5=21;
break;
case 48:
alt5=22;
break;
case 49:
alt5=23;
break;
case 50:
alt5=24;
break;
case 51:
alt5=25;
break;
case 52:
alt5=26;
break;
case 53:
alt5=27;
break;
case 54:
alt5=28;
break;
case 55:
alt5=29;
break;
case 56:
alt5=30;
break;
case 57:
alt5=31;
break;
case 58:
alt5=32;
break;
case 59:
alt5=33;
break;
case 60:
alt5=34;
break;
case 61:
alt5=35;
break;
case 62:
alt5=36;
break;
case 63:
alt5=37;
break;
case IDENTIFIER:
alt5=38;
break;
default :
NoViableAltException nvae=new NoViableAltException("40:1: function : ( '<' | '>' | '=' | '+' | '-' | ':=' | '*' | 'add.period$' | 'call.type$' | 'change.case$' | 'chr.to.int$' | 'cite$' | 'duplicat$' | 'empty$' | 'format.name$' | 'if$' | 'int.to.chr$' | 'int.to.str$' | 'missing$' | 'newline$' | 'num.names$' | 'pop$' | 'preamble$' | 'purify$' | 'quote$' | 'skip$' | 'stack$' | 'substring$' | 'swap$' | 'text.length$' | 'text.prefix$' | 'top$' | 'type$' | 'warning$' | 'while$' | 'width$' | 'write$' | identifier );",5,0,input);
throw nvae;
}
switch (alt5) {
case 1:
{
root_0=(Object)adaptor.nil();
char_literal42=(Token)input.LT(1);
match(input,27,FOLLOW_27_in_function254);
char_literal42_tree=(Object)adaptor.create(char_literal42);
adaptor.addChild(root_0,char_literal42_tree);
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
char_literal43=(Token)input.LT(1);
match(input,28,FOLLOW_28_in_function258);
char_literal43_tree=(Object)adaptor.create(char_literal43);
adaptor.addChild(root_0,char_literal43_tree);
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
char_literal44=(Token)input.LT(1);
match(input,29,FOLLOW_29_in_function262);
char_literal44_tree=(Object)adaptor.create(char_literal44);
adaptor.addChild(root_0,char_literal44_tree);
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
char_literal45=(Token)input.LT(1);
match(input,30,FOLLOW_30_in_function266);
char_literal45_tree=(Object)adaptor.create(char_literal45);
adaptor.addChild(root_0,char_literal45_tree);
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
char_literal46=(Token)input.LT(1);
match(input,31,FOLLOW_31_in_function270);
char_literal46_tree=(Object)adaptor.create(char_literal46);
adaptor.addChild(root_0,char_literal46_tree);
}
break;
case 6:
{
root_0=(Object)adaptor.nil();
string_literal47=(Token)input.LT(1);
match(input,32,FOLLOW_32_in_function274);
string_literal47_tree=(Object)adaptor.create(string_literal47);
adaptor.addChild(root_0,string_literal47_tree);
}
break;
case 7:
{
root_0=(Object)adaptor.nil();
char_literal48=(Token)input.LT(1);
match(input,33,FOLLOW_33_in_function278);
char_literal48_tree=(Object)adaptor.create(char_literal48);
adaptor.addChild(root_0,char_literal48_tree);
}
break;
case 8:
{
root_0=(Object)adaptor.nil();
string_literal49=(Token)input.LT(1);
match(input,34,FOLLOW_34_in_function282);
string_literal49_tree=(Object)adaptor.create(string_literal49);
adaptor.addChild(root_0,string_literal49_tree);
}
break;
case 9:
{
root_0=(Object)adaptor.nil();
string_literal50=(Token)input.LT(1);
match(input,35,FOLLOW_35_in_function286);
string_literal50_tree=(Object)adaptor.create(string_literal50);
adaptor.addChild(root_0,string_literal50_tree);
}
break;
case 10:
{
root_0=(Object)adaptor.nil();
string_literal51=(Token)input.LT(1);
match(input,36,FOLLOW_36_in_function290);
string_literal51_tree=(Object)adaptor.create(string_literal51);
adaptor.addChild(root_0,string_literal51_tree);
}
break;
case 11:
{
root_0=(Object)adaptor.nil();
string_literal52=(Token)input.LT(1);
match(input,37,FOLLOW_37_in_function294);
string_literal52_tree=(Object)adaptor.create(string_literal52);
adaptor.addChild(root_0,string_literal52_tree);
}
break;
case 12:
{
root_0=(Object)adaptor.nil();
string_literal53=(Token)input.LT(1);
match(input,38,FOLLOW_38_in_function299);
string_literal53_tree=(Object)adaptor.create(string_literal53);
adaptor.addChild(root_0,string_literal53_tree);
}
break;
case 13:
{
root_0=(Object)adaptor.nil();
string_literal54=(Token)input.LT(1);
match(input,39,FOLLOW_39_in_function303);
string_literal54_tree=(Object)adaptor.create(string_literal54);
adaptor.addChild(root_0,string_literal54_tree);
}
break;
case 14:
{
root_0=(Object)adaptor.nil();
string_literal55=(Token)input.LT(1);
match(input,40,FOLLOW_40_in_function307);
string_literal55_tree=(Object)adaptor.create(string_literal55);
adaptor.addChild(root_0,string_literal55_tree);
}
break;
case 15:
{
root_0=(Object)adaptor.nil();
string_literal56=(Token)input.LT(1);
match(input,41,FOLLOW_41_in_function311);
string_literal56_tree=(Object)adaptor.create(string_literal56);
adaptor.addChild(root_0,string_literal56_tree);
}
break;
case 16:
{
root_0=(Object)adaptor.nil();
string_literal57=(Token)input.LT(1);
match(input,42,FOLLOW_42_in_function315);
string_literal57_tree=(Object)adaptor.create(string_literal57);
adaptor.addChild(root_0,string_literal57_tree);
}
break;
case 17:
{
root_0=(Object)adaptor.nil();
string_literal58=(Token)input.LT(1);
match(input,43,FOLLOW_43_in_function319);
string_literal58_tree=(Object)adaptor.create(string_literal58);
adaptor.addChild(root_0,string_literal58_tree);
}
break;
case 18:
{
root_0=(Object)adaptor.nil();
string_literal59=(Token)input.LT(1);
match(input,44,FOLLOW_44_in_function323);
string_literal59_tree=(Object)adaptor.create(string_literal59);
adaptor.addChild(root_0,string_literal59_tree);
}
break;
case 19:
{
root_0=(Object)adaptor.nil();
string_literal60=(Token)input.LT(1);
match(input,45,FOLLOW_45_in_function327);
string_literal60_tree=(Object)adaptor.create(string_literal60);
adaptor.addChild(root_0,string_literal60_tree);
}
break;
case 20:
{
root_0=(Object)adaptor.nil();
string_literal61=(Token)input.LT(1);
match(input,46,FOLLOW_46_in_function332);
string_literal61_tree=(Object)adaptor.create(string_literal61);
adaptor.addChild(root_0,string_literal61_tree);
}
break;
case 21:
{
root_0=(Object)adaptor.nil();
string_literal62=(Token)input.LT(1);
match(input,47,FOLLOW_47_in_function336);
string_literal62_tree=(Object)adaptor.create(string_literal62);
adaptor.addChild(root_0,string_literal62_tree);
}
break;
case 22:
{
root_0=(Object)adaptor.nil();
string_literal63=(Token)input.LT(1);
match(input,48,FOLLOW_48_in_function340);
string_literal63_tree=(Object)adaptor.create(string_literal63);
adaptor.addChild(root_0,string_literal63_tree);
}
break;
case 23:
{
root_0=(Object)adaptor.nil();
string_literal64=(Token)input.LT(1);
match(input,49,FOLLOW_49_in_function344);
string_literal64_tree=(Object)adaptor.create(string_literal64);
adaptor.addChild(root_0,string_literal64_tree);
}
break;
case 24:
{
root_0=(Object)adaptor.nil();
string_literal65=(Token)input.LT(1);
match(input,50,FOLLOW_50_in_function348);
string_literal65_tree=(Object)adaptor.create(string_literal65);
adaptor.addChild(root_0,string_literal65_tree);
}
break;
case 25:
{
root_0=(Object)adaptor.nil();
string_literal66=(Token)input.LT(1);
match(input,51,FOLLOW_51_in_function352);
string_literal66_tree=(Object)adaptor.create(string_literal66);
adaptor.addChild(root_0,string_literal66_tree);
}
break;
case 26:
{
root_0=(Object)adaptor.nil();
string_literal67=(Token)input.LT(1);
match(input,52,FOLLOW_52_in_function356);
string_literal67_tree=(Object)adaptor.create(string_literal67);
adaptor.addChild(root_0,string_literal67_tree);
}
break;
case 27:
{
root_0=(Object)adaptor.nil();
string_literal68=(Token)input.LT(1);
match(input,53,FOLLOW_53_in_function360);
string_literal68_tree=(Object)adaptor.create(string_literal68);
adaptor.addChild(root_0,string_literal68_tree);
}
break;
case 28:
{
root_0=(Object)adaptor.nil();
string_literal69=(Token)input.LT(1);
match(input,54,FOLLOW_54_in_function364);
string_literal69_tree=(Object)adaptor.create(string_literal69);
adaptor.addChild(root_0,string_literal69_tree);
}
break;
case 29:
{
root_0=(Object)adaptor.nil();
string_literal70=(Token)input.LT(1);
match(input,55,FOLLOW_55_in_function369);
string_literal70_tree=(Object)adaptor.create(string_literal70);
adaptor.addChild(root_0,string_literal70_tree);
}
break;
case 30:
{
root_0=(Object)adaptor.nil();
string_literal71=(Token)input.LT(1);
match(input,56,FOLLOW_56_in_function373);
string_literal71_tree=(Object)adaptor.create(string_literal71);
adaptor.addChild(root_0,string_literal71_tree);
}
break;
case 31:
{
root_0=(Object)adaptor.nil();
string_literal72=(Token)input.LT(1);
match(input,57,FOLLOW_57_in_function377);
string_literal72_tree=(Object)adaptor.create(string_literal72);
adaptor.addChild(root_0,string_literal72_tree);
}
break;
case 32:
{
root_0=(Object)adaptor.nil();
string_literal73=(Token)input.LT(1);
match(input,58,FOLLOW_58_in_function381);
string_literal73_tree=(Object)adaptor.create(string_literal73);
adaptor.addChild(root_0,string_literal73_tree);
}
break;
case 33:
{
root_0=(Object)adaptor.nil();
string_literal74=(Token)input.LT(1);
match(input,59,FOLLOW_59_in_function385);
string_literal74_tree=(Object)adaptor.create(string_literal74);
adaptor.addChild(root_0,string_literal74_tree);
}
break;
case 34:
{
root_0=(Object)adaptor.nil();
string_literal75=(Token)input.LT(1);
match(input,60,FOLLOW_60_in_function389);
string_literal75_tree=(Object)adaptor.create(string_literal75);
adaptor.addChild(root_0,string_literal75_tree);
}
break;
case 35:
{
root_0=(Object)adaptor.nil();
string_literal76=(Token)input.LT(1);
match(input,61,FOLLOW_61_in_function393);
string_literal76_tree=(Object)adaptor.create(string_literal76);
adaptor.addChild(root_0,string_literal76_tree);
}
break;
case 36:
{
root_0=(Object)adaptor.nil();
string_literal77=(Token)input.LT(1);
match(input,62,FOLLOW_62_in_function397);
string_literal77_tree=(Object)adaptor.create(string_literal77);
adaptor.addChild(root_0,string_literal77_tree);
}
break;
case 37:
{
root_0=(Object)adaptor.nil();
string_literal78=(Token)input.LT(1);
match(input,63,FOLLOW_63_in_function402);
string_literal78_tree=(Object)adaptor.create(string_literal78);
adaptor.addChild(root_0,string_literal78_tree);
}
break;
case 38:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_identifier_in_function406);
identifier79=identifier();
_fsp--;
adaptor.addChild(root_0,identifier79.tree);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
return retval;
}
