{
  stack_return retval=new stack_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal80=null;
  Token char_literal82=null;
  stackitem_return stackitem81=null;
  List list_stackitem=new ArrayList();
  List list_26=new ArrayList();
  List list_25=new ArrayList();
  Object char_literal80_tree=null;
  Object char_literal82_tree=null;
  try {
{
      char_literal80=(Token)input.LT(1);
      match(input,25,FOLLOW_25_in_stack417);
      list_25.add(char_literal80);
      int cnt6=0;
      loop6:       do {
        int alt6=2;
        int LA6_0=input.LA(1);
        if ((LA6_0 == STRING || (LA6_0 >= IDENTIFIER && LA6_0 <= QUOTED) || LA6_0 == 25 || (LA6_0 >= 27 && LA6_0 <= 63))) {
          alt6=1;
        }
switch (alt6) {
case 1:
{
            pushFollow(FOLLOW_stackitem_in_stack419);
            stackitem81=stackitem();
            _fsp--;
            list_stackitem.add(stackitem81.tree);
          }
        break;
default :
      if (cnt6 >= 1)       break loop6;
    EarlyExitException eee=new EarlyExitException(6,input);
  throw eee;
}
cnt6++;
}
 while (true);
char_literal82=(Token)input.LT(1);
match(input,26,FOLLOW_26_in_stack422);
list_26.add(char_literal82);
int i_0=0;
retval.tree=root_0;
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(STACK,"STACK"),root_1);
{
  int n_1=list_stackitem == null ? 0 : list_stackitem.size();
  if (n_1 == 0)   throw new RuntimeException("Must have more than one element for (...)+ loops");
  for (int i_1=0; i_1 < n_1; i_1++) {
    adaptor.addChild(root_1,list_stackitem.get(i_1));
  }
}
adaptor.addChild(root_0,root_1);
}
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
return retval;
}
