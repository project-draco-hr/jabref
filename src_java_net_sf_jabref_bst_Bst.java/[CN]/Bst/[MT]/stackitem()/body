{
  stackitem_return retval=new stackitem_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STRING84=null;
  Token INTEGER85=null;
  Token QUOTED86=null;
  function_return function83=null;
  stack_return stack87=null;
  Object STRING84_tree=null;
  Object INTEGER85_tree=null;
  Object QUOTED86_tree=null;
  try {
    int alt7=5;
switch (input.LA(1)) {
case IDENTIFIER:
case 27:
case 28:
case 29:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
      alt7=1;
    break;
case STRING:
  alt7=2;
break;
case INTEGER:
alt7=3;
break;
case QUOTED:
alt7=4;
break;
case 25:
alt7=5;
break;
default :
NoViableAltException nvae=new NoViableAltException("50:1: stackitem : ( function | STRING | INTEGER | QUOTED | stack );",7,0,input);
throw nvae;
}
switch (alt7) {
case 1:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_function_in_stackitem441);
function83=function();
_fsp--;
adaptor.addChild(root_0,function83.tree);
}
break;
case 2:
{
root_0=(Object)adaptor.nil();
STRING84=(Token)input.LT(1);
match(input,STRING,FOLLOW_STRING_in_stackitem446);
STRING84_tree=(Object)adaptor.create(STRING84);
adaptor.addChild(root_0,STRING84_tree);
}
break;
case 3:
{
root_0=(Object)adaptor.nil();
INTEGER85=(Token)input.LT(1);
match(input,INTEGER,FOLLOW_INTEGER_in_stackitem452);
INTEGER85_tree=(Object)adaptor.create(INTEGER85);
adaptor.addChild(root_0,INTEGER85_tree);
}
break;
case 4:
{
root_0=(Object)adaptor.nil();
QUOTED86=(Token)input.LT(1);
match(input,QUOTED,FOLLOW_QUOTED_in_stackitem458);
QUOTED86_tree=(Object)adaptor.create(QUOTED86);
adaptor.addChild(root_0,QUOTED86_tree);
}
break;
case 5:
{
root_0=(Object)adaptor.nil();
pushFollow(FOLLOW_stack_in_stackitem463);
stack87=stack();
_fsp--;
adaptor.addChild(root_0,stack87.tree);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
return retval;
}
