{
  MetaData metaData=new MetaData();
  List<String> defaultCiteKeyPattern=new ArrayList<>();
  Map<String,List<String>> nonDefaultCiteKeyPatterns=new HashMap<>();
  for (  Map.Entry<String,String> entry : data.entrySet()) {
    List<String> value=getAsList(entry.getValue());
    if (entry.getKey().startsWith("selector_")) {
      continue;
    }
    if (entry.getKey().startsWith(MetaData.PREFIX_KEYPATTERN)) {
      String entryType=entry.getKey().substring(MetaData.PREFIX_KEYPATTERN.length());
      nonDefaultCiteKeyPatterns.put(entryType,Collections.singletonList(getSingleItem(value)));
      continue;
    }
    if (entry.getKey().startsWith(MetaData.FILE_DIRECTORY + '-')) {
      String user=entry.getKey().substring(MetaData.FILE_DIRECTORY.length() + 1);
      metaData.setUserFileDirectory(user,getSingleItem(value));
      continue;
    }
switch (entry.getKey()) {
case MetaData.GROUPSTREE:
      metaData.setGroups(GroupsParser.importGroups(value,keywordSeparator));
    break;
case MetaData.SAVE_ACTIONS:
  metaData.setSaveActions(Cleanups.parse(value));
break;
case MetaData.DATABASE_TYPE:
metaData.setMode(BibDatabaseMode.parse(getSingleItem(value)));
break;
case MetaData.KEYPATTERNDEFAULT:
defaultCiteKeyPattern=Collections.singletonList(getSingleItem(value));
break;
case MetaData.PROTECTED_FLAG_META:
if (Boolean.parseBoolean(getSingleItem(value))) {
metaData.markAsProtected();
}
 else {
metaData.markAsNotProtected();
}
break;
case MetaData.FILE_DIRECTORY:
metaData.setDefaultFileDirectory(getSingleItem(value));
break;
case MetaData.SAVE_ORDER_CONFIG:
metaData.setSaveOrderConfig(SaveOrderConfig.parse(value));
break;
case "groupsversion":
case "groups":
break;
}
}
if (!defaultCiteKeyPattern.isEmpty() || !nonDefaultCiteKeyPatterns.isEmpty()) {
metaData.setCiteKeyPattern(defaultCiteKeyPattern,nonDefaultCiteKeyPatterns);
}
return metaData;
}
