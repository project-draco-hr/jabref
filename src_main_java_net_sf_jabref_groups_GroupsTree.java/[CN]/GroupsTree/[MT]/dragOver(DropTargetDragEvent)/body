{
  final Point cursor=dtde.getLocation();
  final long currentTime=System.currentTimeMillis();
  if (idlePoint == null)   idlePoint=cursor;
  final TreePath path=getPathForLocation(cursor.x,cursor.y);
  final GroupTreeNode target=path == null ? null : (GroupTreeNode)path.getLastPathComponent();
  setHighlight1Cell(target);
  if (dtde.isDataFlavorSupported(GroupTreeNode.flavor)) {
    dtde.acceptDrag(DnDConstants.ACTION_MOVE);
  }
 else   if (dtde.isDataFlavorSupported(TransferableEntrySelection.flavorInternal)) {
    if (path == null) {
      dtde.rejectDrag();
    }
 else {
      if (target.getGroup().supportsAdd()) {
        dtde.acceptDrag(DnDConstants.ACTION_LINK);
      }
 else {
        dtde.rejectDrag();
      }
    }
  }
 else {
    dtde.rejectDrag();
  }
  if (Math.abs(cursor.x - idlePoint.x) < idleMargin && Math.abs(cursor.y - idlePoint.y) < idleMargin) {
    if (currentTime - idleStartTime >= idleTimeToExpandNode) {
      if (path != null) {
        expandPath(path);
      }
    }
  }
 else {
    idlePoint=cursor;
    idleStartTime=currentTime;
  }
  if (currentTime - lastDragAutoscroll < minAutoscrollInterval)   return;
  final Rectangle r=getVisibleRect();
  final boolean scrollUp=cursor.y - r.y < dragScrollActivationMargin;
  final boolean scrollDown=r.y + r.height - cursor.y < dragScrollActivationMargin;
  final boolean scrollLeft=cursor.x - r.x < dragScrollActivationMargin;
  final boolean scrollRight=r.x + r.width - cursor.x < dragScrollActivationMargin;
  if (scrollUp)   r.translate(0,-dragScrollDistance);
 else   if (scrollDown)   r.translate(0,+dragScrollDistance);
  if (scrollLeft)   r.translate(-dragScrollDistance,0);
 else   if (scrollRight)   r.translate(+dragScrollDistance,0);
  scrollRectToVisible(r);
  lastDragAutoscroll=currentTime;
}
