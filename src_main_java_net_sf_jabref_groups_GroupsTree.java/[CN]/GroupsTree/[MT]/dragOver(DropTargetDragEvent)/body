{
  final Point cursor=dtde.getLocation();
  final long currentTime=System.currentTimeMillis();
  if (idlePoint == null) {
    idlePoint=cursor;
  }
  final TreePath path=getPathForLocation(cursor.x,cursor.y);
  final GroupTreeNode target=path == null ? null : (GroupTreeNode)path.getLastPathComponent();
  setHighlight1Cell(target);
  if (dtde.isDataFlavorSupported(GroupTreeNode.flavor)) {
    dtde.acceptDrag(DnDConstants.ACTION_MOVE);
  }
 else   if (dtde.isDataFlavorSupported(TransferableEntrySelection.flavorInternal)) {
    if (path == null) {
      dtde.rejectDrag();
    }
 else {
      if (target.getGroup().supportsAdd()) {
        dtde.acceptDrag(DnDConstants.ACTION_LINK);
      }
 else {
        dtde.rejectDrag();
      }
    }
  }
 else {
    dtde.rejectDrag();
  }
  if (Math.abs(cursor.x - idlePoint.x) < GroupsTree.idleMargin && Math.abs(cursor.y - idlePoint.y) < GroupsTree.idleMargin) {
    if (currentTime - idleStartTime >= GroupsTree.idleTimeToExpandNode) {
      if (path != null) {
        expandPath(path);
      }
    }
  }
 else {
    idlePoint=cursor;
    idleStartTime=currentTime;
  }
  if (currentTime - GroupsTree.lastDragAutoscroll < GroupsTree.minAutoscrollInterval) {
    return;
  }
  final Rectangle r=getVisibleRect();
  final boolean scrollUp=cursor.y - r.y < GroupsTree.dragScrollActivationMargin;
  final boolean scrollDown=r.y + r.height - cursor.y < GroupsTree.dragScrollActivationMargin;
  final boolean scrollLeft=cursor.x - r.x < GroupsTree.dragScrollActivationMargin;
  final boolean scrollRight=r.x + r.width - cursor.x < GroupsTree.dragScrollActivationMargin;
  if (scrollUp) {
    r.translate(0,-GroupsTree.dragScrollDistance);
  }
 else   if (scrollDown) {
    r.translate(0,+GroupsTree.dragScrollDistance);
  }
  if (scrollLeft) {
    r.translate(-GroupsTree.dragScrollDistance,0);
  }
 else   if (scrollRight) {
    r.translate(+GroupsTree.dragScrollDistance,0);
  }
  scrollRectToVisible(r);
  GroupsTree.lastDragAutoscroll=currentTime;
}
