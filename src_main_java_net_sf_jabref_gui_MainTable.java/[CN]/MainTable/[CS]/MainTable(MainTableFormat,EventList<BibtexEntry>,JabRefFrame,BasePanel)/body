{
  super();
  addFocusListener(Globals.focusListener);
  setAutoResizeMode(Globals.prefs.getInt("autoResizeMode"));
  this.tableFormat=tableFormat;
  this.panel=panel;
  sortedForTable=new SortedList<BibtexEntry>(list,null);
  sortedForMarking=new SortedList<BibtexEntry>(sortedForTable,null);
  sortedForSearch=new SortedList<BibtexEntry>(sortedForMarking,null);
  sortedForGrouping=new SortedList<BibtexEntry>(sortedForSearch,null);
  searchMatcher=null;
  groupMatcher=null;
  searchComparator=null;
  groupComparator=null;
  EventTableModel<BibtexEntry> tableModel=new EventTableModel<BibtexEntry>(sortedForGrouping,tableFormat);
  setModel(tableModel);
  tableColorCodes=Globals.prefs.getBoolean("tableColorCodesOn");
  selectionModel=new EventSelectionModel<BibtexEntry>(sortedForGrouping);
  setSelectionModel(selectionModel);
  pane=new JScrollPane(this);
  pane.setBorder(BorderFactory.createEmptyBorder());
  pane.getViewport().setBackground(Globals.prefs.getColor("tableBackground"));
  setGridColor(Globals.prefs.getColor("gridColor"));
  if (Globals.prefs.getBoolean("tableShowGrid")) {
    setShowGrid(true);
  }
 else {
    setShowGrid(false);
    setIntercellSpacing(new Dimension(0,0));
  }
  this.setTableHeader(new PreventDraggingJTableHeader(this.getColumnModel()));
  comparatorChooser=this.createTableComparatorChooser(this,sortedForTable,TableComparatorChooser.MULTIPLE_COLUMN_KEYBOARD);
  this.tableColumnListener=new PersistenceTableColumnListener(this);
  getSelected();
  setDragEnabled(true);
  TransferHandler xfer=new EntryTableTransferHandler(this,frame,panel);
  setTransferHandler(xfer);
  pane.setTransferHandler(xfer);
  setupComparatorChooser();
  refreshSorting();
  setWidths();
}
