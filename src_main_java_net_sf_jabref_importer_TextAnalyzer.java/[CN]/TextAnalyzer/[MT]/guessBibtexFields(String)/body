{
  TreeSet<Substring> usedParts=new TreeSet<>();
  text="  " + text + "  ";
  String[] split;
  String year=null;
  String yearRx="(\\s|\\()\\d\\d\\d\\d(\\.|,|\\))";
  String[] cand=getMatches(text,yearRx);
  if (cand.length == 1) {
    year=clean(cand[0]);
    int pos=text.indexOf(year);
    usedParts.add(new Substring("year",pos,pos + year.length()));
    LOGGER.info("Guessing 'year': '" + year + "'");
  }
 else   if (cand.length > 1) {
    int good=-1;
    int yearFound=-1;
    for (int i=0; i < cand.length; i++) {
      int number=Integer.parseInt(cand[i].trim());
      if (number == yearFound) {
        continue;
      }
      if (number < 2500) {
        if (good == -1) {
          good=i;
          yearFound=number;
        }
 else {
          if ((yearFound < FUTURE_YEAR) && (number < FUTURE_YEAR)) {
            good=-1;
            break;
          }
 else           if ((yearFound >= FUTURE_YEAR) && (number < FUTURE_YEAR)) {
            good=i;
            yearFound=number;
          }
        }
      }
    }
    if (good >= 0) {
      year=clean(cand[good]);
      int pos=text.indexOf(year);
      usedParts.add(new Substring("year",pos,pos + year.length()));
      LOGGER.info("Guessing 'year': '" + year + "'");
    }
  }
  String pages;
  String pagesRx="\\s(\\d{1,4})( ??)-( ??)(\\d{1,4})(\\.|,|\\s)";
  cand=getMatches(text,pagesRx);
  if (cand.length == 1) {
    pages=clean(cand[0].replaceAll("-|( - )","--"));
    int pos=text.indexOf(cand[0]);
    usedParts.add(new Substring("pages",pos,pos + year.length()));
    LOGGER.info("Guessing 'pages': '" + pages + "'");
  }
 else   if (cand.length > 1) {
    int found=-1;
    for (int i=0; i < cand.length; i++) {
      split=clean(cand[i].replaceAll("\\s","")).split("-");
      int first=Integer.parseInt(split[0]);
      int second=Integer.parseInt(split[1]);
      if ((second - first) > 3) {
        found=i;
        break;
      }
    }
    if (found >= 0) {
      pages=clean(cand[found].replaceAll("-|( - )","--"));
      int pos=text.indexOf(cand[found]);
      LOGGER.info("Guessing 'pages': '" + pages + "'");
      usedParts.add(new Substring("pages",pos,pos + pages.length()));
    }
  }
  String journal;
  String volume;
  String journalRx="(,|\\.|\\n)\\s??([a-zA-Z\\. ]{8,30}+)((.){0,2})((vol\\.|Vol\\.|Volume|volume))??\\s??(\\d{1,3})(\\.|,|\\s|:)";
  cand=getMatches(text,journalRx);
  if (cand.length > 0) {
    cand[0]=cand[0].trim();
    int pos=cand[0].lastIndexOf(' ');
    if (pos > 0) {
      volume=clean(cand[0].substring(pos + 1));
      LOGGER.info("Guessing 'volume': '" + volume + "'");
      journal=clean(cand[0].substring(0,pos));
      pos=journal.lastIndexOf(' ');
      if (pos > 0) {
        String last=journal.substring(pos + 1).toLowerCase();
        if (last.equals("volume") || last.equals("vol") || last.equals("v")) {
          journal=clean(journal.substring(0,pos));
        }
      }
      pos=text.indexOf(journal);
      usedParts.add(new Substring("journal",pos,pos + journal.length()));
      LOGGER.info("Guessing 'journal': '" + journal + "'");
    }
  }
 else {
  }
  Substring ss;
  Vector<String> free=new Vector<>();
  int piv=0;
  for (  Substring usedPart : usedParts) {
    ss=usedPart;
    if ((ss.begin() - piv) > 10) {
      LOGGER.info("... " + text.substring(piv,ss.begin()));
      free.add(clean(text.substring(piv,ss.begin())));
    }
    piv=ss.end();
  }
  if ((text.length() - piv) > 10) {
    free.add(clean(text.substring(piv)));
  }
  LOGGER.info("Free parts:");
  for (  String s : free) {
    LOGGER.info(": '" + s + "'");
  }
}
