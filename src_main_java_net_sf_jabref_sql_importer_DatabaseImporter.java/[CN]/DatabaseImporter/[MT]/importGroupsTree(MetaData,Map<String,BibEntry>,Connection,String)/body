{
  Map<String,GroupTreeNode> groups=new HashMap<>();
  LinkedHashMap<GroupTreeNode,String> parentIds=new LinkedHashMap<>();
  GroupTreeNode rootNode=new GroupTreeNode(new AllEntriesGroup());
  String query=SQLUtil.queryAllFromTable("groups WHERE database_id='" + database_id + "' ORDER BY groups_id");
  try (Statement statement=conn.createStatement();ResultSet rsGroups=statement.executeQuery(query)){
    while (rsGroups.next()) {
      AbstractGroup group=null;
      String typeId=findGroupTypeName(rsGroups.getString("group_types_id"),conn);
switch (typeId) {
case AllEntriesGroup.ID:
        groups.put(rsGroups.getString("groups_id"),rootNode);
      break;
case ExplicitGroup.ID:
    group=new ExplicitGroup(rsGroups.getString("label"),GroupHierarchyType.getByNumber(rsGroups.getInt("hierarchical_context")));
  break;
case KeywordGroup.ID:
LOGGER.debug("Keyw: " + rsGroups.getBoolean("case_sensitive"));
group=new KeywordGroup(rsGroups.getString("label"),StringUtil.unquote(rsGroups.getString("search_field"),'\\'),StringUtil.unquote(rsGroups.getString("search_expression"),'\\'),rsGroups.getBoolean("case_sensitive"),rsGroups.getBoolean("reg_exp"),GroupHierarchyType.getByNumber(rsGroups.getInt("hierarchical_context")));
break;
case SearchGroup.ID:
LOGGER.debug("Search: " + rsGroups.getBoolean("case_sensitive"));
group=new SearchGroup(rsGroups.getString("label"),StringUtil.unquote(rsGroups.getString("search_expression"),'\\'),rsGroups.getBoolean("case_sensitive"),rsGroups.getBoolean("reg_exp"),GroupHierarchyType.getByNumber(rsGroups.getInt("hierarchical_context")));
break;
}
if (group != null) {
GroupTreeNode node=new GroupTreeNode(group);
parentIds.put(node,rsGroups.getString("parent_id"));
groups.put(rsGroups.getString("groups_id"),node);
}
for (Map.Entry<GroupTreeNode,String> groupTreeNodeStringEntry : parentIds.entrySet()) {
String parentId=groupTreeNodeStringEntry.getValue();
GroupTreeNode parent=groups.get(parentId);
if (parent == null) {
}
 else {
groupTreeNodeStringEntry.getKey().moveTo(parent);
}
}
try (Statement entryGroup=conn.createStatement();ResultSet rsEntryGroup=entryGroup.executeQuery(SQLUtil.queryAllFromTable("entry_group"))){
while (rsEntryGroup.next()) {
String entryId=rsEntryGroup.getString("entries_id");
String groupId=rsEntryGroup.getString("groups_id");
GroupTreeNode node=groups.get(groupId);
if ((node != null) && (node.getGroup() instanceof ExplicitGroup)) {
ExplicitGroup expGroup=(ExplicitGroup)node.getGroup();
expGroup.addEntry(entries.get(entryId));
}
}
}
 metaData.setGroups(rootNode);
}
}
 }
