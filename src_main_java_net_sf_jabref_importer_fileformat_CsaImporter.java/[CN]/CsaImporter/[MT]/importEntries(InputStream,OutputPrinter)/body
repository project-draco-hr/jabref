{
  ArrayList<BibtexEntry> bibitems=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  HashMap<String,String> hm=new HashMap<>();
  BufferedReader in=new BufferedReader(ImportFormatReader.getReaderDefaultEncoding(stream));
  String Type=null;
  String str;
  boolean first=true;
  line=1;
  str=readLine(in);
  while (true) {
    if ((str == null) || str.isEmpty()) {
      if (!hm.isEmpty()) {
        if (Type == null) {
          addNote(hm,"Publication Type: [NOT SPECIFIED]");
          addNote(hm,"[PERHAPS NOT FULL FORMAT]");
          Type="article";
        }
        if ("article".equals(Type) && (hm.get("booktitle") != null)) {
          String booktitle=hm.get("booktitle");
          hm.remove("booktitle");
          hm.put("journal",booktitle);
        }
        BibtexEntry b=new BibtexEntry(DEFAULT_BIBTEXENTRY_ID,EntryTypes.getBibtexEntryType(Type));
        b.setField(hm);
        bibitems.add(b);
      }
      hm.clear();
      first=true;
      if (str == null) {
        break;
      }
      str=readLine(in);
      continue;
    }
    int fline=line;
    Matcher fm=CsaImporter.FIELD_PATTERN.matcher(str);
    if (fm.find()) {
      String fabbr=fm.group(1);
      String fname=fm.group(2);
      sb.setLength(0);
      while ((str=readLine(in)) != null) {
        if (!str.startsWith("    ")) {
          break;
        }
        if (sb.length() > 0) {
          sb.append(" ");
        }
        sb.append(str.substring(4));
      }
      String fstr=sb.toString();
      if (fstr.isEmpty()) {
        int line1=line - 1;
        throw new IOException("illegal empty field at line " + line1);
      }
      fm=CsaImporter.LT_PATTERN.matcher(fstr);
      if (fm.find()) {
        fstr=fm.replaceAll("<");
      }
      if ("DN".equals(fabbr) && "Database Name".equalsIgnoreCase(fname)) {
        if (!first) {
          throw new IOException("format error at line " + fline + ": DN out of order");
        }
        first=false;
      }
 else       if (first) {
        throw new IOException("format error at line " + fline + ": missing DN");
      }
      if ("PT".equals(fabbr)) {
        Type=null;
        String flow=fstr.toLowerCase();
        String[] types=flow.split("; ");
        for (        String type : types) {
          if (type.contains("article") || type.contains("journal article")) {
            Type="article";
            break;
          }
 else           if ("dissertation".equals(type)) {
            Type="phdthesis";
            break;
          }
 else           if ("conference".equals(type)) {
            Type="inproceedings";
            break;
          }
 else           if ("book monograph".equals(type) && (Type == null)) {
            Type="book";
            break;
          }
 else           if ("report".equals(type) && (Type == null)) {
            Type="techreport";
            break;
          }
        }
        if (Type == null) {
          Type="misc";
        }
      }
      String ftype=null;
      if ("AB".equals(fabbr)) {
        ftype="abstract";
      }
 else       if ("AF".equals(fabbr)) {
        ftype="affiliation";
      }
 else       if ("AU".equals(fabbr)) {
        ftype="author";
        if (fstr.contains(";")) {
          fstr=fstr.replaceAll("; "," and ");
        }
      }
 else       if ("CA".equals(fabbr)) {
        ftype="organization";
      }
 else       if ("DE".equals(fabbr)) {
        ftype="keywords";
      }
 else       if ("DO".equals(fabbr)) {
        ftype="doi";
      }
 else       if ("ED".equals(fabbr)) {
        ftype="editor";
      }
 else       if ("IB".equals(fabbr)) {
        ftype="ISBN";
      }
 else       if ("IS".equals(fabbr)) {
        ftype="ISSN";
      }
 else       if ("JN".equals(fabbr)) {
        ftype="journal";
      }
 else       if ("LA".equals(fabbr)) {
        ftype="language";
      }
 else       if ("PB".equals(fabbr)) {
        ftype="publisher";
      }
 else       if ("PY".equals(fabbr)) {
        ftype="year";
        if (hm.get("year") != null) {
          String oyear=hm.get("year");
          if (!fstr.equals(oyear)) {
            addNote(hm,"Source Year: " + oyear + ".");
          }
        }
      }
 else       if ("RL".equals(fabbr)) {
        ftype="url";
        String[] lines=fstr.split(" ");
        StringBuilder urls=new StringBuilder();
        for (int ii=0; ii < lines.length; ++ii) {
          if (lines[ii].startsWith("[URL:")) {
            urls.append(lines[ii].substring(5));
          }
 else           if (lines[ii].endsWith("]")) {
            int len=lines[ii].length();
            urls.append(lines[ii].substring(0,len - 1));
            if (ii < (lines.length - 1)) {
              urls.append("\n");
            }
          }
 else {
            urls.append(lines[ii]);
          }
        }
        fstr=urls.toString();
      }
 else       if ("SO".equals(fabbr)) {
        ftype="booktitle";
        Matcher pm=CsaImporter.VOLNOPP_PATTERN.matcher(fstr);
        if (pm.find()) {
          hm.put("volume",pm.group(1));
          hm.put("number",pm.group(2));
          hm.put("pages",pm.group(3));
          fstr=pm.replaceFirst("");
        }
        pm=CsaImporter.PAGES_PATTERN.matcher(fstr);
        StringBuilder pages=new StringBuilder();
        while (pm.find()) {
          if (pages.length() > 0) {
            pages.append(",");
          }
          String pp=pm.group(1);
          if (pp == null) {
            pp=pm.group(2);
          }
          if (pp == null) {
            pp=pm.group(3);
          }
          pages.append(pp);
          fstr=pm.replaceFirst("");
          pm=CsaImporter.PAGES_PATTERN.matcher(fstr);
        }
        if (pages.length() > 0) {
          hm.put("pages",pages.toString());
        }
        pm=CsaImporter.VOLUME_PATTERN.matcher(fstr);
        if (pm.find()) {
          hm.put("volume",pm.group(1));
          fstr=pm.replaceFirst("");
        }
        pm=CsaImporter.NUMBER_PATTERN.matcher(fstr);
        if (pm.find()) {
          hm.put("number",pm.group(1));
          fstr=pm.replaceFirst("");
        }
        fstr=parseDate(hm,fstr);
        Pattern pp=Pattern.compile(",?\\s*$");
        pm=pp.matcher(fstr);
        if (pm.find()) {
          fstr=pm.replaceFirst("");
        }
        if ("".equals(fstr)) {
          continue;
        }
      }
 else       if ("TI".equals(fabbr)) {
        ftype="title";
      }
 else       if ("RE".equals(fabbr)) {
        continue;
      }
      if (ftype != null) {
        hm.put(ftype,fstr);
      }
 else {
        addNote(hm,fname + ": " + fstr+ ".");
      }
    }
 else {
      str=readLine(in);
    }
  }
  return bibitems;
}
