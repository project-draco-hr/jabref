{
  List<BibEntry> l=new LinkedList<>();
  l.add(t3BibtexEntry());
  XMPUtil.writeXMP(pdfFile,l,null,true);
  try (PDDocument document=PDDocument.load(pdfFile.getAbsoluteFile())){
    if (document.isEncrypted()) {
      Assert.fail("Cannot add metadata to encrypted document.");
    }
    Assert.assertEquals("Kelly Clarkson and Ozzy Osbourne",document.getDocumentInformation().getAuthor());
    Assert.assertEquals("Hypersonic ultra-sound",document.getDocumentInformation().getTitle());
    Assert.assertEquals("Huey Duck and Dewey Duck and Louie Duck",document.getDocumentInformation().getCustomMetadataValue("bibtex/editor"));
    Assert.assertEquals("Clarkson06",document.getDocumentInformation().getCustomMetadataValue("bibtex/bibtexkey"));
    Assert.assertEquals("peanut, butter, jelly",document.getDocumentInformation().getKeywords());
    assertEqualsBibtexEntry(t3BibtexEntry(),XMPUtil.getBibtexEntryFromDocumentInformation(document.getDocumentInformation()).get());
    PDDocumentCatalog catalog=document.getDocumentCatalog();
    PDMetadata metaRaw=catalog.getMetadata();
    if (metaRaw == null) {
      Assert.fail();
    }
    XMPMetadata meta=new XMPMetadata(XMLUtil.parse(metaRaw.createInputStream()));
    meta.addXMLNSMapping(XMPSchemaBibtex.NAMESPACE,XMPSchemaBibtex.class);
    List<XMPSchema> schemas=meta.getSchemasByNamespaceURI("http://purl.org/dc/elements/1.1/");
    Assert.assertEquals(1,schemas.size());
    XMPSchemaDublinCore dcSchema=(XMPSchemaDublinCore)schemas.iterator().next();
    Assert.assertNotNull(dcSchema);
    Assert.assertEquals("Hypersonic ultra-sound",dcSchema.getTitle());
    Assert.assertEquals("1982-07",dcSchema.getSequenceList("dc:date").get(0));
    Assert.assertEquals("Kelly Clarkson",dcSchema.getCreators().get(0));
    Assert.assertEquals("Ozzy Osbourne",dcSchema.getCreators().get(1));
    Assert.assertEquals("Huey Duck",dcSchema.getContributors().get(0));
    Assert.assertEquals("Dewey Duck",dcSchema.getContributors().get(1));
    Assert.assertEquals("Louie Duck",dcSchema.getContributors().get(2));
    Assert.assertEquals("InProceedings".toLowerCase(),dcSchema.getTypes().get(0).toLowerCase());
    Assert.assertEquals("bibtex/bibtexkey/Clarkson06",dcSchema.getRelationships().get(0));
    Assert.assertEquals("peanut",dcSchema.getSubjects().get(0));
    Assert.assertEquals("butter",dcSchema.getSubjects().get(1));
    Assert.assertEquals("jelly",dcSchema.getSubjects().get(2));
    Assert.assertEquals(4,dcSchema.getRelationships().size());
    assertEqualsBibtexEntry(t3BibtexEntry(),XMPUtil.getBibtexEntryFromDublinCore(dcSchema).get());
  }
 }
