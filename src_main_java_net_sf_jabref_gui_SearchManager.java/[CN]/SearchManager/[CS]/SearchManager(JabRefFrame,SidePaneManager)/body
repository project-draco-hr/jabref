{
  super(manager,IconTheme.JabRefIcon.SEARCH.getIcon(),Localization.lang("Search"));
  this.frame=frame;
  incSearcher=new IncrementalSearcher(Globals.prefs);
  searchReq=new JCheckBoxMenuItem(Localization.lang("Search required fields"),Globals.prefs.getBoolean(JabRefPreferences.SEARCH_REQ));
  searchOpt=new JCheckBoxMenuItem(Localization.lang("Search optional fields"),Globals.prefs.getBoolean(JabRefPreferences.SEARCH_OPT));
  searchGen=new JCheckBoxMenuItem(Localization.lang("Search general fields"),Globals.prefs.getBoolean(JabRefPreferences.SEARCH_GEN));
  searchAll=new JCheckBoxMenuItem(Localization.lang("Search all fields"),Globals.prefs.getBoolean(JabRefPreferences.SEARCH_ALL));
  regExpSearch=new JCheckBoxMenuItem(Localization.lang("Use regular expressions"),Globals.prefs.getBoolean(JabRefPreferences.REG_EXP_SEARCH));
  increment=new JRadioButton(Localization.lang("Incremental"),false);
  floatSearch=new JRadioButton(Localization.lang("Float"),true);
  hideSearch=new JRadioButton(Localization.lang("Filter"),true);
  showResultsInDialog=new JRadioButton(Localization.lang("Show results in dialog"),true);
  searchAllBases=new JRadioButton(Localization.lang("Global search"),Globals.prefs.getBoolean(JabRefPreferences.SEARCH_ALL_BASES));
  ButtonGroup types=new ButtonGroup();
  types.add(increment);
  types.add(floatSearch);
  types.add(hideSearch);
  types.add(showResultsInDialog);
  types.add(searchAllBases);
  select=new JCheckBoxMenuItem(Localization.lang("Select matches"),false);
  increment.setToolTipText(Localization.lang("Incremental search"));
  floatSearch.setToolTipText(Localization.lang("Gray out non-matching entries"));
  hideSearch.setToolTipText(Localization.lang("Hide non-matching entries"));
  showResultsInDialog.setToolTipText(Localization.lang("Show search results in a window"));
  increment.addItemListener(this);
  floatSearch.addItemListener(this);
  hideSearch.addItemListener(this);
  showResultsInDialog.addItemListener(this);
  searchField.addFocusListener(Globals.focusListener);
  if (searchAll.isSelected()) {
    searchReq.setEnabled(false);
    searchOpt.setEnabled(false);
    searchGen.setEnabled(false);
  }
  searchAll.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent event){
      boolean state=!searchAll.isSelected();
      searchReq.setEnabled(state);
      searchOpt.setEnabled(state);
      searchGen.setEnabled(state);
    }
  }
);
  caseSensitive=new JCheckBoxMenuItem(Localization.lang("Case sensitive"),Globals.prefs.getBoolean(JabRefPreferences.CASE_SENSITIVE_SEARCH));
  highLightWords=new JCheckBoxMenuItem(Localization.lang("Highlight Words"),Globals.prefs.getBoolean(JabRefPreferences.HIGH_LIGHT_WORDS));
  searchAutoComplete=new JCheckBoxMenuItem(Localization.lang("Autocomplete names"),Globals.prefs.getBoolean(JabRefPreferences.SEARCH_AUTO_COMPLETE));
  settings.add(select);
  settings.addSeparator();
  settings.add(caseSensitive);
  settings.add(regExpSearch);
  settings.addSeparator();
  settings.add(highLightWords);
  settings.addSeparator();
  settings.add(searchAutoComplete);
  searchField.addActionListener(this);
  searchField.addCaretListener(this);
  search.addActionListener(this);
  searchField.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    FocusEvent e){
      if (increment.isSelected()) {
        searchField.setText("");
      }
    }
    @Override public void focusLost(    FocusEvent e){
      incSearch=false;
      incSearchPos=-1;
      if (increment.isSelected()) {
      }
    }
  }
);
  escape.addActionListener(this);
  escape.setEnabled(false);
  openset.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (settings.isVisible()) {
      }
 else {
        JButton src=(JButton)e.getSource();
        settings.show(src,0,openset.getHeight());
      }
    }
  }
);
  searchAutoComplete.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      Globals.prefs.putBoolean(JabRefPreferences.SEARCH_AUTO_COMPLETE,searchAutoComplete.isSelected());
      if (SearchManager.this.frame.basePanel() != null) {
        SearchManager.this.frame.basePanel().updateSearchManager();
      }
    }
  }
);
  Insets margin=new Insets(0,2,0,2);
  escape.setMargin(margin);
  openset.setMargin(margin);
  JButton help=new HelpAction(GUIGlobals.helpDiag,GUIGlobals.searchHelp).getIconButton();
  help.setMargin(margin);
  if (Globals.prefs.getBoolean(JabRefPreferences.INCREMENT_S)) {
    increment.setSelected(true);
  }
 else   if (Globals.prefs.getBoolean(JabRefPreferences.FLOAT_SEARCH)) {
    floatSearch.setSelected(true);
  }
 else   if (Globals.prefs.getBoolean(JabRefPreferences.SHOW_SEARCH_IN_DIALOG)) {
    showResultsInDialog.setSelected(true);
  }
 else   if (Globals.prefs.getBoolean(JabRefPreferences.SEARCH_ALL_BASES)) {
    searchAllBases.setSelected(true);
  }
 else {
    hideSearch.setSelected(true);
  }
  JPanel main=new JPanel();
  GridBagLayout gbl=new GridBagLayout();
  main.setLayout(gbl);
  GridBagConstraints con=new GridBagConstraints();
  con.gridwidth=GridBagConstraints.REMAINDER;
  con.fill=GridBagConstraints.BOTH;
  con.weightx=1;
  gbl.setConstraints(searchField,con);
  main.add(searchField);
  gbl.setConstraints(search,con);
  main.add(search);
  con.gridwidth=GridBagConstraints.REMAINDER;
  gbl.setConstraints(escape,con);
  main.add(escape);
  con.insets=new Insets(0,2,0,0);
  gbl.setConstraints(increment,con);
  main.add(increment);
  gbl.setConstraints(floatSearch,con);
  main.add(floatSearch);
  gbl.setConstraints(hideSearch,con);
  main.add(hideSearch);
  gbl.setConstraints(showResultsInDialog,con);
  main.add(showResultsInDialog);
  gbl.setConstraints(searchAllBases,con);
  main.add(searchAllBases);
  con.insets=new Insets(0,0,0,0);
  JPanel pan=new JPanel();
  GridBagLayout gb=new GridBagLayout();
  gbl.setConstraints(pan,con);
  pan.setLayout(gb);
  con.weightx=1;
  con.gridwidth=1;
  gb.setConstraints(openset,con);
  pan.add(openset);
  con.weightx=0;
  gb.setConstraints(help,con);
  pan.add(help);
  main.add(pan);
  main.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));
  setContentContainer(main);
  searchField.getInputMap().put(Globals.prefs.getKey(KeyBinds.REPEAT_INCREMENTAL_SEARCH),"repeat");
  searchField.getActionMap().put("repeat",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      if (increment.isSelected()) {
        repeatIncremental();
      }
    }
  }
);
  searchField.getInputMap().put(Globals.prefs.getKey(KeyBinds.CLEAR_SEARCH),"escape");
  searchField.getActionMap().put("escape",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      hideAway();
    }
  }
);
  setSearchButtonSizes();
  updateSearchButtonText();
}
