{
  List<BibEntry> bibitems=new ArrayList<>();
  boolean isChapter=false;
  String str;
  StringBuilder sb=new StringBuilder();
  while ((str=reader.readLine()) != null) {
    if (str.length() < 2) {
      sb.append("__::__").append(str);
    }
 else {
      sb.append("__NEWFIELD__").append(str);
    }
  }
  String[] entries=sb.toString().split("__::__");
  String type="";
  Map<String,String> h=new HashMap<>();
  for (  String entry : entries) {
    if (entry.trim().length() < 6) {
      continue;
    }
    h.clear();
    String[] fields=entry.split("__NEWFIELD__");
    for (    String field : fields) {
      if (field.length() < 6) {
        continue;
      }
      String f3=field.substring(0,2);
      String frest=field.substring(5);
      if ("TI".equals(f3)) {
        h.put(FieldName.TITLE,frest);
      }
 else       if ("AU".equals(f3)) {
        if (frest.trim().endsWith("(ed)")) {
          String ed=frest.trim();
          ed=ed.substring(0,ed.length() - 4);
          h.put(FieldName.EDITOR,AuthorList.fixAuthorLastNameFirst(ed.replace(",-",", ").replace(";"," and ")));
        }
 else {
          h.put(FieldName.AUTHOR,AuthorList.fixAuthorLastNameFirst(frest.replace(",-",", ").replace(";"," and ")));
        }
      }
 else       if ("AB".equals(f3)) {
        h.put(FieldName.ABSTRACT,frest);
      }
 else       if ("DE".equals(f3)) {
        String kw=frest.replace("-;",",").toLowerCase();
        h.put(FieldName.KEYWORDS,kw.substring(0,kw.length() - 1));
      }
 else       if ("SO".equals(f3)) {
        int m=frest.indexOf('.');
        if (m >= 0) {
          String jr=frest.substring(0,m);
          h.put(FieldName.JOURNAL,jr.replace("-"," "));
          frest=frest.substring(m);
          m=frest.indexOf(';');
          if (m >= 5) {
            String yr=frest.substring(m - 5,m).trim();
            h.put(FieldName.YEAR,yr);
            frest=frest.substring(m);
            m=frest.indexOf(':');
            int issueIndex=frest.indexOf('(');
            int endIssueIndex=frest.indexOf(')');
            if (m >= 0) {
              String pg=frest.substring(m + 1).trim();
              h.put(FieldName.PAGES,pg);
              h.put(FieldName.VOLUME,frest.substring(1,issueIndex).trim());
              h.put(FieldName.ISSUE,frest.substring(issueIndex + 1,endIssueIndex).trim());
            }
          }
        }
      }
 else       if ("PB".equals(f3)) {
        int m=frest.indexOf(':');
        if (m >= 0) {
          String jr=frest.substring(0,m);
          h.put(FieldName.PUBLISHER,jr.replace("-"," ").trim());
          frest=frest.substring(m);
          m=frest.indexOf(", ");
          if ((m + 2) < frest.length()) {
            String yr=frest.substring(m + 2).trim();
            try {
              Integer.parseInt(yr);
              h.put(FieldName.YEAR,yr);
            }
 catch (            NumberFormatException ex) {
            }
          }
        }
      }
 else       if ("AF".equals(f3)) {
        h.put("school",frest.trim());
      }
 else       if ("DT".equals(f3)) {
        frest=frest.trim();
        if ("Monograph".equals(frest)) {
          type="book";
        }
 else         if (frest.startsWith("Dissertation")) {
          type="phdthesis";
        }
 else         if (frest.toLowerCase().contains(FieldName.JOURNAL)) {
          type="article";
        }
 else         if ("Contribution".equals(frest) || "Chapter".equals(frest)) {
          type="incollection";
          isChapter=true;
        }
 else {
          type=frest.replace(" ","");
        }
      }
    }
    if (isChapter) {
      Object titleO=h.get(FieldName.TITLE);
      if (titleO != null) {
        String title=((String)titleO).trim();
        int inPos=title.indexOf("\" in ");
        if (inPos > 1) {
          h.put(FieldName.TITLE,title.substring(0,inPos));
        }
      }
    }
    BibEntry b=new BibEntry(DEFAULT_BIBTEXENTRY_ID,type);
    b.setField(h);
    bibitems.add(b);
  }
  return new ParserResult(bibitems);
}
