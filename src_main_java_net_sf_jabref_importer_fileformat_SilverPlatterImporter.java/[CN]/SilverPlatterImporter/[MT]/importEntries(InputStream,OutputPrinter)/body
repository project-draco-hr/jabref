{
  ArrayList<BibtexEntry> bibitems=new ArrayList<>();
  try (BufferedReader in=new BufferedReader(ImportFormatReader.getReaderDefaultEncoding(stream))){
    boolean isChapter=false;
    String str;
    StringBuilder sb=new StringBuilder();
    while ((str=in.readLine()) != null) {
      if (str.length() < 2) {
        sb.append("__::__").append(str);
      }
 else {
        sb.append("__NEWFIELD__").append(str);
      }
    }
    String[] entries=sb.toString().split("__::__");
    String Type="";
    HashMap<String,String> h=new HashMap<>();
    for (    String entry : entries) {
      if (entry.trim().length() < 6) {
        continue;
      }
      h.clear();
      String[] fields=entry.split("__NEWFIELD__");
      for (      String field : fields) {
        if (field.length() < 6) {
          continue;
        }
        String f3=field.substring(0,2);
        String frest=field.substring(5);
        if ("TI".equals(f3)) {
          h.put("title",frest);
        }
 else         if ("AU".equals(f3)) {
          if (frest.trim().endsWith("(ed)")) {
            String ed=frest.trim();
            ed=ed.substring(0,ed.length() - 4);
            h.put("editor",AuthorList.fixAuthor_lastNameFirst(ed.replaceAll(",-",", ").replaceAll(";"," and ")));
          }
 else {
            h.put("author",AuthorList.fixAuthor_lastNameFirst(frest.replaceAll(",-",", ").replaceAll(";"," and ")));
          }
        }
 else         if ("AB".equals(f3)) {
          h.put("abstract",frest);
        }
 else         if ("DE".equals(f3)) {
          String kw=frest.replaceAll("-;",",").toLowerCase();
          h.put("keywords",kw.substring(0,kw.length() - 1));
        }
 else         if ("SO".equals(f3)) {
          int m=frest.indexOf(".");
          if (m >= 0) {
            String jr=frest.substring(0,m);
            h.put("journal",jr.replaceAll("-"," "));
            frest=frest.substring(m);
            m=frest.indexOf(";");
            if (m >= 5) {
              String yr=frest.substring(m - 5,m).trim();
              h.put("year",yr);
              frest=frest.substring(m);
              m=frest.indexOf(":");
              if (m >= 0) {
                String pg=frest.substring(m + 1).trim();
                h.put("pages",pg);
                h.put("volume",frest.substring(1,m));
              }
            }
          }
        }
 else         if ("PB".equals(f3)) {
          int m=frest.indexOf(":");
          if (m >= 0) {
            String jr=frest.substring(0,m);
            h.put("publisher",jr.replaceAll("-"," ").trim());
            frest=frest.substring(m);
            m=frest.indexOf(", ");
            if ((m + 2) < frest.length()) {
              String yr=frest.substring(m + 2).trim();
              try {
                Integer.parseInt(yr);
                h.put("year",yr);
              }
 catch (              NumberFormatException ex) {
              }
            }
          }
        }
 else         if ("AF".equals(f3)) {
          h.put("school",frest.trim());
        }
 else         if ("DT".equals(f3)) {
          frest=frest.trim();
          if ("Monograph".equals(frest)) {
            Type="book";
          }
 else           if (frest.startsWith("Dissertation")) {
            Type="phdthesis";
          }
 else           if (frest.toLowerCase().contains("journal")) {
            Type="article";
          }
 else           if ("Contribution".equals(frest) || "Chapter".equals(frest)) {
            Type="incollection";
            isChapter=true;
          }
 else {
            Type=frest.replaceAll(" ","");
          }
        }
      }
      if (isChapter) {
        Object titleO=h.get("title");
        if (titleO != null) {
          String title=((String)titleO).trim();
          int inPos=title.indexOf("\" in ");
          int pgPos=title.lastIndexOf(" ");
          if (inPos > 1) {
            h.put("title",title.substring(1,inPos));
          }
          if (pgPos > inPos) {
            h.put("pages",title.substring(pgPos).replaceAll("-","--"));
          }
        }
      }
      BibtexEntry b=new BibtexEntry(DEFAULT_BIBTEXENTRY_ID,EntryTypes.getBibtexEntryType(Type));
      b.setField(h);
      bibitems.add(b);
    }
  }
   return bibitems;
}
