{
  skipWhitespace();
  StringBuffer value=new StringBuffer();
  int c='.';
  while (((c=peek()) != ',') && (c != '}') && (c != ')')) {
    if (_eof) {
      throw new RuntimeException("Error in line " + line + ": EOF in mid-string");
    }
    if (c == '"') {
      StringBuffer text=parseQuotedFieldExactly();
      value.append(fieldContentParser.format(text));
    }
 else     if (c == '{') {
      StringBuffer text=parseBracketedTextExactly();
      value.append(fieldContentParser.format(text));
    }
 else     if (Character.isDigit((char)c)) {
      String numString=parseTextToken();
      try {
        value.append(String.valueOf(Integer.parseInt(numString)));
      }
 catch (      NumberFormatException e) {
        value.append(numString);
      }
    }
 else     if (c == '#') {
      consume('#');
    }
 else {
      String textToken=parseTextToken();
      if (textToken.length() == 0)       throw new IOException("Error in line " + line + " or above: "+ "Empty text token.\nThis could be caused "+ "by a missing comma between two fields.");
      value.append("#").append(textToken).append("#");
    }
    skipWhitespace();
  }
  if (Globals.prefs.getBoolean("autoDoubleBraces")) {
    while ((value.length() > 1) && (value.charAt(0) == '{') && (value.charAt(value.length() - 1) == '}')) {
      value.deleteCharAt(value.length() - 1);
      value.deleteCharAt(0);
    }
    while (hasNegativeBraceCount(value.toString())) {
      value.insert(0,'{');
      value.append('}');
    }
  }
  return value.toString();
}
