{
  useDefaultAuthoryearStyle=Globals.prefs.getBoolean(JabRefPreferences.OO_USE_DEFAULT_AUTHORYEAR_STYLE);
  useDefaultNumericalStyle=Globals.prefs.getBoolean(JabRefPreferences.OO_USE_DEFAULT_NUMERICAL_STYLE);
  Action al=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      connect(true);
    }
  }
;
  connect.addActionListener(al);
  manualConnect.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      connect(false);
    }
  }
);
  selectDocument.setToolTipText(Localization.lang("Select which open Writer document to work on"));
  selectDocument.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      try {
        ooBase.selectDocument();
        frame.output(Localization.lang("Connected to document") + ": " + ooBase.getCurrentDocumentTitle());
      }
 catch (      Exception ex) {
        JOptionPane.showMessageDialog(frame,ex.getMessage(),Localization.lang("Error"),JOptionPane.ERROR_MESSAGE);
      }
    }
  }
);
  setStyleFile.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (styleDialog == null) {
        styleDialog=new StyleSelectDialog(frame,styleFile);
      }
      styleDialog.setVisible(true);
      if (styleDialog.isOkPressed()) {
        useDefaultAuthoryearStyle=Globals.prefs.getBoolean(JabRefPreferences.OO_USE_DEFAULT_AUTHORYEAR_STYLE);
        useDefaultNumericalStyle=Globals.prefs.getBoolean(JabRefPreferences.OO_USE_DEFAULT_NUMERICAL_STYLE);
        styleFile=Globals.prefs.get(JabRefPreferences.OO_BIBLIOGRAPHY_STYLE_FILE);
        try {
          readStyleFile();
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
  }
);
  pushEntries.setToolTipText(Localization.lang("Cite selected entries between parenthesis"));
  pushEntries.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      pushEntries(true,true,false);
    }
  }
);
  pushEntriesInt.setToolTipText(Localization.lang("Cite selected entries with in-text citation"));
  pushEntriesInt.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      pushEntries(false,true,false);
    }
  }
);
  pushEntriesEmpty.setToolTipText(Localization.lang("Insert a citation without text (the entry will appear in the reference list)"));
  pushEntriesEmpty.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      pushEntries(false,false,false);
    }
  }
);
  pushEntriesAdvanced.setToolTipText(Localization.lang("Cite selected entries with extra information"));
  pushEntriesAdvanced.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      pushEntries(false,true,true);
    }
  }
);
  focus.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ooBase.setFocus();
    }
  }
);
  update.setToolTipText(Localization.lang("Ensure that the bibliography is up-to-date"));
  Action updateAction=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        try {
          if (style == null) {
            readStyleFile();
          }
 else {
            style.ensureUpToDate();
          }
        }
 catch (        Throwable ex) {
          JOptionPane.showMessageDialog(frame,Localization.lang("You must select either a valid style file, or use one of the default styles."),Localization.lang("No valid style file defined"),JOptionPane.ERROR_MESSAGE);
          return;
        }
        ooBase.updateSortedReferenceMarks();
        java.util.List<BibDatabase> databases=getBaseList();
        java.util.List<String> unresolvedKeys=ooBase.refreshCiteMarkers(databases,style);
        ooBase.rebuildBibTextSection(databases,style);
        if (!unresolvedKeys.isEmpty()) {
          JOptionPane.showMessageDialog(frame,Localization.lang("Your OpenOffice document references the BibTeX key '%0', which could not be found in your current database.",unresolvedKeys.get(0)),Localization.lang("Unable to synchronize bibliography"),JOptionPane.ERROR_MESSAGE);
        }
      }
 catch (      UndefinedCharacterFormatException ex) {
        reportUndefinedCharacterFormat(ex);
      }
catch (      UndefinedParagraphFormatException ex) {
        reportUndefinedParagraphFormat(ex);
      }
catch (      ConnectionLostException ex) {
        showConnectionLostErrorMessage();
      }
catch (      BibtexEntryNotFoundException ex) {
        JOptionPane.showMessageDialog(frame,Localization.lang("Your OpenOffice document references the BibTeX key '%0', which could not be found in your current database.",ex.getBibtexKey()),Localization.lang("Unable to synchronize bibliography"),JOptionPane.ERROR_MESSAGE);
      }
catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
;
  update.addActionListener(updateAction);
  insertFullRef.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      try {
        insertFullRefs();
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
);
  merge.setToolTipText(Localization.lang("Combine pairs of citations that are separated by spaces only"));
  merge.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      try {
        ooBase.combineCiteMarkers(getBaseList(),style);
      }
 catch (      UndefinedCharacterFormatException e) {
        reportUndefinedCharacterFormat(e);
      }
catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  settingsB.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      showSettingsPopup();
    }
  }
);
  manageCitations.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      try {
        CitationManager cm=new CitationManager(frame,ooBase);
        cm.showDialog();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  test.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      try {
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  selectDocument.setEnabled(false);
  pushEntries.setEnabled(false);
  pushEntriesInt.setEnabled(false);
  pushEntriesEmpty.setEnabled(false);
  pushEntriesAdvanced.setEnabled(false);
  focus.setEnabled(false);
  update.setEnabled(false);
  insertFullRef.setEnabled(false);
  merge.setEnabled(false);
  manageCitations.setEnabled(false);
  test.setEnabled(false);
  diag=new JDialog((JFrame)null,"OpenOffice panel",false);
  DefaultFormBuilder b=new DefaultFormBuilder(new FormLayout("fill:pref:grow","p,p,p,p,p,p,p,p,p,p"));
  DefaultFormBuilder bb=new DefaultFormBuilder(new FormLayout("fill:pref:grow, 1dlu, fill:pref:grow, 1dlu, fill:pref:grow, " + "1dlu, fill:pref:grow, 1dlu, fill:pref:grow",""));
  bb.append(connect);
  bb.append(manualConnect);
  bb.append(selectDocument);
  bb.append(update);
  bb.append(help);
  b.append(bb.getPanel());
  b.append(setStyleFile);
  b.append(pushEntries);
  b.append(pushEntriesInt);
  b.append(pushEntriesAdvanced);
  b.append(pushEntriesEmpty);
  b.append(merge);
  b.append(manageCitations);
  b.append(settingsB);
  JPanel content=new JPanel();
  comp.setContentContainer(content);
  content.setLayout(new BorderLayout());
  content.add(b.getPanel(),BorderLayout.CENTER);
  frame.getTabbedPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(Globals.getKeyPrefs().getKey(KeyBinding.REFRESH_OO),"Refresh OO");
  frame.getTabbedPane().getActionMap().put("Refresh OO",updateAction);
}
