{
  out.write("@" + entry.getType().getName() + "{");
  String str=Util.shaveString(entry.getField(BibtexFields.KEY_FIELD));
  out.write(((str == null) ? "" : str) + "," + Globals.NEWLINE);
  HashMap<String,String> written=new HashMap<String,String>();
  written.put(BibtexFields.KEY_FIELD,null);
  boolean hasWritten=writeField(entry,out,"title",false,false);
  written.put("title",null);
  String[] s=entry.getRequiredFields();
  if (s != null) {
    Arrays.sort(s);
    for (    String value : s) {
      if (!written.containsKey(value)) {
        hasWritten=hasWritten | writeField(entry,out,value,hasWritten,false);
        written.put(value,null);
      }
    }
  }
  s=entry.getOptionalFields();
  boolean first=true, previous;
  previous=false;
  if (s != null) {
    Arrays.sort(s);
    for (    String value : s) {
      if (!written.containsKey(value)) {
        hasWritten=hasWritten | writeField(entry,out,value,hasWritten,hasWritten && first);
        written.put(value,null);
        first=false;
        previous=true;
      }
    }
  }
  TreeSet<String> remainingFields=new TreeSet<String>();
  for (  String key : entry.getAllFields()) {
    boolean writeIt=(write ? BibtexFields.isWriteableField(key) : BibtexFields.isDisplayableField(key));
    if (!written.containsKey(key) && writeIt)     remainingFields.add(key);
  }
  first=previous;
  for (  String field : remainingFields) {
    hasWritten=hasWritten | writeField(entry,out,field,hasWritten,hasWritten && first);
    first=false;
  }
  out.write((hasWritten ? Globals.NEWLINE : "") + "}" + Globals.NEWLINE);
}
