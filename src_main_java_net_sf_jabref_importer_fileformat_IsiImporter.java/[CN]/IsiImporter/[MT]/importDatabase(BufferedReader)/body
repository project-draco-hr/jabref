{
  Objects.requireNonNull(reader);
  List<BibEntry> bibitems=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  String str;
  while ((str=reader.readLine()) != null) {
    if (str.length() < 3) {
      continue;
    }
    if ("PT ".equals(str.substring(0,3))) {
      sb.append("::").append(str);
    }
 else {
      String beg=str.substring(0,3).trim();
      if (beg.length() == 2) {
        sb.append(" ## ");
        sb.append(str);
      }
 else {
        sb.append("EOLEOL");
        sb.append(str.trim());
      }
    }
  }
  String[] entries=sb.toString().split("::");
  Map<String,String> hm=new HashMap<>();
  for (  String entry : entries) {
    String[] fields=entry.split(" ## ");
    if (fields.length == 0) {
      fields=entry.split("\n");
    }
    String Type="";
    String PT="";
    String pages="";
    hm.clear();
    for (    String field : fields) {
      if (field.length() <= 2) {
        continue;
      }
      String beg=field.substring(0,2);
      String value=field.substring(3);
      if (value.startsWith(" - ")) {
        value=value.substring(3);
      }
      value=value.trim();
      if ("PT".equals(beg)) {
        if (value.startsWith("J")) {
          PT="article";
        }
 else {
          PT=value;
        }
        Type="article";
      }
 else       if ("TY".equals(beg)) {
        if ("JOUR".equals(value)) {
          Type="article";
        }
 else         if ("CONF".equals(value)) {
          Type="inproceedings";
        }
      }
 else       if ("JO".equals(beg)) {
        hm.put("booktitle",value);
      }
 else       if ("AU".equals(beg)) {
        String author=IsiImporter.isiAuthorsConvert(value.replace("EOLEOL"," and "));
        if (hm.get(FieldName.AUTHOR) != null) {
          author=hm.get(FieldName.AUTHOR) + " and " + author;
        }
        hm.put(FieldName.AUTHOR,author);
      }
 else       if ("TI".equals(beg)) {
        hm.put(FieldName.TITLE,value.replace("EOLEOL"," "));
      }
 else       if ("SO".equals(beg) || "JA".equals(beg)) {
        hm.put(FieldName.JOURNAL,value.replace("EOLEOL"," "));
      }
 else       if ("ID".equals(beg) || "KW".equals(beg)) {
        value=value.replace("EOLEOL"," ");
        String existingKeywords=hm.get(FieldName.KEYWORDS);
        if ((existingKeywords == null) || existingKeywords.contains(value)) {
          existingKeywords=value;
        }
 else {
          existingKeywords+=", " + value;
        }
        hm.put(FieldName.KEYWORDS,existingKeywords);
      }
 else       if ("AB".equals(beg)) {
        hm.put(FieldName.ABSTRACT,value.replace("EOLEOL"," "));
      }
 else       if ("BP".equals(beg) || "BR".equals(beg) || "SP".equals(beg)) {
        pages=value;
      }
 else       if ("EP".equals(beg)) {
        int detpos=value.indexOf(' ');
        if ((detpos != -1) && !value.substring(0,detpos).trim().isEmpty()) {
          value=value.substring(0,detpos);
        }
        pages=pages + "--" + value;
      }
 else       if ("PS".equals(beg)) {
        pages=IsiImporter.parsePages(value);
      }
 else       if ("AR".equals(beg)) {
        pages=value;
      }
 else       if ("IS".equals(beg)) {
        hm.put(FieldName.NUMBER,value);
      }
 else       if ("PY".equals(beg)) {
        hm.put(FieldName.YEAR,value);
      }
 else       if ("VL".equals(beg)) {
        hm.put(FieldName.VOLUME,value);
      }
 else       if ("PU".equals(beg)) {
        hm.put(FieldName.PUBLISHER,value);
      }
 else       if ("DI".equals(beg)) {
        hm.put(FieldName.DOI,value);
      }
 else       if ("PD".equals(beg)) {
        String month=IsiImporter.parseMonth(value);
        if (month != null) {
          hm.put(FieldName.MONTH,month);
        }
      }
 else       if ("DT".equals(beg)) {
        Type=value;
        if ("Review".equals(Type)) {
          Type="article";
        }
 else         if (Type.startsWith("Article") || Type.startsWith("Journal") || "article".equals(PT)) {
          Type="article";
        }
 else {
          Type="misc";
        }
      }
 else       if ("CR".equals(beg)) {
        hm.put("CitedReferences",value.replace("EOLEOL"," ; ").trim());
      }
 else {
        if ("ER".equals(beg) || "EF".equals(beg) || "VR".equals(beg)|| "FN".equals(beg)) {
          continue;
        }
        hm.put(beg.toLowerCase(),value);
      }
    }
    if (!"".equals(pages)) {
      hm.put(FieldName.PAGES,pages);
    }
    if (hm.isEmpty()) {
      continue;
    }
    BibEntry b=new BibEntry(DEFAULT_BIBTEXENTRY_ID,Type);
    List<Object> toRemove=new ArrayList<>();
    for (    Map.Entry<String,String> field : hm.entrySet()) {
      String content=field.getValue();
      if ((content == null) || content.trim().isEmpty()) {
        toRemove.add(field.getKey());
      }
    }
    for (    Object aToRemove : toRemove) {
      hm.remove(aToRemove);
    }
    IsiImporter.processSubSup(hm);
    IsiImporter.processCapitalization(hm);
    b.setField(hm);
    bibitems.add(b);
  }
  return new ParserResult(bibitems);
}
