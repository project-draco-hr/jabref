{
  URL url=new URL(urlQuery);
  URLDownload ud=new URLDownload(url);
  String cont=ud.downloadToString();
  String entirePage=cont;
  String pageEntire=cont;
  int countOfRefs=0;
  int refsRequested;
  if (count == 1) {
    Matcher mn=JSTORFetcher2.numberofhits.matcher(pageEntire);
    if (mn.find()) {
      numberOfRefs[0]=mn.group(1);
      countOfRefs=Integer.valueOf(numberOfRefs[0]);
    }
 else {
      numberOfRefs[0]="0";
    }
    while (true) {
      String strCount=JOptionPane.showInputDialog(Globals.lang("References found") + ": " + countOfRefs+ "  "+ Globals.lang("Number of references to fetch?"),Integer.toString(countOfRefs));
      if (strCount == null) {
        status.setStatus(Globals.lang("JSTOR import cancelled"));
        return JSTORFetcher2.CANCELLED;
      }
      try {
        numberOfRefs[1]=strCount.trim();
        refsRequested=Integer.parseInt(numberOfRefs[1]);
        break;
      }
 catch (      RuntimeException ex) {
        status.showMessage(Globals.lang("Please enter a valid number"));
      }
    }
  }
  countOfRefs=Integer.valueOf(numberOfRefs[0]);
  refsRequested=Integer.valueOf(numberOfRefs[1]);
  Matcher m=JSTORFetcher2.idPattern.matcher(cont);
  if (m.find() && ((ids.size() + 1) <= refsRequested)) {
    do {
      ids.add(m.group(1));
      cont=cont.substring(m.end());
      m=JSTORFetcher2.idPattern.matcher(cont);
    }
 while (m.find() && ((ids.size() + 1) <= refsRequested));
  }
 else   if (entirePage.contains(JSTORFetcher2.noAccessIndicator)) {
    noAccessFound=true;
    return null;
  }
 else {
    return null;
  }
  m=JSTORFetcher2.nextPagePattern.matcher(entirePage);
  if (m.find()) {
    return JSTORFetcher2.JSTOR_URL + m.group(1);
  }
 else {
    return null;
  }
}
