{
  int _ttype;
  Token _token=null;
  int _begin=text.length();
  _ttype=NESTED_ACTION;
  int _saveIndex;
  match('{');
{
    _loop209:     do {
      if ((LA(1) == '}') && (true))       break _loop209;
      if ((LA(1) == '\n' || LA(1) == '\r') && ((LA(2) >= '\u0003' && LA(2) <= '~'))) {
{
          if ((LA(1) == '\r') && (LA(2) == '\n')) {
            match('\r');
            match('\n');
            if (inputState.guessing == 0) {
              newline();
            }
          }
 else           if ((LA(1) == '\r') && ((LA(2) >= '\u0003' && LA(2) <= '~'))) {
            match('\r');
            if (inputState.guessing == 0) {
              newline();
            }
          }
 else           if ((LA(1) == '\n')) {
            match('\n');
            if (inputState.guessing == 0) {
              newline();
            }
          }
 else {
            throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine());
          }
        }
      }
 else       if ((LA(1) == '{') && ((LA(2) >= '\u0003' && LA(2) <= '~'))) {
        mNESTED_ACTION(false);
      }
 else       if ((LA(1) == '\'') && (_tokenSet_1.member(LA(2)))) {
        mCHAR_LITERAL(false);
      }
 else       if ((LA(1) == '/') && (LA(2) == '*' || LA(2) == '/')) {
        mCOMMENT(false);
      }
 else       if ((LA(1) == '"') && ((LA(2) >= '\u0003' && LA(2) <= '~'))) {
        mSTRING_LITERAL(false);
      }
 else       if (((LA(1) >= '\u0003' && LA(1) <= '~')) && ((LA(2) >= '\u0003' && LA(2) <= '~'))) {
        matchNot(EOF_CHAR);
      }
 else {
        break _loop209;
      }
    }
 while (true);
  }
  match('}');
  if (_createToken && _token == null && _ttype != Token.SKIP) {
    _token=makeToken(_ttype);
    _token.setText(new String(text.getBuffer(),_begin,text.length() - _begin));
  }
  _returnToken=_token;
}
