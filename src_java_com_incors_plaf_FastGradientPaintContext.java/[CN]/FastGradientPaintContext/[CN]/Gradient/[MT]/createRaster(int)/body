{
  int gradientWidth;
  int gradientHeight;
  if (info.isVertical) {
    gradientHeight=info.parallelLength;
    gradientWidth=this.perpendicularLength=perpendicularLength;
  }
 else {
    gradientWidth=info.parallelLength;
    gradientHeight=this.perpendicularLength=perpendicularLength;
  }
  int sa=(info.startColor >> 24) & 0xFF;
  int sr=(info.startColor >> 16) & 0xFF;
  int sg=(info.startColor >> 8) & 0xFF;
  int sb=info.startColor & 0xFF;
  int da=((info.endColor >> 24) & 0xFF) - sa;
  int dr=((info.endColor >> 16) & 0xFF) - sr;
  int dg=((info.endColor >> 8) & 0xFF) - sg;
  int db=(info.endColor & 0xFF) - sb;
  raster=info.model.createCompatibleWritableRaster(gradientWidth,gradientHeight);
  Object c=null;
  int pl=info.parallelLength;
  for (int i=0; i < pl; i++) {
    c=info.model.getDataElements(((sa + ((i * da) / pl)) << 24) | ((sr + ((i * dr) / pl)) << 16) | ((sg + ((i * dg) / pl)) << 8)| (sb + ((i * db) / pl)),c);
    for (int j=0; j < perpendicularLength; j++) {
      if (info.isVertical) {
        raster.setDataElements(j,i,c);
      }
 else {
        raster.setDataElements(i,j,c);
      }
    }
  }
  childRasterCache=new HashMap();
}
