{
  HashMap<String,String> fI=new HashMap<>();
  fI.put("id","bibtexkey");
  fI.put("au","author");
  fI.put("ti","title");
  fI.put("jo","journal");
  fI.put("vo","volume");
  fI.put("nu","number");
  fI.put("pa","pages");
  fI.put("mo","month");
  fI.put("yr","year");
  fI.put("kw","keywords");
  fI.put("ab","abstract");
  fI.put("no","note");
  fI.put("ed","editor");
  fI.put("pu","publisher");
  fI.put("se","series");
  fI.put("ad","address");
  fI.put("en","edition");
  fI.put("ch","chapter");
  fI.put("hp","howpublished");
  fI.put("tb","booktitle");
  fI.put("or","organization");
  fI.put("sc","school");
  fI.put("in","institution");
  fI.put("ty","type");
  fI.put("url","url");
  fI.put("cr","crossref");
  fI.put("fi","file");
  BufferedReader in=new BufferedReader(ImportFormatReader.getReaderDefaultEncoding(stream));
  in.readLine();
  String ln=in.readLine();
  if (ln == null) {
    return null;
  }
  String[] fieldDef=ln.split(",");
  List<BibEntry> bibitems=new ArrayList<>();
  String s;
  BibEntry entry;
  while ((s=in.readLine()) != null) {
    try {
      s=s.replace("<par>","");
      String[] fields=s.split(SEPARATOR);
      if (fields.length < 2) {
        continue;
      }
      String type=fields[1].toLowerCase();
      if ("Masterthesis".equals(fields[1])) {
        type="mastersthesis";
      }
      if ("PhD-Thesis".equals(fields[1])) {
        type="phdthesis";
      }
      if ("miscellaneous".equals(fields[1])) {
        type="misc";
      }
      if ("Conference".equals(fields[1])) {
        type="proceedings";
      }
      entry=new BibEntry(IdGenerator.next(),type);
      String fld;
      for (int i=0; i < Math.min(fieldDef.length,fields.length); i++) {
        fld=fI.get(fieldDef[i]);
        if (fld != null) {
          if ("author".equals(fld) || "editor".equals(fld)) {
            ImportFormatReader.setIfNecessary(entry,fld,fields[i].replace(" and ",", ").replace(", "," and "));
          }
 else           if ("pages".equals(fld)) {
            ImportFormatReader.setIfNecessary(entry,fld,fields[i].replace("-","--"));
          }
 else           if ("file".equals(fld)) {
            String fieldName="pdf";
            if (fields[i].endsWith("ps") || fields[i].endsWith("ps.gz")) {
              fieldName="ps";
            }
 else             if (fields[i].endsWith("html")) {
              fieldName="url";
            }
            ImportFormatReader.setIfNecessary(entry,fieldName,fields[i]);
          }
 else {
            ImportFormatReader.setIfNecessary(entry,fld,fields[i]);
          }
        }
      }
      bibitems.add(entry);
    }
 catch (    NullPointerException ex) {
      LOGGER.info("Problem parsing Sixpack entry, ignoring entry.",ex);
    }
  }
  return bibitems;
}
