{
  int piv=-1;
  String tmpMarker=null;
  if (uniquefiers != null) {
    for (int i=0; i < uniquefiers.length; i++) {
      if ((uniquefiers[i] != null) && (uniquefiers[i].length() > 0)) {
        String authorField=(String)citProperties.get("AuthorField");
        int maxAuthors=(Integer)citProperties.get("MaxAuthors");
        if (piv == -1) {
          piv=i;
          tmpMarker=getAuthorYearParenthesisMarker(new BibtexEntry[]{entries[i]},database,authorField,(String)citProperties.get("YearField"),maxAuthors,(String)citProperties.get("AuthorSeparator"),(String)citProperties.get("AuthorLastSeparator"),(String)citProperties.get("EtAlString"),(String)citProperties.get("YearSeparator"),(String)citProperties.get("BracketBefore"),(String)citProperties.get("BracketAfter"),(String)citProperties.get("CitationSeparator"),null,unlimAuthors);
        }
 else {
          String thisMarker=getAuthorYearParenthesisMarker(new BibtexEntry[]{entries[i]},database,authorField,(String)citProperties.get("YearField"),maxAuthors,(String)citProperties.get("AuthorSeparator"),(String)citProperties.get("AuthorLastSeparator"),(String)citProperties.get("EtAlString"),(String)citProperties.get("YearSeparator"),(String)citProperties.get("BracketBefore"),(String)citProperties.get("BracketAfter"),(String)citProperties.get("CitationSeparator"),null,unlimAuthors);
          String author=getCitationMarkerField(entries[i],database,authorField);
          AuthorList al=AuthorList.getAuthorList(author);
          int prevALim=i > 0 ? unlimAuthors[i - 1] : unlimAuthors[0];
          if (!thisMarker.equals(tmpMarker) || ((al.size() > maxAuthors) && (unlimAuthors[i] != prevALim))) {
            if ((piv > -1) && (i > (piv + 1))) {
              group(entries,uniquefiers,piv,i - 1,(String)citProperties.get("UniquefierSeparator"));
            }
            tmpMarker=thisMarker;
            piv=i;
          }
        }
      }
 else {
        if ((piv > -1) && (i > (piv + 1))) {
          group(entries,uniquefiers,piv,i - 1,(String)citProperties.get("UniquefierSeparator"));
        }
        piv=-1;
      }
    }
    if (piv >= 0) {
      group(entries,uniquefiers,piv,uniquefiers.length - 1,(String)citProperties.get("UniquefierSeparator"));
    }
  }
  if (inParenthesis) {
    return getAuthorYearParenthesisMarker(entries,database,(String)citProperties.get("AuthorField"),(String)citProperties.get("YearField"),(Integer)citProperties.get("MaxAuthors"),(String)citProperties.get("AuthorSeparator"),(String)citProperties.get("AuthorLastSeparator"),(String)citProperties.get("EtAlString"),(String)citProperties.get("YearSeparator"),(String)citProperties.get("BracketBefore"),(String)citProperties.get("BracketAfter"),(String)citProperties.get("CitationSeparator"),uniquefiers,unlimAuthors);
  }
 else {
    String authorLastSeparator=(String)citProperties.get("AuthorLastSeparator");
    String alsInText=(String)citProperties.get("AuthorLastSeparatorInText");
    if (alsInText != null) {
      authorLastSeparator=alsInText;
    }
    return getAuthorYearInTextMarker(entries,database,(String)citProperties.get("AuthorField"),(String)citProperties.get("YearField"),(Integer)citProperties.get("MaxAuthors"),(String)citProperties.get("AuthorSeparator"),authorLastSeparator,(String)citProperties.get("EtAlString"),(String)citProperties.get("InTextYearSeparator"),(String)citProperties.get("BracketBefore"),(String)citProperties.get("BracketAfter"),(String)citProperties.get("CitationSeparator"),uniquefiers,unlimAuthors);
  }
}
