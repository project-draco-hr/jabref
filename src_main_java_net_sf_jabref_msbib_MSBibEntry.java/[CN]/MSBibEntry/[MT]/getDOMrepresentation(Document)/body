{
  try {
    Element msbibEntry=d.createElement(bcol + "Source");
    addField(d,msbibEntry,"SourceType",sourceType);
    addField(d,msbibEntry,BIBTEX + "Entry",bibTexEntry);
    addField(d,msbibEntry,"Tag",tag);
    addField(d,msbibEntry,"GUID",GUID);
    if (LCID >= 0)     addField(d,msbibEntry,"LCID",Integer.toString(LCID));
    addField(d,msbibEntry,"Title",title);
    addField(d,msbibEntry,"Year",year);
    addField(d,msbibEntry,"ShortTitle",shortTitle);
    addField(d,msbibEntry,"Comments",comments);
    Element allAuthors=d.createElement(bcol + "Author");
    addAuthor(d,allAuthors,"Author",authors);
    addAuthor(d,allAuthors,"BookAuthor",bookAuthors);
    addAuthor(d,allAuthors,"Editor",editors);
    addAuthor(d,allAuthors,"Translator",translators);
    addAuthor(d,allAuthors,"ProducerName",producerNames);
    addAuthor(d,allAuthors,"Composer",composers);
    addAuthor(d,allAuthors,"Conductor",conductors);
    addAuthor(d,allAuthors,"Performer",performers);
    addAuthor(d,allAuthors,"Writer",writers);
    addAuthor(d,allAuthors,"Director",directors);
    addAuthor(d,allAuthors,"Compiler",compilers);
    addAuthor(d,allAuthors,"Interviewer",interviewers);
    addAuthor(d,allAuthors,"Interviewee",interviewees);
    addAuthor(d,allAuthors,"Inventor",inventors);
    addAuthor(d,allAuthors,"Counsel",counsels);
    msbibEntry.appendChild(allAuthors);
    if (pages != null)     addField(d,msbibEntry,"Pages",pages.toString("-"));
    addField(d,msbibEntry,"Volume",volume);
    addField(d,msbibEntry,"NumberVolumes",numberOfVolumes);
    addField(d,msbibEntry,"Edition",edition);
    addField(d,msbibEntry,"StandardNumber",standardNumber);
    addField(d,msbibEntry,"Publisher",publisher);
    addAdrress(d,msbibEntry,address);
    addField(d,msbibEntry,"BookTitle",bookTitle);
    addField(d,msbibEntry,"ChapterNumber",chapterNumber);
    addField(d,msbibEntry,"JournalName",journalName);
    addField(d,msbibEntry,"Issue",issue);
    addField(d,msbibEntry,"PeriodicalTitle",periodicalTitle);
    addField(d,msbibEntry,"ConferenceName",conferenceName);
    addField(d,msbibEntry,"Department",department);
    addField(d,msbibEntry,"Institution",institution);
    addField(d,msbibEntry,"ThesisType",thesisType);
    addField(d,msbibEntry,"InternetSiteTitle",internetSiteTitle);
    addDate(d,msbibEntry,dateAccessed,"Accessed");
    addField(d,msbibEntry,"Month",month);
    addField(d,msbibEntry,"URL",url);
    addField(d,msbibEntry,"ProductionCompany",productionCompany);
    addField(d,msbibEntry,"PublicationTitle",publicationTitle);
    addField(d,msbibEntry,"Medium",medium);
    addField(d,msbibEntry,"AlbumTitle",albumTitle);
    addField(d,msbibEntry,"RecordingNumber",recordingNumber);
    addField(d,msbibEntry,"Theater",theater);
    addField(d,msbibEntry,"Distributor",distributor);
    addField(d,msbibEntry,"BroadcastTitle",broadcastTitle);
    addField(d,msbibEntry,"Broadcaster",broadcaster);
    addField(d,msbibEntry,"Station",station);
    addField(d,msbibEntry,"Type",type);
    addField(d,msbibEntry,"PatentNumber",patentNumber);
    addField(d,msbibEntry,"Court",court);
    addField(d,msbibEntry,"Reporter",reporter);
    addField(d,msbibEntry,"CaseNumber",caseNumber);
    addField(d,msbibEntry,"AbbreviatedCaseNumber",abbreviatedCaseNumber);
    addField(d,msbibEntry,BIBTEX + "Series",bibTex_Series);
    addField(d,msbibEntry,BIBTEX + "Abstract",bibTex_Abstract);
    addField(d,msbibEntry,BIBTEX + "KeyWords",bibTex_KeyWords);
    addField(d,msbibEntry,BIBTEX + "CrossRef",bibTex_CrossRef);
    addField(d,msbibEntry,BIBTEX + "HowPublished",bibTex_HowPublished);
    addField(d,msbibEntry,BIBTEX + "Affiliation",bibTex_Affiliation);
    addField(d,msbibEntry,BIBTEX + "Contents",bibTex_Contents);
    addField(d,msbibEntry,BIBTEX + "Copyright",bibTex_Copyright);
    addField(d,msbibEntry,BIBTEX + "Price",bibTex_Price);
    addField(d,msbibEntry,BIBTEX + "Size",bibTex_Size);
    addField(d,msbibEntry,BIBTEX + "InType",bibTex_InType);
    addField(d,msbibEntry,BIBTEX + "Paper",bibTex_Paper);
    return msbibEntry;
  }
 catch (  Exception e) {
    System.out.println("Exception caught..." + e);
    e.printStackTrace();
    throw new Error(e);
  }
}
