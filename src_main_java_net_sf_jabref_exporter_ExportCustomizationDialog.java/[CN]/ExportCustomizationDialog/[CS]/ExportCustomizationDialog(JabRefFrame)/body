{
  super(frame_,Localization.lang("Manage custom exports"),false);
  frame=frame_;
  JButton addExport=new JButton(Localization.lang("Add new"));
  addExport.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      CustomExportDialog ecd=new CustomExportDialog(frame);
      ecd.setVisible(true);
      if (ecd.okPressed()) {
        List<String> newFormat=Arrays.asList(ecd.name(),ecd.layoutFile(),ecd.extension());
        Globals.prefs.customExports.addFormat(newFormat);
        Globals.prefs.customExports.store();
      }
    }
  }
);
  JButton modify=new JButton(Localization.lang("Modify"));
  modify.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int row=table.getSelectedRow();
      if (row == -1) {
        return;
      }
      List<String> old=Globals.prefs.customExports.getSortedList().get(row);
      CustomExportDialog ecd=new CustomExportDialog(frame,old.get(0),old.get(1),old.get(2));
      ecd.setVisible(true);
      if (ecd.okPressed()) {
        old.set(0,ecd.name());
        old.set(1,ecd.layoutFile());
        old.set(2,ecd.extension());
        table.revalidate();
        table.repaint();
        Globals.prefs.customExports.store();
      }
    }
  }
);
  JButton remove=new JButton(Localization.lang("Remove"));
  remove.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int[] rows=table.getSelectedRows();
      if (rows.length == 0) {
        return;
      }
      List<List<String>> entries=new ArrayList<>();
      for (int i=0; i < rows.length; i++) {
        entries.add(Globals.prefs.customExports.getSortedList().get(rows[i]));
      }
      for (      List<String> list : entries) {
        Globals.prefs.customExports.remove(list);
      }
      Globals.prefs.customExports.store();
    }
  }
);
  AbstractAction closeAction=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
;
  JButton close=new JButton(Localization.lang("Close"));
  close.addActionListener(closeAction);
  JButton help=new HelpAction(HelpFiles.exportCustomizationHelp).getHelpButton();
  DefaultEventTableModel<List<String>> tableModel=new DefaultEventTableModel<>(Globals.prefs.customExports.getSortedList(),new ExportTableFormat());
  table=new JTable(tableModel);
  TableColumnModel cm=table.getColumnModel();
  cm.getColumn(0).setPreferredWidth(GUIGlobals.EXPORT_DIALOG_COL_0_WIDTH);
  cm.getColumn(1).setPreferredWidth(GUIGlobals.EXPORT_DIALOG_COL_1_WIDTH);
  cm.getColumn(2).setPreferredWidth(GUIGlobals.EXPORT_DIALOG_COL_2_WIDTH);
  JScrollPane sp=new JScrollPane(table,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.setPreferredScrollableViewportSize(new Dimension(500,150));
  if (table.getRowCount() > 0) {
    table.setRowSelectionInterval(0,0);
  }
  JPanel main=new JPanel();
  ActionMap am=main.getActionMap();
  InputMap im=main.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(Globals.getKeyPrefs().getKey(KeyBinding.CLOSE_DIALOG),"close");
  am.put("close",closeAction);
  main.setLayout(new BorderLayout());
  main.add(sp,BorderLayout.CENTER);
  JPanel buttons=new JPanel();
  ButtonBarBuilder bb=new ButtonBarBuilder(buttons);
  buttons.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
  bb.addGlue();
  bb.addButton(addExport);
  bb.addButton(modify);
  bb.addButton(remove);
  bb.addButton(close);
  bb.addUnrelatedGap();
  bb.addButton(help);
  bb.addGlue();
  getContentPane().add(main,BorderLayout.CENTER);
  getContentPane().add(buttons,BorderLayout.SOUTH);
  pack();
  PositionWindow.placeDialog(this,frame);
  new FocusRequester(table);
}
