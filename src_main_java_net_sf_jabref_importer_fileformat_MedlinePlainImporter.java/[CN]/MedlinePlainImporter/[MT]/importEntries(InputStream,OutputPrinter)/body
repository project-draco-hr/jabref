{
  ArrayList<BibEntry> bibitems=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  BufferedReader in=new BufferedReader(ImportFormatReader.getReaderDefaultEncoding(stream));
  String str;
  while ((str=in.readLine()) != null) {
    sb.append(str);
    sb.append('\n');
  }
  String[] entries=sb.toString().replace("\u2013","-").replace("\u2014","--").replace("\u2015","--").split("\\n\\n");
  for (  String entry1 : entries) {
    if (entry1.trim().isEmpty() || !entry1.contains("-")) {
      continue;
    }
    String type="";
    String author="";
    String editor="";
    String comment="";
    HashMap<String,String> hm=new HashMap<>();
    String[] fields=entry1.split("\n");
    for (int j=0; j < fields.length; j++) {
      StringBuilder current=new StringBuilder(fields[j]);
      boolean done=false;
      while (!done && (j < (fields.length - 1))) {
        if (fields[j + 1].length() <= 4) {
          j++;
          continue;
        }
        if (fields[j + 1].charAt(4) != '-') {
          if ((current.length() > 0) && !Character.isWhitespace(current.charAt(current.length() - 1))) {
            current.append(' ');
          }
          current.append(fields[j + 1].trim());
          j++;
        }
 else {
          done=true;
        }
      }
      String entry=current.toString();
      String lab=entry.substring(0,entry.indexOf('-')).trim();
      String val=entry.substring(entry.indexOf('-') + 1).trim();
      if ("PT".equals(lab)) {
        val=val.toLowerCase();
        if ("book".equals(val)) {
          type="book";
        }
 else         if ("journal article".equals(val) || "classical article".equals(val) || "corrected and republished article".equals(val)|| "historical article".equals(val)|| "introductory journal article".equals(val)|| "newspaper article".equals(val)) {
          type="article";
        }
 else         if ("clinical conference".equals(val) || "consensus development conference".equals(val) || "consensus development conference, nih".equals(val)) {
          type="conference";
        }
 else         if ("technical report".equals(val)) {
          type="techreport";
        }
 else         if ("editorial".equals(val)) {
          type="inproceedings";
        }
 else         if ("overall".equals(val)) {
          type="proceedings";
        }
 else         if ("".equals(type)) {
          type="other";
        }
      }
 else       if ("TI".equals(lab)) {
        String oldVal=hm.get("title");
        if (oldVal == null) {
          hm.put("title",val);
        }
 else {
          if (oldVal.endsWith(":") || oldVal.endsWith(".") || oldVal.endsWith("?")) {
            hm.put("title",oldVal + " " + val);
          }
 else {
            hm.put("title",oldVal + ": " + val);
          }
        }
      }
 else       if ("BTI".equals(lab) || "CTI".equals(lab)) {
        hm.put("booktitle",val);
      }
 else       if ("FAU".equals(lab)) {
        if ("".equals(author)) {
          author=val;
        }
 else {
          author+=" and " + val;
        }
      }
 else       if ("FED".equals(lab)) {
        if ("".equals(editor)) {
          editor=val;
        }
 else {
          editor+=" and " + val;
        }
      }
 else       if ("JT".equals(lab)) {
        if ("inproceedings".equals(type)) {
          hm.put("booktitle",val);
        }
 else {
          hm.put("journal",val);
        }
      }
 else       if ("PG".equals(lab)) {
        hm.put("pages",val);
      }
 else       if ("PL".equals(lab)) {
        hm.put("address",val);
      }
 else       if ("IS".equals(lab)) {
        hm.put("issn",val);
      }
 else       if ("VI".equals(lab)) {
        hm.put("volume",val);
      }
 else       if ("AB".equals(lab)) {
        String oldAb=hm.get("abstract");
        if (oldAb == null) {
          hm.put("abstract",val);
        }
 else {
          hm.put("abstract",oldAb + "\n" + val);
        }
      }
 else       if ("DP".equals(lab)) {
        String[] parts=val.split(" ");
        hm.put("year",parts[0]);
        if ((parts.length > 1) && !parts[1].isEmpty()) {
          hm.put("month",parts[1]);
        }
      }
 else       if ("MH".equals(lab) || "OT".equals(lab)) {
        if (!hm.containsKey("keywords")) {
          hm.put("keywords",val);
        }
 else {
          String kw=hm.get("keywords");
          hm.put("keywords",kw + ", " + val);
        }
      }
 else       if ("CON".equals(lab) || "CIN".equals(lab) || "EIN".equals(lab)|| "EFR".equals(lab)|| "CRI".equals(lab)|| "CRF".equals(lab)|| "PRIN".equals(lab)|| "PROF".equals(lab)|| "RPI".equals(lab)|| "RPF".equals(lab)|| "RIN".equals(lab)|| "ROF".equals(lab)|| "UIN".equals(lab)|| "UOF".equals(lab)|| "SPIN".equals(lab)|| "ORI".equals(lab)) {
        if (!comment.isEmpty()) {
          comment=comment + "\n";
        }
        comment=comment + val;
      }
 else       if ("AID".equals(lab)) {
        String doi=val;
        if (doi.startsWith("doi:")) {
          doi=doi.replaceAll("(?i)doi:","").trim();
          hm.put("doi",doi);
        }
      }
    }
    if (!author.isEmpty()) {
      author=AuthorList.fixAuthor_lastNameFirst(author);
      hm.put("author",author);
    }
    if (!editor.isEmpty()) {
      editor=AuthorList.fixAuthor_lastNameFirst(editor);
      hm.put("editor",editor);
    }
    if (!comment.isEmpty()) {
      hm.put("comment",comment);
    }
    BibEntry b=new BibEntry(DEFAULT_BIBTEXENTRY_ID,type);
    ArrayList<Object> toRemove=new ArrayList<>();
    for (    Map.Entry<String,String> key : hm.entrySet()) {
      String content=key.getValue();
      if (content.trim().isEmpty()) {
        toRemove.add(key.getKey());
      }
    }
    for (    Object aToRemove : toRemove) {
      hm.remove(aToRemove);
    }
    b.setField(hm);
    bibitems.add(b);
  }
  return bibitems;
}
