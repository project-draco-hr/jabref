{
  List<BibEntry> entryList=new LinkedList<>();
  String cleanQuery=query.trim().replace(';',',');
  if (cleanQuery.matches("\\d+[,\\d+]*")) {
    System.out.println("Fetching Medline by id...");
    List<BibEntry> bibs=fetchMedline(cleanQuery);
    if (bibs.isEmpty()) {
      System.out.println("No references found");
    }
    for (    BibEntry entry : bibs) {
      entryList.add(entry);
    }
    return entryList;
  }
  if (!query.isEmpty()) {
    System.out.println("Fetching Medline by term...");
    String searchTerm=toSearchTerm(query);
    SearchResult result=getIds(searchTerm,0,1);
    if (result.count == 0) {
      System.out.println("No references found");
      return Collections.emptyList();
    }
    int numberToFetch=result.count;
    if (numberToFetch > MedlineFetcher.PACING) {
      numberToFetch=20;
    }
    for (int i=0; i < numberToFetch; i+=MedlineFetcher.PACING) {
      int noToFetch=Math.min(MedlineFetcher.PACING,numberToFetch - i);
      result=getIds(searchTerm,i,noToFetch);
      List<BibEntry> bibs=fetchMedline(result.ids);
      for (      BibEntry entry : bibs) {
        entryList.add(entry);
      }
    }
    return entryList;
  }
  System.out.println("Please enter a comma separated list of Medline IDs (numbers) or search terms.");
  System.out.println("Input error");
  return Collections.emptyList();
}
