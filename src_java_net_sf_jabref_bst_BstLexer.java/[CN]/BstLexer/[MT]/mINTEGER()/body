{
  try {
    ruleNestingLevel++;
    int type=INTEGER;
    int start=getCharIndex();
    int line=getLine();
    int charPosition=getCharPositionInLine();
    int channel=Token.DEFAULT_CHANNEL;
{
      match('#');
      int alt3=2;
      int LA3_0=input.LA(1);
      if ((LA3_0 == '+' || LA3_0 == '-')) {
        alt3=1;
      }
switch (alt3) {
case 1:
{
          if (input.LA(1) == '+' || input.LA(1) == '-') {
            input.consume();
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recover(mse);
            throw mse;
          }
        }
      break;
  }
  int cnt4=0;
  loop4:   do {
    int alt4=2;
    int LA4_0=input.LA(1);
    if (((LA4_0 >= '0' && LA4_0 <= '9'))) {
      alt4=1;
    }
switch (alt4) {
case 1:
{
        mNUMERAL();
      }
    break;
default :
  if (cnt4 >= 1)   break loop4;
EarlyExitException eee=new EarlyExitException(4,input);
throw eee;
}
cnt4++;
}
 while (true);
}
if (token == null && ruleNestingLevel == 1) {
emit(type,line,charPosition,channel,start,getCharIndex() - 1);
}
}
  finally {
ruleNestingLevel--;
}
}
