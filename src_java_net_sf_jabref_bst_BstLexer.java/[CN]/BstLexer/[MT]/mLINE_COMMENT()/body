{
  try {
    ruleNestingLevel++;
    int type=LINE_COMMENT;
    int start=getCharIndex();
    int line=getLine();
    int charPosition=getCharPositionInLine();
    int channel=Token.DEFAULT_CHANNEL;
{
      match('%');
      loop6:       do {
        int alt6=2;
        int LA6_0=input.LA(1);
        if (((LA6_0 >= '\u0000' && LA6_0 <= '\t') || (LA6_0 >= '\u000B' && LA6_0 <= '\f') || (LA6_0 >= '\u000E' && LA6_0 <= '\uFFFE'))) {
          alt6=1;
        }
switch (alt6) {
case 1:
{
            if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\t') || (input.LA(1) >= '\u000B' && input.LA(1) <= '\f') || (input.LA(1) >= '\u000E' && input.LA(1) <= '\uFFFE')) {
              input.consume();
            }
 else {
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recover(mse);
              throw mse;
            }
          }
        break;
default :
      break loop6;
  }
}
 while (true);
int alt7=2;
int LA7_0=input.LA(1);
if ((LA7_0 == '\r')) {
  alt7=1;
}
switch (alt7) {
case 1:
{
    match('\r');
  }
break;
}
match('\n');
channel=99;
}
if (token == null && ruleNestingLevel == 1) {
emit(type,line,charPosition,channel,start,getCharIndex() - 1);
}
}
  finally {
ruleNestingLevel--;
}
}
