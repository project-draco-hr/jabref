{
  if (e.getSource() == escape) {
    incSearch=false;
    if (panel != null) {
      Thread t=new Thread(){
        public void run(){
          clearSearch();
        }
      }
;
      SwingUtilities.invokeLater(t);
    }
  }
 else   if (((e.getSource() == searchField) || (e.getSource() == search)) && !increment.isSelected() && (panel != null)) {
    updatePrefs();
    if (searchField.getText().equals("")) {
      panel.stopShowingSearchResults();
      return;
    }
    Hashtable<String,String> searchOptions=new Hashtable<String,String>();
    searchOptions.put("option",searchField.getText());
    SearchRuleSet searchRules=new SearchRuleSet();
    SearchRule rule1;
    rule1=new BasicSearch(Globals.prefs.getBoolean("caseSensitiveSearch"),Globals.prefs.getBoolean("regExpSearch"));
    try {
      rule1=new SearchExpression(Globals.prefs,searchOptions);
    }
 catch (    Exception ex) {
    }
    searchRules.addRule(rule1);
    SearchWorker worker=new SearchWorker(searchRules,searchOptions);
    worker.getWorker().run();
    worker.getCallBack().update();
    escape.setEnabled(true);
  }
}
