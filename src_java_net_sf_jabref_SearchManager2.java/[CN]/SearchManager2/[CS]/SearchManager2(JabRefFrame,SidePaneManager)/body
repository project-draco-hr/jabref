{
  super(manager,GUIGlobals.getIconUrl("search"),Globals.lang("Search"));
  this.frame=frame;
  incSearcher=new IncrementalSearcher(Globals.prefs);
  searchReq=new JCheckBoxMenuItem(Globals.lang("Search required fields"),Globals.prefs.getBoolean("searchReq"));
  searchOpt=new JCheckBoxMenuItem(Globals.lang("Search optional fields"),Globals.prefs.getBoolean("searchOpt"));
  searchGen=new JCheckBoxMenuItem(Globals.lang("Search general fields"),Globals.prefs.getBoolean("searchGen"));
  searchAll=new JCheckBoxMenuItem(Globals.lang("Search all fields"),Globals.prefs.getBoolean("searchAll"));
  regExpSearch=new JCheckBoxMenuItem(Globals.lang("Use regular expressions"),Globals.prefs.getBoolean("regExpSearch"));
  increment=new JRadioButton(Globals.lang("Incremental"),false);
  floatSearch=new JRadioButton(Globals.lang("Float"),true);
  hideSearch=new JRadioButton(Globals.lang("Filter"),true);
  showResultsInDialog=new JRadioButton(Globals.lang("Show results in dialog"),true);
  searchAllBases=new JRadioButton(Globals.lang("Global search"),Globals.prefs.getBoolean("searchAllBases"));
  types.add(increment);
  types.add(floatSearch);
  types.add(hideSearch);
  types.add(showResultsInDialog);
  types.add(searchAllBases);
  select=new JCheckBoxMenuItem(Globals.lang("Select matches"),false);
  increment.setToolTipText(Globals.lang("Incremental search"));
  floatSearch.setToolTipText(Globals.lang("Gray out non-matching entries"));
  hideSearch.setToolTipText(Globals.lang("Hide non-matching entries"));
  showResultsInDialog.setToolTipText(Globals.lang("Show search results in a window"));
  increment.addItemListener(this);
  floatSearch.addItemListener(this);
  hideSearch.addItemListener(this);
  showResultsInDialog.addItemListener(this);
  searchField.addFocusListener(Globals.focusListener);
  if (searchAll.isSelected()) {
    searchReq.setEnabled(false);
    searchOpt.setEnabled(false);
    searchGen.setEnabled(false);
  }
  searchAll.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      boolean state=!searchAll.isSelected();
      searchReq.setEnabled(state);
      searchOpt.setEnabled(state);
      searchGen.setEnabled(state);
    }
  }
);
  caseSensitive=new JCheckBoxMenuItem(Globals.lang("Case sensitive"),Globals.prefs.getBoolean("caseSensitiveSearch"));
  settings.add(select);
  settings.addSeparator();
  settings.add(caseSensitive);
  settings.add(regExpSearch);
  searchField.addActionListener(this);
  searchField.addCaretListener(this);
  search.addActionListener(this);
  searchField.addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      if (increment.isSelected())       searchField.setText("");
    }
    public void focusLost(    FocusEvent e){
      incSearch=false;
      incSearchPos=-1;
      if (increment.isSelected()) {
      }
    }
  }
);
  escape.addActionListener(this);
  escape.setEnabled(false);
  openset.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (settings.isVisible()) {
      }
 else {
        JButton src=(JButton)e.getSource();
        settings.show(src,0,openset.getHeight());
      }
    }
  }
);
  Insets margin=new Insets(0,2,0,2);
  escape.setMargin(margin);
  openset.setMargin(margin);
  int butSize=help.getIcon().getIconHeight() + 5;
  Dimension butDim=new Dimension(butSize,butSize);
  help.setPreferredSize(butDim);
  help.setMinimumSize(butDim);
  help.setMargin(margin);
  help.addActionListener(new HelpAction(Globals.helpDiag,GUIGlobals.searchHelp,"Help"));
  if (Globals.prefs.getBoolean("incrementS"))   increment.setSelected(true);
 else   if (Globals.prefs.getBoolean("grayOutNonHits"))   floatSearch.setSelected(true);
 else   if (Globals.prefs.getBoolean("showSearchInDialog"))   showResultsInDialog.setSelected(true);
 else   if (Globals.prefs.getBoolean("searchAllBases"))   searchAllBases.setSelected(true);
 else   hideSearch.setSelected(true);
  JPanel main=new JPanel();
  main.setLayout(gbl);
  con.gridwidth=GridBagConstraints.REMAINDER;
  con.fill=GridBagConstraints.BOTH;
  con.weightx=1;
  gbl.setConstraints(searchField,con);
  main.add(searchField);
  gbl.setConstraints(search,con);
  main.add(search);
  con.gridwidth=GridBagConstraints.REMAINDER;
  gbl.setConstraints(escape,con);
  main.add(escape);
  con.insets=new Insets(0,2,0,0);
  gbl.setConstraints(increment,con);
  main.add(increment);
  gbl.setConstraints(floatSearch,con);
  main.add(floatSearch);
  gbl.setConstraints(hideSearch,con);
  main.add(hideSearch);
  gbl.setConstraints(showResultsInDialog,con);
  main.add(showResultsInDialog);
  gbl.setConstraints(searchAllBases,con);
  main.add(searchAllBases);
  con.insets=new Insets(0,0,0,0);
  JPanel pan=new JPanel();
  GridBagLayout gb=new GridBagLayout();
  gbl.setConstraints(pan,con);
  pan.setLayout(gb);
  con.weightx=1;
  con.gridwidth=1;
  gb.setConstraints(openset,con);
  pan.add(openset);
  con.weightx=0;
  gb.setConstraints(help,con);
  pan.add(help);
  main.add(pan);
  main.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));
  setContent(main);
  searchField.getInputMap().put(Globals.prefs.getKey("Repeat incremental search"),"repeat");
  searchField.getActionMap().put("repeat",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (increment.isSelected())       repeatIncremental();
    }
  }
);
  searchField.getInputMap().put(Globals.prefs.getKey("Clear search"),"escape");
  searchField.getActionMap().put("escape",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      hideAway();
    }
  }
);
  setSearchButtonSizes();
  updateSearchButtonText();
}
