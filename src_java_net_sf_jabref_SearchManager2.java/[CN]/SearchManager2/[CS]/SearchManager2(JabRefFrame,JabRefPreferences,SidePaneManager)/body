{
  super(manager);
  this.frame=frame;
  prefs=prefs_;
  incSearcher=new IncrementalSearcher(prefs);
  searchReq=new JCheckBoxMenuItem(Globals.lang("Search required fields"),prefs.getBoolean("searchReq"));
  searchOpt=new JCheckBoxMenuItem(Globals.lang("Search optional fields"),prefs.getBoolean("searchOpt"));
  searchGen=new JCheckBoxMenuItem(Globals.lang("Search general fields"),prefs.getBoolean("searchGen"));
  searchAll=new JCheckBoxMenuItem(Globals.lang("Search all fields"),prefs.getBoolean("searchAll"));
  regExpSearch=new JCheckBoxMenuItem(Globals.lang("Use regular expressions"),prefs.getBoolean("regExpSearch"));
  hideNonHits=new JRadioButtonMenuItem(Globals.lang("Hide non-hits"),!prefs.getBoolean("grayOutNonHits"));
  grayOut=new JRadioButtonMenuItem(Globals.lang("Gray out non-hits"),prefs.getBoolean("grayOutNonHits"));
  increment=new JRadioButton(Globals.lang("Incremental"),false);
  highlight=new JRadioButton(Globals.lang("Highlight"),true);
  reorder=new JRadioButton(Globals.lang("Float"),false);
  types.add(increment);
  types.add(highlight);
  types.add(reorder);
  nonHits.add(hideNonHits);
  nonHits.add(grayOut);
  select=new JCheckBoxMenuItem(Globals.lang("Select matches"),false);
  increment.setToolTipText(Globals.lang("Incremental search"));
  highlight.setToolTipText(Globals.lang("Gray out non-matching entries"));
  reorder.setToolTipText(Globals.lang("Move matching entries to the top"));
  increment.addItemListener(this);
  reorder.addItemListener(this);
  searchField.addFocusListener(Globals.focusListener);
  if (searchAll.isSelected()) {
    searchReq.setEnabled(false);
    searchOpt.setEnabled(false);
    searchGen.setEnabled(false);
  }
  caseSensitive=new JCheckBoxMenuItem(Globals.lang("Case sensitive"),prefs.getBoolean("caseSensitiveSearch"));
  settings.add(select);
  settings.addSeparator();
  settings.add(searchReq);
  settings.add(searchOpt);
  settings.add(searchGen);
  settings.addSeparator();
  settings.add(searchAll);
  settings.addSeparator();
  settings.add(caseSensitive);
  settings.add(regExpSearch);
  settings.addSeparator();
  settings.add(grayOut);
  settings.add(hideNonHits);
  searchField.addActionListener(this);
  search.addActionListener(this);
  searchField.addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      if (increment.isSelected())       searchField.setText("");
    }
    public void focusLost(    FocusEvent e){
      incSearch=false;
      incSearchPos=-1;
      if (increment.isSelected()) {
      }
    }
  }
);
  escape.addActionListener(this);
  openset.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (settings.isVisible()) {
      }
 else {
        JButton src=(JButton)e.getSource();
        settings.show(src,0,openset.getHeight());
      }
    }
  }
);
  Insets margin=new Insets(0,2,0,2);
  escape.setMargin(margin);
  openset.setMargin(margin);
  Dimension butDim=new Dimension(20,20);
  help.setPreferredSize(butDim);
  help.setMinimumSize(butDim);
  help.setMargin(margin);
  help.addActionListener(new HelpAction(frame.helpDiag,GUIGlobals.searchHelp,"Help"));
  if (prefs.getBoolean("incrementS"))   increment.setSelected(true);
 else   if (!prefs.getBoolean("selectS"))   reorder.setSelected(true);
  setLayout(gbl);
  SidePaneHeader header=new SidePaneHeader("Search",GUIGlobals.searchIconFile,this);
  con.gridwidth=GridBagConstraints.REMAINDER;
  con.fill=GridBagConstraints.BOTH;
  con.weightx=1;
  con.insets=new Insets(0,0,2,0);
  gbl.setConstraints(header,con);
  add(header);
  con.insets=new Insets(0,0,0,0);
  gbl.setConstraints(searchField,con);
  add(searchField);
  con.gridwidth=1;
  gbl.setConstraints(search,con);
  add(search);
  con.gridwidth=GridBagConstraints.REMAINDER;
  gbl.setConstraints(escape,con);
  add(escape);
  con.insets=new Insets(0,2,0,0);
  gbl.setConstraints(increment,con);
  add(increment);
  gbl.setConstraints(highlight,con);
  add(highlight);
  gbl.setConstraints(reorder,con);
  add(reorder);
  con.insets=new Insets(0,0,0,0);
  JPanel pan=new JPanel();
  GridBagLayout gb=new GridBagLayout();
  gbl.setConstraints(pan,con);
  pan.setLayout(gb);
  con.weightx=1;
  con.gridwidth=1;
  gb.setConstraints(openset,con);
  pan.add(openset);
  con.weightx=0;
  gb.setConstraints(help,con);
  pan.add(help);
  add(pan);
  searchField.getInputMap().put(prefs.getKey("Repeat incremental search"),"repeat");
  searchField.getActionMap().put("repeat",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (increment.isSelected())       repeatIncremental();
    }
  }
);
  searchField.getInputMap().put(prefs.getKey("Clear search"),"escape");
  searchField.getActionMap().put("escape",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      ths.actionPerformed(new ActionEvent(escape,0,""));
    }
  }
);
}
