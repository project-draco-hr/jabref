{
  _prefs=prefs;
  setLayout(new BorderLayout());
  Vector<String> v=new Vector<String>(Arrays.asList(BibtexFields.getAllFieldNames()));
  v.add(BibtexFields.KEY_FIELD);
  Collections.sort(v);
  Object[] allPlusKey=v.toArray();
  priSort=new JComboBox(allPlusKey);
  secSort=new JComboBox(allPlusKey);
  terSort=new JComboBox(allPlusKey);
  autoResizeMode=new JCheckBox(Globals.lang("Fit table horizontally on screen"));
  namesAsIs=new JRadioButton(Globals.lang("Show names unchanged"));
  namesFf=new JRadioButton(Globals.lang("Show 'Firstname Lastname'"));
  namesFl=new JRadioButton(Globals.lang("Show 'Lastname, Firstname'"));
  namesNatbib=new JRadioButton(Globals.lang("Natbib style"));
  noAbbrNames=new JRadioButton(Globals.lang("Do not abbreviate names"));
  abbrNames=new JRadioButton(Globals.lang("Abbreviate names"));
  lastNamesOnly=new JRadioButton(Globals.lang("Show last names only"));
  fileColumn=new JCheckBox(Globals.lang("Show file column"));
  pdfColumn=new JCheckBox(Globals.lang("Show PDF/PS column"));
  urlColumn=new JCheckBox(Globals.lang("Show URL/DOI column"));
  arxivColumn=new JCheckBox(Globals.lang("Show ArXiv column"));
  floatMarked=new JCheckBox(Globals.lang("Float marked entries"));
  priField=new JTextField(10);
  secField=new JTextField(10);
  terField=new JTextField(10);
  numericFields=new JTextField(30);
  priSort.insertItemAt(Globals.lang("<select>"),0);
  secSort.insertItemAt(Globals.lang("<select>"),0);
  terSort.insertItemAt(Globals.lang("<select>"),0);
  priSort.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (priSort.getSelectedIndex() > 0) {
        priField.setText(priSort.getSelectedItem().toString());
        priSort.setSelectedIndex(0);
      }
    }
  }
);
  secSort.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (secSort.getSelectedIndex() > 0) {
        secField.setText(secSort.getSelectedItem().toString());
        secSort.setSelectedIndex(0);
      }
    }
  }
);
  terSort.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (terSort.getSelectedIndex() > 0) {
        terField.setText(terSort.getSelectedItem().toString());
        terSort.setSelectedIndex(0);
      }
    }
  }
);
  ButtonGroup bg=new ButtonGroup();
  bg.add(namesAsIs);
  bg.add(namesNatbib);
  bg.add(namesFf);
  bg.add(namesFl);
  ButtonGroup bg2=new ButtonGroup();
  bg2.add(lastNamesOnly);
  bg2.add(abbrNames);
  bg2.add(noAbbrNames);
  priDesc=new JCheckBox(Globals.lang("Descending"));
  secDesc=new JCheckBox(Globals.lang("Descending"));
  terDesc=new JCheckBox(Globals.lang("Descending"));
  FormLayout layout=new FormLayout("1dlu, 8dlu, left:pref, 4dlu, fill:pref, 4dlu, fill:60dlu, 4dlu, fill:pref","");
  DefaultFormBuilder builder=new DefaultFormBuilder(layout);
  JLabel lab;
  JPanel pan=new JPanel();
  HelpAction help=new HelpAction(frame.helpDiag,GUIGlobals.specialFieldsHelp,"Help on key patterns");
  hlb=new JButton(GUIGlobals.getImage("helpSmall"));
  hlb.setToolTipText(Globals.lang("Help on special fields"));
  hlb.addActionListener(help);
  specialFieldsEnabled=new JCheckBox(Globals.lang("Enable special fields"));
  specialFieldsEnabled.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      boolean isEnabled=specialFieldsEnabled.isSelected();
      rankingColumn.setEnabled(isEnabled);
      compactRankingColumn.setEnabled(isEnabled ? rankingColumn.isSelected() : false);
      qualityColumn.setEnabled(isEnabled);
      priorityColumn.setEnabled(isEnabled);
      relevanceColumn.setEnabled(isEnabled);
      syncKeywords.setEnabled(isEnabled);
      writeSpecialFields.setEnabled(isEnabled);
    }
  }
);
  rankingColumn=new JCheckBox(Globals.lang("Show ranking"));
  rankingColumn.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      compactRankingColumn.setEnabled(rankingColumn.isSelected());
    }
  }
);
  compactRankingColumn=new JCheckBox(Globals.lang("Compact ranking"));
  qualityColumn=new JCheckBox(Globals.lang("Show quality"));
  priorityColumn=new JCheckBox(Globals.lang("Show priority"));
  relevanceColumn=new JCheckBox(Globals.lang("Show relevance"));
  syncKeywords=new JRadioButton(Globals.lang("Synchronize with keywords"));
  writeSpecialFields=new JRadioButton(Globals.lang("Write values of special fields as separate fields to BibTeX"));
  ButtonGroup group=new ButtonGroup();
  group.add(syncKeywords);
  group.add(writeSpecialFields);
  builder.appendSeparator(Globals.lang("Special table columns"));
  builder.nextLine();
  builder.append(pan);
  DefaultFormBuilder specialTableColumnsBuilder=new DefaultFormBuilder(new FormLayout("8dlu, 8dlu, 8cm, 8dlu, left:pref","pref, pref, pref, pref, pref, pref, pref, pref, pref"));
  CellConstraints cc=new CellConstraints();
  specialTableColumnsBuilder.add(specialFieldsEnabled,cc.xyw(1,1,3));
  specialTableColumnsBuilder.add(rankingColumn,cc.xyw(2,2,2));
  specialTableColumnsBuilder.add(compactRankingColumn,cc.xy(3,3));
  specialTableColumnsBuilder.add(relevanceColumn,cc.xyw(2,4,2));
  specialTableColumnsBuilder.add(qualityColumn,cc.xyw(2,5,2));
  specialTableColumnsBuilder.add(priorityColumn,cc.xyw(2,6,2));
  specialTableColumnsBuilder.add(syncKeywords,cc.xyw(2,7,2));
  specialTableColumnsBuilder.add(writeSpecialFields,cc.xyw(2,8,2));
  specialTableColumnsBuilder.add(hlb,cc.xyw(1,9,2));
  specialTableColumnsBuilder.add(fileColumn,cc.xy(5,1));
  specialTableColumnsBuilder.add(pdfColumn,cc.xy(5,2));
  specialTableColumnsBuilder.add(urlColumn,cc.xy(5,3));
  specialTableColumnsBuilder.add(arxivColumn,cc.xy(5,4));
  builder.append(specialTableColumnsBuilder.getPanel());
  builder.nextLine();
  builder.appendSeparator(Globals.lang("Format of author and editor names"));
  DefaultFormBuilder nameBuilder=new DefaultFormBuilder(new FormLayout("left:pref, 8dlu, left:pref",""));
  nameBuilder.append(namesAsIs);
  nameBuilder.append(noAbbrNames);
  nameBuilder.nextLine();
  nameBuilder.append(namesFf);
  nameBuilder.append(abbrNames);
  nameBuilder.nextLine();
  nameBuilder.append(namesFl);
  nameBuilder.append(lastNamesOnly);
  nameBuilder.nextLine();
  nameBuilder.append(namesNatbib);
  builder.append(pan);
  builder.append(nameBuilder.getPanel());
  builder.nextLine();
  builder.appendSeparator(Globals.lang("Default sort criteria"));
  FormLayout layout2=new FormLayout("left:pref, 8dlu, fill:pref, 4dlu, fill:60dlu, 4dlu, left:pref","");
  DefaultFormBuilder builder2=new DefaultFormBuilder(layout2);
  lab=new JLabel(Globals.lang("Primary sort criterion"));
  builder2.append(lab);
  builder2.append(priSort);
  builder2.append(priField);
  builder2.append(priDesc);
  builder2.nextLine();
  lab=new JLabel(Globals.lang("Secondary sort criterion"));
  builder2.append(lab);
  builder2.append(secSort);
  builder2.append(secField);
  builder2.append(secDesc);
  builder2.nextLine();
  lab=new JLabel(Globals.lang("Tertiary sort criterion"));
  builder2.append(lab);
  builder2.append(terSort);
  builder2.append(terField);
  builder2.append(terDesc);
  builder.nextLine();
  builder.append(pan);
  builder.append(builder2.getPanel());
  builder.nextLine();
  builder.append(pan);
  builder.append(floatMarked);
  builder.nextLine();
  builder.append(pan);
  builder2=new DefaultFormBuilder(new FormLayout("left:pref, 8dlu, fill:pref",""));
  builder2.append(Globals.lang("Sort the following fields as numeric fields") + ":");
  builder2.append(numericFields);
  builder.append(builder2.getPanel(),5);
  builder.nextLine();
  builder.appendSeparator(Globals.lang("General"));
  builder.append(pan);
  builder.append(autoResizeMode);
  builder.nextLine();
  pan=builder.getPanel();
  pan.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  add(pan,BorderLayout.CENTER);
  namesNatbib.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent changeEvent){
      abbrNames.setEnabled(!namesNatbib.isSelected());
      lastNamesOnly.setEnabled(!namesNatbib.isSelected());
      noAbbrNames.setEnabled(!namesNatbib.isSelected());
    }
  }
);
}
