{
  if (stream == null) {
    throw new IOException("No stream given.");
  }
  ArrayList bibitems=new ArrayList();
  StringBuffer sb=new StringBuffer();
  BufferedReader in=new BufferedReader(ImportFormatReader.getReaderDefaultEncoding(stream));
  String str;
  while ((str=in.readLine()) != null) {
    if (str.length() < 3)     continue;
    if (str.substring(0,3).equals("PT "))     sb.append("::").append(str);
 else {
      String beg=str.substring(0,3).trim();
      if (beg.length() == 2) {
        sb.append(" ## ");
        sb.append(str);
      }
 else {
        sb.append("EOLEOL");
        sb.append(str.trim());
      }
    }
  }
  String[] entries=sb.toString().split("::");
  HashMap hm=new HashMap();
  for (int i=0; i < entries.length; i++) {
    String[] fields=entries[i].split(" ## ");
    if (fields.length == 0)     fields=entries[i].split("\n");
    String Type="";
    String PT="";
    String pages="";
    hm.clear();
    nextField:     for (int j=0; j < fields.length; j++) {
      if (fields[j].length() <= 2)       continue;
      String beg=fields[j].substring(0,2);
      String value=fields[j].substring(3);
      if (value.startsWith(" - ")) {
        value=value.substring(3);
      }
      value=value.trim();
      if (beg.equals("PT")) {
        if (value.startsWith("J")) {
          PT="article";
        }
 else {
          PT=value;
        }
        Type="article";
      }
 else       if (beg.equals("TY")) {
        if ("JOUR".equals(value))         Type="article";
 else         if ("CONF".equals(value))         Type="inproceedings";
      }
 else       if (beg.equals("JO"))       hm.put("booktitle",value);
 else       if (beg.equals("AU")) {
        String author=isiAuthorsConvert(value.replaceAll("EOLEOL"," and "));
        if (hm.get("author") != null)         author=(String)hm.get("author") + " and " + author;
        hm.put("author",author);
      }
 else       if (beg.equals("TI"))       hm.put("title",value.replaceAll("EOLEOL"," "));
 else       if (beg.equals("SO") || beg.equals("JA"))       hm.put("journal",value.replaceAll("EOLEOL"," "));
 else       if (beg.equals("ID") || beg.equals("KW")) {
        value=value.replaceAll("EOLEOL"," ");
        String existingKeywords=(String)hm.get("keywords");
        if (existingKeywords != null && existingKeywords.indexOf(value) == -1) {
          existingKeywords+=", " + value;
        }
 else {
          existingKeywords=value;
        }
        hm.put("keywords",existingKeywords);
      }
 else       if (beg.equals("AB"))       hm.put("abstract",value.replaceAll("EOLEOL"," "));
 else       if (beg.equals("BP") || beg.equals("BR") || beg.equals("SP"))       pages=value;
 else       if (beg.equals("EP")) {
        int detpos=value.indexOf(' ');
        if (detpos != -1 && value.substring(0,detpos).trim().length() > 0)         value=value.substring(0,detpos);
        pages=pages + "--" + value;
      }
 else       if (beg.equals("PS")) {
        pages=parsePages(value);
      }
 else       if (beg.equals("AR"))       pages=value;
 else       if (beg.equals("IS"))       hm.put("number",value);
 else       if (beg.equals("PY"))       hm.put("year",value);
 else       if (beg.equals("VL"))       hm.put("volume",value);
 else       if (beg.equals("PU"))       hm.put("publisher",value);
 else       if (beg.equals("PD")) {
        String month=parseMonth(value);
        if (month != null) {
          hm.put("month",month);
          continue nextField;
        }
      }
 else       if (beg.equals("DT")) {
        Type=value;
        if (Type.equals("Review")) {
          Type="article";
        }
 else         if (Type.startsWith("Article") || Type.startsWith("Journal") || PT.equals("article")) {
          Type="article";
          continue;
        }
 else {
          Type="misc";
        }
      }
 else       if (beg.equals("CR")) {
        hm.put("CitedReferences",value.replaceAll("EOLEOL"," ; ").trim());
      }
 else {
        if (beg.equals("ER") || beg.equals("EF") || beg.equals("VR")|| beg.equals("FN"))         continue nextField;
        hm.put(beg,value);
      }
    }
    if (!"".equals(pages))     hm.put("pages",pages);
    if (hm.size() == 0)     continue;
    BibtexEntry b=new BibtexEntry(BibtexFields.DEFAULT_BIBTEXENTRY_ID,Globals.getEntryType(Type));
    ArrayList toRemove=new ArrayList();
    for (Iterator it=hm.keySet().iterator(); it.hasNext(); ) {
      Object key=it.next();
      String content=(String)hm.get(key);
      if ((content == null) || (content.trim().length() == 0))       toRemove.add(key);
    }
    for (Iterator iterator=toRemove.iterator(); iterator.hasNext(); ) {
      hm.remove(iterator.next());
    }
    processSubSup(hm);
    processCapitalization(hm);
    b.setField(hm);
    bibitems.add(b);
  }
  return bibitems;
}
