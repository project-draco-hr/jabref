{
  JabRefPreferences prefs=Globals.prefs;
  try {
    Preferences mainPrefsNode=Preferences.userNodeForPackage(JabRefMain.class);
    if (mainPrefsNode.get(JabRefPreferences.DEFAULT_BIBTEX_KEY_PATTERN,null) == null) {
      String oldDefault=mainPrefsNode.get("defaultLabelPattern",null);
      if (oldDefault != null) {
        prefs.put(JabRefPreferences.DEFAULT_BIBTEX_KEY_PATTERN,oldDefault);
        LOGGER.info("Upgraded old default key generator pattern '" + oldDefault + "' to new version.");
      }
    }
    if (mainPrefsNode.nodeExists("bibtexkeypatterns")) {
      return;
    }
    if (mainPrefsNode.nodeExists("logic/labelpattern")) {
      LOGGER.info("Found old Bibtex Key patterns which will be migrated to new version.");
      GlobalBibtexKeyPattern keyPattern=new GlobalBibtexKeyPattern(AbstractBibtexKeyPattern.split(prefs.get(JabRefPreferences.DEFAULT_BIBTEX_KEY_PATTERN)));
      Preferences oldPatternPrefs=mainPrefsNode.node("logic/labelpattern");
      for (      String key : oldPatternPrefs.keys()) {
        keyPattern.addBibtexKeyPattern(key,oldPatternPrefs.get(key,null));
      }
      prefs.putKeyPattern(keyPattern);
    }
  }
 catch (  BackingStoreException e) {
    LOGGER.error("Migrating old bibtexKeyPatterns failed.",e);
  }
}
