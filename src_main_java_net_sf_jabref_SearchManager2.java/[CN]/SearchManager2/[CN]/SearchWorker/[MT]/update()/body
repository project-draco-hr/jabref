{
  panel.output(Globals.lang("Searched database. Number of hits") + ": " + hits);
  if (searchAllBases.isSelected()) {
    if (startedFloatSearch) {
      panel.mainTable.stopShowingFloatSearch();
      startedFloatSearch=false;
    }
    if (startedFilterSearch) {
      panel.stopShowingSearchResults();
      startedFilterSearch=false;
    }
    instantiateSearchDialog();
    searchDialog.clear();
    for (int i=0; i < frame.getTabbedPane().getTabCount(); i++) {
      BasePanel p=frame.baseAt(i);
      for (      BibtexEntry entry : p.getDatabase().getEntries()) {
        if (entry.isSearchHit()) {
          searchDialog.addEntry(entry,p);
        }
      }
    }
    searchDialog.selectFirstEntry();
    searchDialog.setVisible(true);
  }
 else   if (showResultsInDialog.isSelected()) {
    if (startedFloatSearch) {
      panel.mainTable.stopShowingFloatSearch();
      startedFloatSearch=false;
    }
    if (startedFilterSearch) {
      panel.stopShowingSearchResults();
      startedFilterSearch=false;
    }
    instantiateSearchDialog();
    searchDialog.clear();
    for (    BibtexEntry entry : panel.getDatabase().getEntries()) {
      if (entry.isSearchHit()) {
        searchDialog.addEntry(entry,panel);
      }
    }
    searchDialog.selectFirstEntry();
    searchDialog.setVisible(true);
  }
 else   if (hideSearch.isSelected()) {
    if (startedFloatSearch) {
      panel.mainTable.stopShowingFloatSearch();
      startedFloatSearch=false;
    }
    startedFilterSearch=true;
    panel.setSearchMatcher(new SearchMatcher());
  }
 else {
    if (startedFilterSearch) {
      panel.stopShowingSearchResults();
      startedFilterSearch=false;
    }
    startedFloatSearch=true;
    panel.mainTable.showFloatSearch(new SearchMatcher());
  }
  searchField.select(0,searchField.getText().length());
}
