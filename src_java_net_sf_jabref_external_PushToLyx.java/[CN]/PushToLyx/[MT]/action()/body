{
  final BibtexEntry[] entries=panel.getSelectedEntries();
  if (entries == null)   return;
  final int numSelected=entries.length;
  final File lyxpipe=new File(Globals.prefs.get("lyxpipe") + ".in");
  if (!lyxpipe.exists() || !lyxpipe.canWrite()) {
    panel.output(Globals.lang("Error") + ": " + Globals.lang("verify that LyX is running and that the lyxpipe is valid")+ ". ["+ Globals.prefs.get("lyxpipe")+ "]");
    return;
  }
  if (numSelected > 0) {
    Thread pushThread=new Thread(){
      public void run(){
        try {
          FileWriter fw=new FileWriter(lyxpipe);
          BufferedWriter lyx_out=new BufferedWriter(fw);
          String citeStr="", citeKey="", message="";
          for (int i=0; i < numSelected; i++) {
            BibtexEntry bes=entries[i];
            citeKey=(String)bes.getField(GUIGlobals.KEY_FIELD);
            if (citeKey == null || citeKey.equals(""))             continue;
            if (citeStr.equals(""))             citeStr=citeKey;
 else             citeStr+="," + citeKey;
            if (i > 0)             message+=", ";
          }
          if (citeStr.equals(""))           panel.output(Globals.lang("Please define BibTeX key first"));
 else {
            citeStr="LYXCMD:sampleclient:citation-insert:" + citeStr;
            lyx_out.write(citeStr + "\n");
            panel.output(Globals.lang("Pushed the citations for the following rows to") + " Lyx: " + message);
          }
          lyx_out.close();
        }
 catch (        IOException excep) {
          panel.output(Globals.lang("Error") + ": " + Globals.lang("unable to write to")+ " "+ Globals.prefs.get("lyxpipe")+ ".in");
        }
      }
    }
;
    pushThread.start();
    Timeout t=new Timeout(2000,pushThread,Globals.lang("Error") + ": " + Globals.lang("unable to access LyX-pipe"));
    t.start();
  }
}
