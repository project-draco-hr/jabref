{
  if (panel == null) {
    return Collections.emptyList();
  }
  ImportDialog importDialog=null;
  boolean doNotShowAgain=false;
  boolean neverShow=Globals.prefs.getBoolean(ImportSettingsTab.PREF_IMPORT_ALWAYSUSE);
  int globalChoice=Globals.prefs.getInt(ImportSettingsTab.PREF_IMPORT_DEFAULT_PDF_IMPORT_STYLE);
  String[] dirsS=panel.metaData().getFileDirectory(GUIGlobals.FILE_FIELD);
  List<BibtexEntry> res=new ArrayList<BibtexEntry>();
  fileNameLoop:   for (  String fileName : fileNames) {
    List<BibtexEntry> xmpEntriesInFile=readXmpEntries(fileName);
    if (!neverShow && !doNotShowAgain) {
      importDialog=new ImportDialog((dropRow >= 0),fileName);
      if (!hasXmpEntries(xmpEntriesInFile)) {
        importDialog.disableXMPChoice();
      }
      Tools.centerRelativeToWindow(importDialog,frame);
      importDialog.showDialog();
      doNotShowAgain=importDialog.getDoNotShowAgain();
    }
    if (neverShow || (importDialog.getResult() == JOptionPane.OK_OPTION)) {
      int choice=(neverShow ? globalChoice : importDialog.getChoice());
      DroppedFileHandler dfh;
      BibtexEntry entry;
      BibtexEntryType type;
      InputStream in=null;
      List<BibtexEntry> localRes=null;
      MetaDataListDialog metaDataListDialog;
switch (choice) {
case ImportDialog.XMP:
        PdfXmpImporter importer=new PdfXmpImporter();
      try {
        in=new FileInputStream(fileName);
        localRes=importer.importEntries(in,frame);
      }
 catch (      IOException ex) {
        ex.printStackTrace();
      }
 finally {
        try {
          in.close();
        }
 catch (        Exception ignored) {
        }
      }
    if ((localRes == null) || (localRes.size() == 0)) {
      Globals.logger(Globals.lang("Import failed"));
      entry=createNewBlankEntry(fileName);
      res.add(entry);
      continue fileNameLoop;
    }
  entry=localRes.get(0);
panel.database().insertEntry(entry);
panel.markBaseChanged();
FileListTableModel tm=new FileListTableModel();
File toLink=new File(fileName);
tm.addEntry(0,new FileListEntry(toLink.getName(),Util.shortenFileName(toLink,dirsS).getPath(),Globals.prefs.getExternalFileTypeByName("pdf")));
entry.setField(GUIGlobals.FILE_FIELD,tm.getStringRepresentation());
res.add(entry);
break;
case ImportDialog.CONTENT:
PdfContentImporter contentImporter=new PdfContentImporter();
File file=new File(fileName);
try {
in=new FileInputStream(file);
}
 catch (Exception e) {
Globals.logger(Globals.lang("Import failed"));
e.printStackTrace();
entry=createNewBlankEntry(fileName);
res.add(entry);
continue fileNameLoop;
}
try {
localRes=contentImporter.importEntries(in,status);
}
 catch (Exception e) {
Globals.logger(Globals.lang("Import failed"));
e.printStackTrace();
entry=createNewBlankEntry(fileName);
res.add(entry);
continue fileNameLoop;
}
 finally {
try {
in.close();
}
 catch (Exception ignored) {
}
}
if ((localRes == null) || (localRes.size() == 0)) {
entry=createNewBlankEntry(fileName);
res.add(entry);
continue fileNameLoop;
}
entry=localRes.get(0);
panel.database().insertEntry(entry);
panel.markBaseChanged();
LabelPatternUtil.makeLabel(panel.metaData(),panel.database(),entry);
dfh=new DroppedFileHandler(frame,panel);
dfh.linkPdfToEntry(fileName,entryTable,entry);
panel.highlightEntry(entry);
if (Globals.prefs.getBoolean("autoOpenForm")) {
EntryEditor editor=panel.getEntryEditor(entry);
panel.showEntryEditor(editor);
panel.adjustSplitter();
}
res.add(entry);
break;
case ImportDialog.MRDLIB:
metaDataListDialog=new MetaDataListDialog(fileName,true);
Tools.centerRelativeToWindow(metaDataListDialog,frame);
metaDataListDialog.showDialog();
Document document=metaDataListDialog.getXmlDocuments();
entry=null;
if ((document != null) && (metaDataListDialog.getResult() == JOptionPane.OK_OPTION)) {
int selected=metaDataListDialog.getTableMetadata().getSelectedRow();
if (selected > -1) {
String id=IdGenerator.next();
entry=new BibtexEntry(id);
if (fieldExists(document.getType())) {
type=BibtexEntryType.getStandardType(document.getType());
if (type == null) {
type=BibtexEntryType.ARTICLE;
}
entry.setType(type);
}
 else {
entry.setType(BibtexEntryType.ARTICLE);
}
ArrayList<BibtexEntry> list=new ArrayList<BibtexEntry>();
list.add(entry);
Util.setAutomaticFields(list,true,true,false);
insertFields(BibtexFields.getAllFieldNames(),entry,document);
panel.database().insertEntry(entry);
dfh=new DroppedFileHandler(frame,panel);
dfh.linkPdfToEntry(fileName,entryTable,entry);
LabelPatternUtil.makeLabel(panel.metaData(),panel.database(),entry);
}
 else {
entry=createNewBlankEntry(fileName);
}
}
 else if (metaDataListDialog.getResult() == JOptionPane.CANCEL_OPTION) {
continue;
}
 else if (metaDataListDialog.getResult() == JOptionPane.NO_OPTION) {
entry=createNewBlankEntry(fileName);
}
 else if ((document == null) && (metaDataListDialog.getResult() == JOptionPane.OK_OPTION)) {
entry=createNewBlankEntry(fileName);
}
assert(entry != null);
res.add(entry);
break;
case ImportDialog.NOMETA:
entry=createNewBlankEntry(fileName);
res.add(entry);
break;
case ImportDialog.UPDATEEMPTYFIELDS:
metaDataListDialog=new MetaDataListDialog(fileName,false);
Tools.centerRelativeToWindow(metaDataListDialog,frame);
metaDataListDialog.showDialog();
document=metaDataListDialog.getXmlDocuments();
if ((document != null) && (metaDataListDialog.getResult() == JOptionPane.OK_OPTION)) {
int selected=metaDataListDialog.getTableMetadata().getSelectedRow();
if (selected > -1) {
entry=entryTable.getEntryAt(dropRow);
if (fieldExists(document.getType())) {
type=BibtexEntryType.getStandardType(document.getType());
if (type != null) {
entry.setType(type);
}
}
insertFields(BibtexFields.getAllFieldNames(),entry,document);
dfh=new DroppedFileHandler(frame,panel);
dfh.linkPdfToEntry(fileName,entryTable,dropRow);
}
}
break;
case ImportDialog.ONLYATTACH:
dfh=new DroppedFileHandler(frame,panel);
dfh.linkPdfToEntry(fileName,entryTable,dropRow);
break;
}
}
}
return res;
}
