{
  if (DEBUG_CODE_GENERATOR)   System.out.println("genRule(" + s.getId() + ")");
  if (!s.isDefined()) {
    tool.error("undefined rule: " + s.getId());
    return;
  }
  RuleBlock rblk=s.getBlock();
  currentRule=rblk;
  currentASTResult=s.getId();
  boolean savegenAST=genAST;
  genAST=genAST && rblk.getAutoGen();
  saveText=rblk.getAutoGen();
  if (s.comment != null) {
    _println(s.comment);
  }
  if (rblk.returnAction != null) {
    _print(extractTypeOfAction(rblk.returnAction,rblk.getLine()) + " ");
  }
 else {
    _print("void ");
  }
  _print(prefix + s.getId() + "(");
  _print(commonExtraParams);
  if (commonExtraParams.length() != 0 && rblk.argAction != null) {
    _print(",");
  }
  if (rblk.argAction != null) {
    _println("");
    tabs++;
    println(rblk.argAction);
    tabs--;
    print(")");
  }
 else {
    _print(")");
  }
  _println(" {");
  tabs++;
  if (rblk.returnAction != null) {
    genLineNo(rblk);
    println(rblk.returnAction + ";");
    genLineNo2();
  }
  if (!commonLocalVars.equals(""))   println(commonLocalVars);
  if (grammar.traceRules) {
    if (grammar instanceof TreeWalkerGrammar) {
      if (usingCustomAST)       println("Tracer traceInOut(this,\"" + s.getId() + "\",static_cast<"+ namespaceAntlr+ "RefAST"+ ">(_t));");
 else       println("Tracer traceInOut(this,\"" + s.getId() + "\",_t);");
    }
 else {
      println("Tracer traceInOut(this, \"" + s.getId() + "\");");
    }
  }
  if (grammar instanceof LexerGrammar) {
    if (s.getId().equals("mEOF"))     println("_ttype = " + namespaceAntlr + "Token::EOF_TYPE;");
 else     println("_ttype = " + s.getId().substring(1) + ";");
    println("int _saveIndex;");
  }
  if (grammar.debuggingOutput)   if (grammar instanceof ParserGrammar)   println("fireEnterRule(" + ruleNum + ",0);");
 else   if (grammar instanceof LexerGrammar)   println("fireEnterRule(" + ruleNum + ",_ttype);");
  if (grammar instanceof TreeWalkerGrammar) {
    println(labeledElementASTType + " " + s.getId()+ "_AST_in = _t;");
  }
  if (grammar.buildAST) {
    println("returnAST = " + labeledElementASTInit + ";");
    println(namespaceAntlr + "ASTPair currentAST;");
    println(labeledElementASTType + " " + s.getId()+ "_AST = "+ labeledElementASTInit+ ";");
  }
  genBlockPreamble(rblk);
  println("");
  ExceptionSpec unlabeledUserSpec=rblk.findExceptionSpec("");
  if (unlabeledUserSpec != null || rblk.getDefaultErrorHandler()) {
    println("try {      // for error handling");
    tabs++;
  }
  if (rblk.alternatives.size() == 1) {
    Alternative alt=rblk.getAlternativeAt(0);
    String pred=alt.semPred;
    if (pred != null)     genSemPred(pred,currentRule.line);
    if (alt.synPred != null) {
      tool.warning("Syntactic predicate ignored for single alternative",grammar.getFilename(),alt.synPred.getLine());
    }
    genAlt(alt,rblk);
  }
 else {
    boolean ok=grammar.theLLkAnalyzer.deterministic(rblk);
    CppBlockFinishingInfo howToFinish=genCommonBlock(rblk,false);
    genBlockFinish(howToFinish,throwNoViable);
  }
  if (unlabeledUserSpec != null || rblk.getDefaultErrorHandler()) {
    tabs--;
    println("}");
  }
  if (unlabeledUserSpec != null) {
    genErrorHandler(unlabeledUserSpec);
  }
 else   if (rblk.getDefaultErrorHandler()) {
    println("catch (" + exceptionThrown + "& ex) {");
    tabs++;
    if (grammar.hasSyntacticPredicate) {
      println("if( inputState->guessing == 0 ) {");
      tabs++;
    }
    println("reportError(ex);");
    if (!(grammar instanceof TreeWalkerGrammar)) {
      Lookahead follow=grammar.theLLkAnalyzer.FOLLOW(1,rblk.endNode);
      String followSetName=getBitsetName(markBitsetForGen(follow.fset));
      println("consume();");
      println("consumeUntil(" + followSetName + ");");
    }
 else {
      println("if ( _t != " + labeledElementASTInit + " )");
      tabs++;
      println("_t = _t->getNextSibling();");
      tabs--;
    }
    if (grammar.hasSyntacticPredicate) {
      tabs--;
      println("} else {");
      tabs++;
      println("throw ex;");
      tabs--;
      println("}");
    }
    tabs--;
    println("}");
  }
  if (grammar.buildAST) {
    println("returnAST = " + s.getId() + "_AST;");
  }
  if (grammar instanceof TreeWalkerGrammar) {
    println("_retTree = _t;");
  }
  if (rblk.getTestLiterals()) {
    if (s.access.equals("protected")) {
      genLiteralsTestForPartialToken();
    }
 else {
      genLiteralsTest();
    }
  }
  if (grammar instanceof LexerGrammar) {
    println("if ( _createToken && _token==" + namespaceAntlr + "nullToken && _ttype!="+ namespaceAntlr+ "Token::SKIP ) {");
    println("   _token = makeToken(_ttype);");
    println("   _token->setText(text.substr(_begin, text.length()-_begin));");
    println("}");
    println("_returnToken = _token;");
    println("_saveIndex=0;");
  }
  if (rblk.returnAction != null) {
    println("return " + extractIdOfAction(rblk.returnAction,rblk.getLine()) + ";");
  }
  tabs--;
  println("}");
  println("");
  genAST=savegenAST;
}
