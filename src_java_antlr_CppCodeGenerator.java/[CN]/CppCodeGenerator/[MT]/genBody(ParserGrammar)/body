{
  outputFile=grammar.getClassName() + ".cpp";
  outputLine=1;
  currentOutput=antlrTool.openOutputFile(outputFile);
  genAST=grammar.buildAST;
  tabs=0;
  genHeader(outputFile);
  printHeaderAction(preIncludeCpp);
  println("#include \"" + grammar.getClassName() + ".hpp\"");
  println("#include <antlr/NoViableAltException.hpp>");
  println("#include <antlr/SemanticException.hpp>");
  println("#include <antlr/ASTFactory.hpp>");
  printHeaderAction(postIncludeCpp);
  if (nameSpace != null)   nameSpace.emitDeclarations(currentOutput);
  printAction(grammar.preambleAction);
  String sup=null;
  if (grammar.superClass != null)   sup=grammar.superClass;
 else {
    sup=grammar.getSuperClass();
    if (sup.lastIndexOf('.') != -1)     sup=sup.substring(sup.lastIndexOf('.') + 1);
    sup=namespaceAntlr + sup;
  }
  if (grammar.debuggingOutput) {
    println("const char* " + grammar.getClassName() + "::_ruleNames[] = {");
    tabs++;
    Enumeration ids=grammar.rules.elements();
    int ruleNum=0;
    while (ids.hasMoreElements()) {
      GrammarSymbol sym=(GrammarSymbol)ids.nextElement();
      if (sym instanceof RuleSymbol)       println("\"" + ((RuleSymbol)sym).getId() + "\",");
    }
    println("0");
    tabs--;
    println("};");
  }
  if (noConstructors) {
    println("#if 0");
    println("// constructor creation turned of with 'noConstructor' option");
  }
  print(grammar.getClassName() + "::" + grammar.getClassName());
  println("(" + namespaceAntlr + "TokenBuffer& tokenBuf, int k)");
  println(": " + sup + "(tokenBuf,k)");
  println("{");
  println("}");
  println("");
  print(grammar.getClassName() + "::" + grammar.getClassName());
  println("(" + namespaceAntlr + "TokenBuffer& tokenBuf)");
  println(": " + sup + "(tokenBuf,"+ grammar.maxk+ ")");
  println("{");
  println("}");
  println("");
  print(grammar.getClassName() + "::" + grammar.getClassName());
  println("(" + namespaceAntlr + "TokenStream& lexer, int k)");
  println(": " + sup + "(lexer,k)");
  println("{");
  println("}");
  println("");
  print(grammar.getClassName() + "::" + grammar.getClassName());
  println("(" + namespaceAntlr + "TokenStream& lexer)");
  println(": " + sup + "(lexer,"+ grammar.maxk+ ")");
  println("{");
  println("}");
  println("");
  print(grammar.getClassName() + "::" + grammar.getClassName());
  println("(const " + namespaceAntlr + "ParserSharedInputState& state)");
  println(": " + sup + "(state,"+ grammar.maxk+ ")");
  println("{");
  println("}");
  println("");
  if (noConstructors) {
    println("// constructor creation turned of with 'noConstructor' option");
    println("#endif");
  }
  astTypes=new Vector();
  Enumeration ids=grammar.rules.elements();
  int ruleNum=0;
  while (ids.hasMoreElements()) {
    GrammarSymbol sym=(GrammarSymbol)ids.nextElement();
    if (sym instanceof RuleSymbol) {
      RuleSymbol rs=(RuleSymbol)sym;
      genRule(rs,rs.references.size() == 0,ruleNum++,grammar.getClassName() + "::");
    }
    exitIfError();
  }
  genInitFactory(g);
  genTokenStrings(grammar.getClassName() + "::");
  genBitsets(bitsetsUsed,grammar.tokenManager.maxTokenType(),grammar.getClassName() + "::");
  if (grammar.debuggingOutput)   genSemPredMap(grammar.getClassName() + "::");
  println("");
  println("");
  if (nameSpace != null)   nameSpace.emitClosures(currentOutput);
  currentOutput.close();
  currentOutput=null;
}
