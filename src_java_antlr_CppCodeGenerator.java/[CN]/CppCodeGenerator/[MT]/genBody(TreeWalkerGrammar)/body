{
  outputFile=grammar.getClassName() + ".cpp";
  outputLine=1;
  currentOutput=antlrTool.openOutputFile(outputFile);
  genAST=grammar.buildAST;
  tabs=0;
  genHeader(outputFile);
  printHeaderAction(preIncludeCpp);
  println("#include \"" + grammar.getClassName() + ".hpp\"");
  println("#include <antlr/Token.hpp>");
  println("#include <antlr/AST.hpp>");
  println("#include <antlr/NoViableAltException.hpp>");
  println("#include <antlr/MismatchedTokenException.hpp>");
  println("#include <antlr/SemanticException.hpp>");
  println("#include <antlr/BitSet.hpp>");
  printHeaderAction(postIncludeCpp);
  if (nameSpace != null)   nameSpace.emitDeclarations(currentOutput);
  printAction(grammar.preambleAction);
  String sup=null;
  if (grammar.superClass != null) {
    sup=grammar.superClass;
  }
 else {
    sup=grammar.getSuperClass();
    if (sup.lastIndexOf('.') != -1)     sup=sup.substring(sup.lastIndexOf('.') + 1);
    sup=namespaceAntlr + sup;
  }
  if (noConstructors) {
    println("#if 0");
    println("// constructor creation turned of with 'noConstructor' option");
  }
  println(grammar.getClassName() + "::" + grammar.getClassName()+ "()");
  println("\t: " + namespaceAntlr + "TreeParser() {");
  tabs++;
  tabs--;
  println("}");
  if (noConstructors) {
    println("// constructor creation turned of with 'noConstructor' option");
    println("#endif");
  }
  println("");
  astTypes=new Vector();
  Enumeration ids=grammar.rules.elements();
  int ruleNum=0;
  String ruleNameInits="";
  while (ids.hasMoreElements()) {
    GrammarSymbol sym=(GrammarSymbol)ids.nextElement();
    if (sym instanceof RuleSymbol) {
      RuleSymbol rs=(RuleSymbol)sym;
      genRule(rs,rs.references.size() == 0,ruleNum++,grammar.getClassName() + "::");
    }
    exitIfError();
  }
  genInitFactory(grammar);
  genTokenStrings(grammar.getClassName() + "::");
  genBitsets(bitsetsUsed,grammar.tokenManager.maxTokenType(),grammar.getClassName() + "::");
  println("");
  println("");
  if (nameSpace != null)   nameSpace.emitClosures(currentOutput);
  currentOutput.close();
  currentOutput=null;
}
