{
  String param_name="factory ";
  if (!g.buildAST)   param_name="";
  println("void " + g.getClassName() + "::initializeASTFactory( "+ namespaceAntlr+ "ASTFactory& "+ param_name+ ")");
  println("{");
  tabs++;
  if (g.buildAST) {
    TokenManager tm=grammar.tokenManager;
    Enumeration tokens=tm.getTokenSymbolKeys();
    while (tokens.hasMoreElements()) {
      String tok=(String)tokens.nextElement();
      TokenSymbol ts=tm.getTokenSymbol(tok);
      if (ts.getASTNodeType() != null) {
        astTypes.ensureCapacity(ts.getTokenType());
        String type=(String)astTypes.elementAt(ts.getTokenType());
        if (type == null)         astTypes.setElementAt(ts.getASTNodeType(),ts.getTokenType());
 else {
          if (!ts.getASTNodeType().equals(type)) {
            antlrTool.warning("Token " + tok + " taking most specific AST type",grammar.getFilename(),1,1);
            antlrTool.warning("  using " + type + " ignoring "+ ts.getASTNodeType(),grammar.getFilename(),1,1);
          }
        }
      }
    }
    for (int i=0; i < astTypes.size(); i++) {
      String type=(String)astTypes.elementAt(i);
      if (type != null) {
        println("factory.registerFactory(" + i + ", \""+ type+ "\", "+ type+ "::factory);");
      }
    }
    println("factory.setMaxNodeType(" + grammar.tokenManager.maxTokenType() + ");");
  }
  tabs--;
  println("}");
}
