{
  if (DEBUG_CODE_GENERATOR)   System.out.println("genRR(" + rr + ")");
  RuleSymbol rs=(RuleSymbol)grammar.getSymbol(rr.targetRule);
  if (rs == null || !rs.isDefined()) {
    tool.error("Rule '" + rr.targetRule + "' is not defined",grammar.getFilename(),rr.getLine());
    return;
  }
  if (!(rs instanceof RuleSymbol)) {
    tool.error("'" + rr.targetRule + "' does not name a grammar rule",grammar.getFilename(),rr.getLine());
    return;
  }
  genErrorTryForElement(rr);
  if (grammar instanceof TreeWalkerGrammar && rr.getLabel() != null && syntacticPredLevel == 0) {
    println("if ( SYS::is_eq( sa_t , " + labeledElementASTType + "::ASTNULL ) ) then");
    tabs++;
    println(rr.getLabel() + " := void;");
    tabs--;
    println("else");
    println(rr.getLabel() + " := " + lt1Value+ ";");
    println("end; -- if");
  }
  if (grammar instanceof LexerGrammar && (!saveText || rr.getAutoGenType() == GrammarElement.AUTO_GEN_BANG)) {
    println("sa_save_index := text.length;");
  }
  printTabs();
  if (rr.idAssign != null) {
    if (rs.block.returnAction == null) {
      tool.warning("Rule '" + rr.targetRule + "' has no return type",grammar.getFilename(),rr.getLine());
    }
    _print(rr.idAssign + ":=");
  }
 else {
    if (!(grammar instanceof LexerGrammar) && syntacticPredLevel == 0 && rs.block.returnAction != null) {
      tool.warning("Rule '" + rr.targetRule + "' returns a value",grammar.getFilename(),rr.getLine());
    }
  }
  GenRuleInvocation(rr);
  if (grammar instanceof LexerGrammar && (!saveText || rr.getAutoGenType() == GrammarElement.AUTO_GEN_BANG)) {
    println("text := text.substring( 0, sa_save_index); -- truncate");
  }
  if (syntacticPredLevel == 0) {
    boolean doNoGuessTest=(grammar.hasSyntacticPredicate && (grammar.buildAST && rr.getLabel() != null || (genAST && rr.getAutoGenType() == GrammarElement.AUTO_GEN_NONE)));
    if (doNoGuessTest) {
      println("if ( input_state.guessing = 0 ) then");
      tabs++;
    }
    if (grammar.buildAST && rr.getLabel() != null) {
      println(rr.getLabel() + "_ast := return_ast;");
    }
    if (genAST) {
switch (rr.getAutoGenType()) {
case GrammarElement.AUTO_GEN_NONE:
        println("current_ast.add_child( return_ast );");
      break;
case GrammarElement.AUTO_GEN_CARET:
    tool.error("Internal: encountered ^ after rule reference");
  break;
default :
break;
}
}
if (grammar instanceof LexerGrammar && rr.getLabel() != null) {
println(rr.getLabel() + " := sa_return_token;");
}
if (doNoGuessTest) {
tabs--;
println("end;");
}
}
genErrorCatchForElement(rr);
}
