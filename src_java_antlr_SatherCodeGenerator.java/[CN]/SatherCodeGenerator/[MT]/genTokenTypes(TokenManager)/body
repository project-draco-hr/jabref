{
  setupOutput(tm.getName() + "_" + TokenTypesFileSuffix.toUpperCase());
  tabs=0;
  genHeader();
  println(behavior.getHeaderAction(""));
  println("class " + tm.getName() + "_"+ TokenTypesFileSuffix.toUpperCase()+ " is");
  tabs++;
  Vector v=tm.getVocabulary();
  println("const EOF : INT := " + Token.EOF_TYPE + ";");
  println("const NULL_TREE_LOOKAHEAD : INT := " + Token.NULL_TREE_LOOKAHEAD + ";");
  for (int i=Token.MIN_USER_TYPE; i < v.size(); i++) {
    String s=(String)v.elementAt(i);
    if (s != null) {
      if (s.startsWith("\"")) {
        StringLiteralSymbol sl=(StringLiteralSymbol)tm.getTokenSymbol(s);
        if (sl == null) {
          antlr.Tool.panic("String literal " + s + " not in symbol table");
        }
 else         if (sl.label != null) {
          println("const " + sl.label + " : INT"+ " := "+ i+ ";");
        }
 else {
          String mangledName=mangleLiteral(s);
          if (mangledName != null) {
            println("const " + mangledName + " : INT"+ " := "+ i+ ";");
            sl.label=mangledName;
          }
 else {
            println("-- " + s + " := "+ i);
          }
        }
      }
 else       if (!s.startsWith("<")) {
        println("const " + s + " : INT"+ " := "+ i+ ";");
      }
    }
  }
  println("");
  println("bitset ( bool_array : ARRAY{BOOL} ) : CHAR_SET is");
  tabs++;
  println("return #CHAR_SET( bool_array );");
  tabs--;
  println("end;");
  println("");
  println("int_set ( int_array : ARRAY{INT} ) : INT_SET is");
  tabs++;
  println("return #INT_SET( int_array );");
  tabs--;
  println("end;");
  tabs--;
  println("end; -- class");
  currentOutput.close();
  currentOutput=null;
  exitIfError();
}
