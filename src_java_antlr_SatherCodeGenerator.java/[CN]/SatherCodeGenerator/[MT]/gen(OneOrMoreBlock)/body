{
  if (DEBUG_CODE_GENERATOR)   System.out.println("gen+(" + blk + ")");
  String label;
  String cnt;
  genBlockPreamble(blk);
  if (blk.getLabel() != null) {
    cnt=getNextSatherPrefix() + "_cnt_" + blk.getLabel();
  }
 else {
    cnt=getNextSatherPrefix() + "_cnt" + blk.ID;
  }
  println(cnt + " : INT := 0;");
  println("loop");
  tabs++;
  String saveCurrentASTResult=currentASTResult;
  if (blk.getLabel() != null) {
    currentASTResult=blk.getLabel();
  }
  boolean ok=grammar.theLLkAnalyzer.deterministic(blk);
  boolean generateNonGreedyExitPath=false;
  int nonGreedyExitDepth=grammar.maxk;
  if (!blk.greedy && blk.exitLookaheadDepth <= grammar.maxk && blk.exitCache[blk.exitLookaheadDepth].containsEpsilon()) {
    generateNonGreedyExitPath=true;
    nonGreedyExitDepth=blk.exitLookaheadDepth;
  }
 else   if (!blk.greedy && blk.exitLookaheadDepth == LLkGrammarAnalyzer.NONDETERMINISTIC) {
    generateNonGreedyExitPath=true;
  }
  if (generateNonGreedyExitPath) {
    if (DEBUG_CODE_GENERATOR) {
      System.out.println("nongreedy (...)+ loop; exit depth is " + blk.exitLookaheadDepth);
    }
    String predictExit=getLookaheadTestExpression(blk.exitCache,nonGreedyExitDepth);
    println("-- nongreedy exit test");
    println("if ( " + cnt + " >= 1 and "+ predictExit+ " ) then break! end; -- if");
  }
  JavaBlockFinishingInfo howToFinish=genCommonBlock(blk,false);
  genBlockFinish(howToFinish,"if ( " + cnt + " >= 1 ) then break! else "+ throwNoViable+ " end; -- if");
  println(cnt + " := " + cnt+ " + 1;");
  tabs--;
  println("end; -- loop");
  currentASTResult=saveCurrentASTResult;
}
