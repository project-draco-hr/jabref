{
  if (g.debuggingOutput)   semPreds=new Vector();
  setGrammar(g);
  if (!(grammar instanceof ParserGrammar)) {
    tool.panic("Internal error generating parser");
  }
  setupOutput(grammar.getClassName());
  genAST=grammar.buildAST;
  tabs=0;
  genHeader();
  println(behavior.getHeaderAction(""));
  println(grammar.preambleAction.getText());
  String sup=null;
  if (grammar.superClass != null)   sup=grammar.superClass.toUpperCase();
 else   sup="ANTLR_" + grammar.getSuperClass().toUpperCase();
  if (grammar.comment != null) {
    _println(grammar.comment);
  }
  println("class " + grammar.getClassName() + "{ TOKEN < $ANTLR_TOKEN, AST < $ANTLR_AST{AST} } is");
  tabs++;
  println("include " + sup + "{ TOKEN, "+ labeledElementASTType+ " } create -> super_create;");
  println("include " + grammar.tokenManager.getName() + "_"+ TokenTypesFileSuffix.toUpperCase()+ ";");
  println("");
  if (grammar.debuggingOutput) {
    println("const sa_rule_names : ARRAY{STR} := |");
    Enumeration ids=grammar.rules.elements();
    int ruleNum=0;
    while (ids.hasMoreElements()) {
      GrammarSymbol sym=(GrammarSymbol)ids.nextElement();
      if (sym instanceof RuleSymbol)       println("  \"" + ((RuleSymbol)sym).getId() + "\",");
    }
    println("|;");
  }
  print(processActionForTreeSpecifiers(grammar.classMemberAction.getText(),0,currentRule,null));
  println("");
  println("create ( token_buf : ANTLR_TOKEN_BUFFER{TOKEN} , k : INT ) : SAME is");
  tabs++;
  println("res : SAME := super_create( token_buf, k );");
  println("res.token_names := sa_token_names;");
  if (grammar.debuggingOutput) {
    println("res.rule_names  := sa_rule_names;");
    println("res.sem_pred_names := sa_sem_pred_names;");
    println("res.setup_debugging( token_buf );");
  }
  println("return res;");
  tabs--;
  println("end; -- create");
  println("");
  println("create ( token_buf : ANTLR_TOKEN_BUFFER{TOKEN} ) : SAME is");
  tabs++;
  println("return #SAME( token_buf, " + grammar.maxk + ");");
  tabs--;
  println("end; -- create");
  println("");
  println("create ( lexer : $ANTLR_TOKEN_STREAM{TOKEN} , k : INT ) : SAME is");
  tabs++;
  println("res : SAME := super_create( lexer, k );");
  println("res.token_names := sa_token_names;");
  if (grammar.debuggingOutput) {
    println("res.rule_names := sa_rule_names;");
    println("res.sem_pred_names := sa_sem_pred_names;");
    println("res.setup_debugging( lexer );");
  }
  println("return res;");
  tabs--;
  println("end; -- create");
  println("");
  println("create( lexer : $ANTLR_TOKEN_STREAM{TOKEN} ) : SAME is");
  tabs++;
  println("res : SAME := #SAME( lexer, " + grammar.maxk + ");");
  println("return res;");
  tabs--;
  println("end; -- create");
  println("");
  println("create ( state : ANTLR_PARSER_SHARED_INPUT_STATE{TOKEN} ) : SAME is ");
  tabs++;
  println("res : SAME := super_create( state," + grammar.maxk + ");");
  println("res.token_names := sa_token_names;");
  println("return res;");
  tabs--;
  println("end; -- create");
  println("");
  Enumeration ids=grammar.rules.elements();
  int ruleNum=0;
  while (ids.hasMoreElements()) {
    GrammarSymbol sym=(GrammarSymbol)ids.nextElement();
    if (sym instanceof RuleSymbol) {
      RuleSymbol rs=(RuleSymbol)sym;
      genRule(rs,rs.references.size() == 0,ruleNum++);
    }
    exitIfError();
  }
  genTokenStrings();
  genBitsets(bitsetsUsed,grammar.tokenManager.maxTokenType());
  if (grammar.debuggingOutput)   genSemPredMap();
  println("");
  tabs--;
  println("end; -- class");
  currentOutput.close();
  currentOutput=null;
}
