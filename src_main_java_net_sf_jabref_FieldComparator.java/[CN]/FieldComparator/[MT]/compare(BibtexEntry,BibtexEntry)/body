{
  Object f1, f2;
  if (isTypeHeader) {
    f1=e1.getType().getName();
    f2=e2.getType().getName();
  }
 else {
    f1=getField(e1);
    f2=getField(e2);
  }
  int localMultiplier=multiplier;
  if (isMonthField)   localMultiplier=-localMultiplier;
  if (f1 == null)   return f2 == null ? 0 : localMultiplier;
  if (f2 == null)   return -localMultiplier;
  if (isNameField) {
    f1=AuthorList.fixAuthorForAlphabetization((String)f1);
    f2=AuthorList.fixAuthorForAlphabetization((String)f2);
  }
 else   if (isYearField) {
    f1=Util.toFourDigitYear((String)f1);
    f2=Util.toFourDigitYear((String)f2);
  }
 else   if (isMonthField) {
    f1=MonthUtil.getMonth((String)f1).number;
    f2=MonthUtil.getMonth((String)f2).number;
  }
  if (isNumeric) {
    Integer i1=null, i2=null;
    try {
      i1=Util.intValueOf((String)f1);
    }
 catch (    NumberFormatException ex) {
    }
    try {
      i2=Util.intValueOf((String)f2);
    }
 catch (    NumberFormatException ex) {
    }
    if (i2 != null && i1 != null) {
      f1=i1;
      f2=i2;
    }
 else     if (i1 != null) {
      f1=i1;
      f2=i1 + 1;
    }
 else     if (i2 != null) {
      f2=i2;
      f1=i2 + 1;
    }
  }
  int result=0;
  if ((f1 instanceof Integer) && (f2 instanceof Integer)) {
    result=(((Integer)f1).compareTo((Integer)f2));
  }
 else   if (f2 instanceof Integer) {
    Integer f1AsInteger=new Integer(f1.toString());
    result=-((f1AsInteger).compareTo((Integer)f2));
  }
 else   if (f1 instanceof Integer) {
    Integer f2AsInteger=new Integer(f2.toString());
    result=-(((Integer)f1).compareTo(f2AsInteger));
  }
 else {
    String ours=((String)f1).toLowerCase(), theirs=((String)f2).toLowerCase();
    result=collator.compare(ours,theirs);
  }
  return result * localMultiplier;
}
