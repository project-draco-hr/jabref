{
class ImportAction extends MnemonicAwareAction {
    private final JabRefFrame frame;
    private final boolean openInNew;
    public ImportAction(    JabRefFrame frame,    boolean openInNew){
      this.frame=frame;
      this.openInNew=openInNew;
      putValue(Action.NAME,openInNew ? Localization.menuTitle("Import into new database") : Localization.menuTitle("Import into current database"));
      putValue(Action.ACCELERATOR_KEY,openInNew ? Globals.getKeyPrefs().getKey(KeyBinding.IMPORT_INTO_NEW_DATABASE) : Globals.getKeyPrefs().getKey(KeyBinding.IMPORT_INTO_CURRENT_DATABASE));
    }
    @Override public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=createImportFileChooser(Globals.prefs.get(JabRefPreferences.IMPORT_WORKING_DIRECTORY));
      int result=fileChooser.showOpenDialog(frame);
      if (result != JFileChooser.APPROVE_OPTION) {
        return;
      }
      File file=fileChooser.getSelectedFile();
      if (file == null) {
        return;
      }
      FileFilter ff=fileChooser.getFileFilter();
      ImportFormat format=null;
      if (ff instanceof ImportFileFilter) {
        format=((ImportFileFilter)ff).getImportFormat();
      }
      try {
        if (!file.exists()) {
          JOptionPane.showMessageDialog(frame,Localization.lang("File not found") + ": '" + file.getName()+ "'.",Localization.lang("Import"),JOptionPane.ERROR_MESSAGE);
          return;
        }
        ImportMenuItem imi=new ImportMenuItem(frame,openInNew,format);
        imi.automatedImport(Collections.singletonList(file.getAbsolutePath()));
        if (format == null) {
          Globals.prefs.put(JabRefPreferences.LAST_USED_IMPORT,"__all");
        }
 else {
          Globals.prefs.put(JabRefPreferences.LAST_USED_IMPORT,format.getFormatName());
        }
        Globals.prefs.put(JabRefPreferences.IMPORT_WORKING_DIRECTORY,file.getParent());
      }
 catch (      Exception ex) {
        LOGGER.warn("Problem with import format",ex);
      }
    }
  }
  return new ImportAction(frame,openInNew);
}
