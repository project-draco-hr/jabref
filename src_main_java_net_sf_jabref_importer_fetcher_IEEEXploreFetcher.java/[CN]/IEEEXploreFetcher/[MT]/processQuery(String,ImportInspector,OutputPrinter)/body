{
  String terms=query.replaceAll("\"","\\.QT\\.");
  shouldContinue=true;
  int parsed=0;
  int pageNumber=1;
  String postData=makeSearchPostRequestPayload(pageNumber,terms);
  try {
    URLDownload dl=new URLDownload(IEEEXploreFetcher.URL_SEARCH);
    dl.addParameters("Accept","application/json");
    dl.addParameters("Content-Type","application/json");
    dl.setPostData(postData);
    String page=dl.downloadToString(StandardCharsets.UTF_8);
    if (page.isEmpty()) {
      status.showMessage(Localization.lang("You have entered an invalid search '%0'.",query),DIALOG_TITLE,JOptionPane.INFORMATION_MESSAGE);
      return false;
    }
    JSONObject searchResultsJson=new JSONObject(page);
    int hits=searchResultsJson.getInt("totalRecords");
    if (hits == 0) {
      status.showMessage(Localization.lang("No entries found for the search string '%0'",query),DIALOG_TITLE,JOptionPane.INFORMATION_MESSAGE);
      return false;
    }
    if (hits > IEEEXploreFetcher.MAX_FETCH) {
      status.showMessage(Localization.lang("%0 entries found. To reduce server load, only %1 will be downloaded.",String.valueOf(hits),String.valueOf(IEEEXploreFetcher.MAX_FETCH)),DIALOG_TITLE,JOptionPane.INFORMATION_MESSAGE);
    }
    String bibtexPage=new URLDownload(createBibtexQueryURL(searchResultsJson)).downloadToString(Globals.prefs.getDefaultEncoding());
    bibtexPage=preprocessBibtexResultsPage(bibtexPage);
    Collection<BibEntry> parsedBibtexCollection=BibtexParser.fromString(bibtexPage);
    if (parsedBibtexCollection == null) {
      status.showMessage(Localization.lang("Error while fetching from %0",getTitle()),DIALOG_TITLE,JOptionPane.INFORMATION_MESSAGE);
      return false;
    }
    int nEntries=parsedBibtexCollection.size();
    Iterator<BibEntry> parsedBibtexCollectionIterator=parsedBibtexCollection.iterator();
    while (parsedBibtexCollectionIterator.hasNext() && shouldContinue) {
      dialog.addEntry(cleanup(parsedBibtexCollectionIterator.next()));
      dialog.setProgress(parsed,nEntries);
      parsed++;
    }
    return true;
  }
 catch (  MalformedURLException e) {
    LOGGER.warn("Bad URL",e);
  }
catch (  ConnectException|UnknownHostException e) {
    status.showMessage(Localization.lang("Could not connect to %0",getTitle()),DIALOG_TITLE,JOptionPane.ERROR_MESSAGE);
  }
catch (  IOException|JSONException e) {
    status.showMessage(e.getMessage(),DIALOG_TITLE,JOptionPane.ERROR_MESSAGE);
    LOGGER.warn("Search IEEEXplore: " + e.getMessage(),e);
  }
  return false;
}
