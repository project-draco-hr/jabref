{
  InputStream originalStream=AuxSubGeneratorTest.class.getResourceAsStream("origin.bib");
  File auxFile=new File(AuxSubGeneratorTest.class.getResource("badpaper.aux").getFile());
  try (InputStreamReader originalReader=new InputStreamReader(originalStream)){
    ParserResult result=BibtexParser.parse(originalReader);
    AuxSubGenerator auxSubGenerator=new AuxSubGenerator();
    List<String> unresolved=auxSubGenerator.generate(auxFile.getAbsolutePath(),result.getDatabase());
    assertFalse(auxSubGenerator.emptyGeneratedDatabase());
    assertEquals(1,unresolved.size());
    assertEquals(1,auxSubGenerator.getNotResolvedKeysCount());
    BibDatabase newDB=auxSubGenerator.getGeneratedDatabase();
    assertEquals(2,newDB.getEntries().size());
    assertEquals(2,auxSubGenerator.getResolvedKeysCount());
    assertEquals(3,auxSubGenerator.getFoundKeysInAux());
    assertEquals(auxSubGenerator.getFoundKeysInAux(),auxSubGenerator.getResolvedKeysCount() + auxSubGenerator.getNotResolvedKeysCount());
    assertEquals(0,auxSubGenerator.getNestedAuxCounter());
    assertEquals(0,auxSubGenerator.getCrossreferencedEntriesCount());
  }
 catch (  IOException ex) {
    fail("Cannot open file");
  }
}
