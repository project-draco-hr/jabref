{
  ArrayList<BibtexEntry> res=new ArrayList<BibtexEntry>(1);
  PDDocument document=null;
  try {
    document=PDDocument.load(in);
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,"Could not load document",e);
    return res;
  }
  try {
    if (document.isEncrypted()) {
      logger.log(Level.INFO,Globals.lang("Encrypted documents are not supported"));
    }
    PDFTextStripper stripper=new PDFTextStripper();
    stripper.setStartPage(1);
    stripper.setEndPage(1);
    stripper.setSortByPosition(true);
    stripper.setParagraphEnd(System.getProperty("line.separator"));
    StringWriter writer=new StringWriter();
    stripper.writeText(document,writer);
    String textResult=writer.toString();
    String author=null;
    String editor=null;
    String abstractT=null;
    String keywords=null;
    String title=null;
    String conference=null;
    String DOI=null;
    String series=null;
    String volume=null;
    String pages=null;
    String year=null;
    String publisher=null;
    final String lineBreak=System.getProperty("line.separator");
    String[] split=textResult.split(lineBreak);
    String curString=split[0].concat(" ");
    int i=1;
    if (curString.length() > 4) {
      boolean match=false;
      if (isYear(curString.substring(0,4))) {
        year=curString.substring(0,4);
        match=true;
      }
      match=match || curString.contains("Conference");
      if (match) {
        while ((i < split.length) && (!split[i].equals(""))) {
          curString=curString.concat(split[i]).concat(" ");
          i++;
        }
        conference=curString;
        curString="";
        i++;
      }
    }
    while ((i < split.length) && (!split[i].equals(""))) {
      curString=curString.concat(split[i]).concat(" ");
      i++;
    }
    title=streamlineTitle(curString);
    curString="";
    i++;
    while ((i < split.length) && (split[i].trim().equals("")))     i++;
    while ((i < split.length) && (!split[i].equals(""))) {
      curString=curString.concat(split[i]).concat(" ");
      i++;
    }
    author=streamlineNames(curString);
    curString="";
    i++;
    while (i < split.length) {
      curString=split[i];
      if ((curString.length() >= "Abstract".length()) && (curString.substring(0,"Abstract".length()).equalsIgnoreCase("Abstract"))) {
        curString=curString.substring("Abstract".length() + 1).trim().concat(lineBreak);
        i++;
        while ((i < split.length) && (!split[i].equals(""))) {
          curString=curString.concat(split[i]).concat(lineBreak);
          i++;
        }
        abstractT=curString;
      }
 else       if ((curString.length() >= "Keywords".length()) && (curString.substring(0,"Keywords".length()).equalsIgnoreCase("Keywords"))) {
        curString=curString.substring("Keywords".length() + 1).trim();
        i++;
        while ((i < split.length) && (!split[i].equals(""))) {
          curString=curString.concat(split[i]).concat(" ");
          i++;
        }
        keywords=removeNonLettersAtEnd(curString);
      }
      i++;
    }
    i=split.length - 1;
    while ((i > 0) && (!split[i].equals(""))) {
      i--;
    }
    curString="";
    if (i > 0) {
      for (int j=i + 1; j < split.length; j++) {
        curString=curString.concat(split[j]);
        if (j != split.length - 1) {
          curString=curString.concat(" ");
        }
      }
      int pos=curString.indexOf("(Eds.)");
      if (pos >= 0) {
        publisher="Springer";
        editor=streamlineNames(curString.substring(0,pos - 1));
        curString=curString.substring(pos + "(Eds.)".length() + 2);
        String[] springerSplit=curString.split(", ");
        if (springerSplit.length >= 4) {
          conference=springerSplit[0];
          String seriesData=springerSplit[1];
          int lastSpace=seriesData.lastIndexOf(' ');
          series=seriesData.substring(0,lastSpace);
          volume=seriesData.substring(lastSpace + 1);
          pages=springerSplit[2].substring(4);
          if (springerSplit[3].length() >= 4) {
            year=springerSplit[3].substring(0,4);
          }
        }
      }
 else {
        pos=curString.indexOf("DOI");
        if (pos < 0)         pos=curString.indexOf("doi");
        if (pos >= 0) {
          pos+=3;
          char delimiter=curString.charAt(pos);
          if ((delimiter == ':') || (delimiter == ' ')) {
            pos++;
          }
          int nextSpace=curString.indexOf(' ',pos);
          if (nextSpace > 0)           DOI=curString.substring(pos,nextSpace);
 else           DOI=curString.substring(pos);
        }
        if (curString.indexOf("IEEE") >= 0) {
          publisher="IEEE";
          String yearStr=curString.substring(curString.length() - 4);
          if (isYear(yearStr)) {
            year=yearStr;
          }
          pos=curString.indexOf('$');
          if (pos > 0) {
            pos-=2;
            while ((pos >= 0) && (curString.charAt(pos) != ' '))             pos--;
            if (pos > 0) {
              conference=curString.substring(0,pos);
            }
          }
        }
      }
    }
    BibtexEntry entry=new BibtexEntry();
    if (author != null)     entry.setField("author",author);
    if (editor != null)     entry.setField("editor",editor);
    if (abstractT != null)     entry.setField("abstract",abstractT);
    if (keywords != null)     entry.setField("keywords",keywords);
    if (title != null)     entry.setField("title",title);
    if (conference != null)     entry.setField("booktitle",conference);
    if (DOI != null)     entry.setField("doi",DOI);
    if (series != null)     entry.setField("series",series);
    if (volume != null)     entry.setField("volume",volume);
    if (pages != null)     entry.setField("pages",pages);
    if (year != null)     entry.setField("year",year);
    if (publisher != null)     entry.setField("publisher",publisher);
    entry.setField("review",textResult);
    res.add(entry);
  }
  finally {
    document.close();
  }
  return res;
}
