{
  if (Globals.prefs == null) {
    Globals.prefs=JabRefPreferences.getInstance();
  }
  XMPPreferences xmpPreferences=Globals.prefs.getXMPPreferences();
  ImportFormatPreferences importFormatPreferences=Globals.prefs.getImportFormatPreferences();
switch (args.length) {
case 0:
    usage();
  break;
case 1:
if (args[0].endsWith(".pdf")) {
  List<BibEntry> l=XMPUtil.readXMP(new File(args[0]),xmpPreferences);
  BibEntryWriter bibtexEntryWriter=new BibEntryWriter(new LatexFieldFormatter(Globals.prefs.getLatexFieldFormatterPreferences()),false);
  for (  BibEntry entry : l) {
    StringWriter sw=new StringWriter();
    bibtexEntryWriter.write(entry,sw,BibDatabaseMode.BIBTEX);
    System.out.println(sw.getBuffer());
  }
}
 else if (args[0].endsWith(".bib")) {
  try (FileReader fr=new FileReader(args[0])){
    ParserResult result=BibtexParser.parse(fr,importFormatPreferences);
    Collection<BibEntry> entries=result.getDatabase().getEntries();
    if (entries.isEmpty()) {
      System.err.println("Could not find BibEntry in " + args[0]);
    }
 else {
      System.out.println(XMPUtil.toXMP(entries,result.getDatabase(),xmpPreferences));
    }
  }
 }
 else {
  usage();
}
break;
case 2:
if ("-x".equals(args[0]) && args[1].endsWith(".pdf")) {
Optional<XMPMetadata> meta=XMPUtil.readRawXMP(new File(args[1]));
if (meta.isPresent()) {
XMLUtil.save(meta.get().getXMPDocument(),System.out,StandardCharsets.UTF_8.name());
}
 else {
System.err.println("The given pdf does not contain any XMP-metadata.");
}
break;
}
if (args[0].endsWith(".bib") && args[1].endsWith(".pdf")) {
BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(args[0]),StandardCharsets.UTF_8));
ParserResult result=new BibtexParser(importFormatPreferences).parse(reader);
Collection<BibEntry> entries=result.getDatabase().getEntries();
if (entries.isEmpty()) {
System.err.println("Could not find BibEntry in " + args[0]);
}
 else {
XMPUtil.writeXMP(new File(args[1]),entries,result.getDatabase(),false,xmpPreferences);
System.out.println("XMP written.");
}
break;
}
usage();
break;
case 3:
if (!args[1].endsWith(".bib") && !args[2].endsWith(".pdf")) {
usage();
break;
}
ParserResult result=BibtexParser.parse(new FileReader(args[1]),importFormatPreferences);
Optional<BibEntry> bibEntry=result.getDatabase().getEntryByKey(args[0]);
if (bibEntry.isPresent()) {
XMPUtil.writeXMP(new File(args[2]),bibEntry.get(),result.getDatabase(),xmpPreferences);
System.out.println("XMP written.");
}
 else {
System.err.println("Could not find BibEntry " + args[0] + " in "+ args[0]);
}
break;
default :
usage();
}
}
