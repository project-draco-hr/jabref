{
  if (text == null)   return null;
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < text.length(); i++) {
    int c=text.charAt(i);
    if (c == '<') {
      i=readTag(text,sb,i);
    }
 else     sb.append((char)c);
  }
  text=sb.toString();
  Set<String> patterns=escapedSymbols.keySet();
  for (  String pattern : patterns) {
    text=text.replaceAll(pattern,escapedSymbols.get(pattern));
  }
  Pattern escapedPattern=Pattern.compile("&#([x]*\\p{XDigit}+);");
  Matcher m=escapedPattern.matcher(text);
  while (m.find()) {
    int num=Integer.decode(m.group(1).replace("x","#"));
    if (numSymbols.containsKey(num)) {
      text=text.replaceAll("&#" + m.group(1) + ";",numSymbols.get(num));
    }
 else {
      System.err.println("HTML escaped char not converted " + m.group(1) + ": "+ Integer.toString(num));
    }
  }
  escapedPattern=Pattern.compile("&(\\w+);");
  m=escapedPattern.matcher(text);
  while (m.find()) {
    System.err.println("HTML escaped char not converted " + m.group(1));
  }
  return text.trim();
}
