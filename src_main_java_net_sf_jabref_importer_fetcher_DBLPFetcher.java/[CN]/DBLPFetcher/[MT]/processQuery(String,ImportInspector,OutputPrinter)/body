{
  final HashMap<String,Boolean> bibentryKnown=new HashMap<>();
  boolean res=false;
  this.query=newQuery;
  shouldContinue=true;
  double saveThreshold=DuplicateCheck.duplicateThreshold;
  try {
    String address=makeSearchURL();
    URL url=new URL(address);
    String page=NetUtil.getResults(url);
    String[] lines=page.split("\n");
    List<String> bibtexUrlList=new ArrayList<>();
    for (    final String line : lines) {
      if (line.startsWith("\"url\"")) {
        String addr=line.replace("\"url\":\"","");
        addr=addr.substring(0,addr.length() - 2);
        bibtexUrlList.add(addr);
      }
    }
    DuplicateCheck.duplicateThreshold=Double.MAX_VALUE;
    int count=1;
    for (    String urlStr : bibtexUrlList) {
      if (!shouldContinue) {
        break;
      }
      final URL bibUrl=new URL(urlStr);
      final String bibtexHTMLPage=NetUtil.getResults(bibUrl);
      final String[] htmlLines=bibtexHTMLPage.split("\n");
      for (      final String line : htmlLines) {
        if (line.contains("biburl")) {
          int sidx=line.indexOf('{');
          int eidx=line.indexOf('}');
          String bibtexUrl=line.substring(sidx + 1,eidx);
          bibtexUrl=bibtexUrl.replace("dblp.uni-trier.de","www.dblp.org");
          final URL bibFileURL=new URL(bibtexUrl);
          final String bibtexPage=NetUtil.getResults(bibFileURL);
          Collection<BibEntry> bibtexEntries=BibtexParser.fromString(bibtexPage);
          for (          BibEntry be : bibtexEntries) {
            if (!bibentryKnown.containsKey(be.getCiteKey())) {
              inspector.addEntry(be);
              bibentryKnown.put(be.getCiteKey(),true);
            }
          }
        }
      }
      inspector.setProgress(count,bibtexUrlList.size());
      count++;
    }
    res=true;
  }
 catch (  IOException e) {
    LOGGER.warn("Communcation problems",e);
    status.showMessage(e.getMessage());
  }
 finally {
    DuplicateCheck.duplicateThreshold=saveThreshold;
  }
  return res;
}
