{
  JButton both;
  JButton second;
  JButton first;
switch (type) {
case DUPLICATE_SEARCH:
    first=new JButton(Localization.lang("Keep left"));
  second=new JButton(Localization.lang("Keep right"));
both=new JButton(Localization.lang("Keep both"));
me=new MergeEntries(one,two);
break;
case INSPECTION:
first=new JButton(Localization.lang("Remove old entry"));
second=new JButton(Localization.lang("Remove entry from import"));
both=new JButton(Localization.lang("Keep both"));
me=new MergeEntries(one,two,Localization.lang("Old entry"),Localization.lang("From import"));
break;
case DUPLICATE_SEARCH_WITH_EXACT:
first=new JButton(Localization.lang("Keep left"));
second=new JButton(Localization.lang("Keep right"));
both=new JButton(Localization.lang("Keep both"));
removeExact=new JButton(Localization.lang("Automatically remove exact duplicates"));
me=new MergeEntries(one,two);
break;
default :
first=new JButton(Localization.lang("Import and remove old entry"));
second=new JButton(Localization.lang("Do not import entry"));
both=new JButton(Localization.lang("Import and keep old entry"));
me=new MergeEntries(one,two,Localization.lang("Old entry"),Localization.lang("From import"));
}
if (removeExact != null) {
options.add(removeExact);
}
options.add(first);
options.add(second);
options.add(both);
options.add(merge);
options.add(Box.createHorizontalStrut(5));
options.add(cancel);
first.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
buttonPressed(KEEP_UPPER);
}
}
);
second.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
buttonPressed(KEEP_LOWER);
}
}
);
both.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
buttonPressed(KEEP_BOTH);
}
}
);
merge.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
buttonPressed(KEEP_MERGE);
}
}
);
if (removeExact != null) {
removeExact.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
buttonPressed(AUTOREMOVE_EXACT);
}
}
);
}
cancel.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
buttonPressed(BREAK);
}
}
);
getContentPane().add(me.getMergeEntryPanel());
getContentPane().add(options,BorderLayout.SOUTH);
pack();
pw=new PositionWindow(this,JabRefPreferences.DUPLICATES_POS_X,JabRefPreferences.DUPLICATES_POS_Y,JabRefPreferences.DUPLICATES_SIZE_X,JabRefPreferences.DUPLICATES_SIZE_Y);
pw.setWindowPosition();
addComponentListener(new ComponentAdapter(){
@Override public void componentResized(ComponentEvent e){
pw.storeWindowPosition();
}
@Override public void componentMoved(ComponentEvent e){
pw.storeWindowPosition();
}
}
);
both.requestFocus();
}
