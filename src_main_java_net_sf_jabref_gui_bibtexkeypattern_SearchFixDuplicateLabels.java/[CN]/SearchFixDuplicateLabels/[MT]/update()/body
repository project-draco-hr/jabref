{
  List<BibEntry> toGenerateFor=new ArrayList<>();
  for (  Map.Entry<String,List<BibEntry>> dupeEntry : dupes.entrySet()) {
    ResolveDuplicateLabelDialog rdld=new ResolveDuplicateLabelDialog(panel,dupeEntry.getKey(),dupeEntry.getValue());
    rdld.show();
    if (rdld.isOkPressed()) {
      List<JCheckBox> cbs=rdld.getCheckBoxes();
      for (int i=0; i < cbs.size(); i++) {
        if (cbs.get(i).isSelected()) {
          toGenerateFor.add(dupeEntry.getValue().get(i));
        }
      }
    }
 else     if (rdld.isCancelPressed()) {
      break;
    }
  }
  if (!toGenerateFor.isEmpty()) {
    NamedCompound ce=new NamedCompound(Localization.lang("Resolve duplicate BibTeX keys"));
    for (    BibEntry entry : toGenerateFor) {
      String oldKey=entry.getCiteKeyOptional().orElse(null);
      BibtexKeyPatternUtil.makeLabel(panel.getBibDatabaseContext().getMetaData().getCiteKeyPattern(Globals.prefs.getBibtexKeyPatternPreferences().getKeyPattern()),panel.getDatabase(),entry,Globals.prefs.getBibtexKeyPatternPreferences());
      ce.addEdit(new UndoableKeyChange(panel.getDatabase(),entry,oldKey,entry.getCiteKeyOptional().get()));
    }
    ce.end();
    panel.getUndoManager().addEdit(ce);
    panel.markBaseChanged();
  }
  panel.output(Localization.lang("Finished resolving duplicate BibTeX keys. %0 entries modified.",String.valueOf(toGenerateFor.size())));
}
