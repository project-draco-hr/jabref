{
  Token rr=null;
  Token aa=null;
  Token tr=null;
  Token aa2=null;
  Token r2=null;
  Token aa3=null;
  Token a=null;
  Token p=null;
  Token label=null;
  Token assignId=null;
  Token args=null;
  int autoGen=GrammarElement.AUTO_GEN_NONE;
switch (LA(1)) {
case ACTION:
{
      a=LT(1);
      match(ACTION);
      if (inputState.guessing == 0) {
        behavior.refAction(a);
      }
      break;
    }
case SEMPRED:
{
    p=LT(1);
    match(SEMPRED);
    if (inputState.guessing == 0) {
      behavior.refSemPred(p);
    }
    break;
  }
case TREE_BEGIN:
{
  tree();
  break;
}
default :
if ((LA(1) == TOKEN_REF || LA(1) == RULE_REF) && (LA(2) == ASSIGN)) {
assignId=id();
match(ASSIGN);
{
  if ((LA(1) == TOKEN_REF || LA(1) == RULE_REF) && (LA(2) == COLON)) {
    label=id();
    match(COLON);
    if (inputState.guessing == 0) {
      checkForMissingEndRule(label);
    }
  }
 else   if ((LA(1) == TOKEN_REF || LA(1) == RULE_REF) && (_tokenSet_3.member(LA(2)))) {
  }
 else {
    throw new NoViableAltException(LT(1),getFilename());
  }
}
{
switch (LA(1)) {
case RULE_REF:
{
      rr=LT(1);
      match(RULE_REF);
{
switch (LA(1)) {
case ARG_ACTION:
{
            aa=LT(1);
            match(ARG_ACTION);
            if (inputState.guessing == 0) {
              args=aa;
            }
            break;
          }
case STRING_LITERAL:
case ACTION:
case SEMI:
case CHAR_LITERAL:
case OR:
case TOKEN_REF:
case OPEN_ELEMENT_OPTION:
case LPAREN:
case RULE_REF:
case RPAREN:
case BANG:
case LITERAL_exception:
case NOT_OP:
case SEMPRED:
case TREE_BEGIN:
case WILDCARD:
{
          break;
        }
default :
{
        throw new NoViableAltException(LT(1),getFilename());
      }
  }
}
{
switch (LA(1)) {
case BANG:
{
      match(BANG);
      if (inputState.guessing == 0) {
        autoGen=GrammarElement.AUTO_GEN_BANG;
      }
      break;
    }
case STRING_LITERAL:
case ACTION:
case SEMI:
case CHAR_LITERAL:
case OR:
case TOKEN_REF:
case OPEN_ELEMENT_OPTION:
case LPAREN:
case RULE_REF:
case RPAREN:
case LITERAL_exception:
case NOT_OP:
case SEMPRED:
case TREE_BEGIN:
case WILDCARD:
{
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
if (inputState.guessing == 0) {
behavior.refRule(assignId,rr,label,args,autoGen);
}
break;
}
case TOKEN_REF:
{
tr=LT(1);
match(TOKEN_REF);
{
switch (LA(1)) {
case ARG_ACTION:
{
aa2=LT(1);
match(ARG_ACTION);
if (inputState.guessing == 0) {
args=aa2;
}
break;
}
case STRING_LITERAL:
case ACTION:
case SEMI:
case CHAR_LITERAL:
case OR:
case TOKEN_REF:
case OPEN_ELEMENT_OPTION:
case LPAREN:
case RULE_REF:
case RPAREN:
case LITERAL_exception:
case NOT_OP:
case SEMPRED:
case TREE_BEGIN:
case WILDCARD:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
if (inputState.guessing == 0) {
behavior.refToken(assignId,tr,label,args,false,autoGen,lastInRule());
}
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
}
 else if ((_tokenSet_4.member(LA(1))) && (_tokenSet_5.member(LA(2)))) {
{
if ((LA(1) == TOKEN_REF || LA(1) == RULE_REF) && (LA(2) == COLON)) {
label=id();
match(COLON);
if (inputState.guessing == 0) {
checkForMissingEndRule(label);
}
}
 else if ((_tokenSet_4.member(LA(1))) && (_tokenSet_6.member(LA(2)))) {
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
{
switch (LA(1)) {
case RULE_REF:
{
r2=LT(1);
match(RULE_REF);
{
switch (LA(1)) {
case ARG_ACTION:
{
aa3=LT(1);
match(ARG_ACTION);
if (inputState.guessing == 0) {
args=aa3;
}
break;
}
case STRING_LITERAL:
case ACTION:
case SEMI:
case CHAR_LITERAL:
case OR:
case TOKEN_REF:
case OPEN_ELEMENT_OPTION:
case LPAREN:
case RULE_REF:
case RPAREN:
case BANG:
case LITERAL_exception:
case NOT_OP:
case SEMPRED:
case TREE_BEGIN:
case WILDCARD:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
{
switch (LA(1)) {
case BANG:
{
match(BANG);
if (inputState.guessing == 0) {
autoGen=GrammarElement.AUTO_GEN_BANG;
}
break;
}
case STRING_LITERAL:
case ACTION:
case SEMI:
case CHAR_LITERAL:
case OR:
case TOKEN_REF:
case OPEN_ELEMENT_OPTION:
case LPAREN:
case RULE_REF:
case RPAREN:
case LITERAL_exception:
case NOT_OP:
case SEMPRED:
case TREE_BEGIN:
case WILDCARD:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
if (inputState.guessing == 0) {
behavior.refRule(assignId,r2,label,args,autoGen);
}
break;
}
case NOT_OP:
{
match(NOT_OP);
{
switch (LA(1)) {
case CHAR_LITERAL:
case TOKEN_REF:
{
notTerminal(label);
break;
}
case LPAREN:
{
ebnf(label,true);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
break;
}
case LPAREN:
{
ebnf(label,false);
break;
}
default :
if ((LA(1) == STRING_LITERAL || LA(1) == CHAR_LITERAL || LA(1) == TOKEN_REF) && (LA(2) == RANGE)) {
range(label);
}
 else if ((_tokenSet_7.member(LA(1))) && (_tokenSet_8.member(LA(2)))) {
terminal(label);
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
}
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
}
