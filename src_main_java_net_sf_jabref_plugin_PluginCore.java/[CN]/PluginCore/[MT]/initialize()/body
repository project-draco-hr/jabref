{
  ObjectFactory objectFactory=ObjectFactory.newInstance();
  PluginManager result=objectFactory.createManager();
  try {
    DefaultPluginsCollector collector=new DefaultPluginsCollector();
    ExtendedProperties ep=new ExtendedProperties();
    List<File> directoriesToSearch=new LinkedList<File>();
    directoriesToSearch.add(new File("./src/resources/plugins"));
    directoriesToSearch.add(new File("./plugins"));
    directoriesToSearch.add(PluginCore.userPluginDir);
    try {
      File parent=new File(PluginCore.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getParentFile();
      if (!parent.getCanonicalFile().equals(new File(".").getCanonicalFile())) {
        directoriesToSearch.add(new File(parent,"/src/resources/plugins"));
        directoriesToSearch.add(new File(parent,"/plugins"));
      }
    }
 catch (    Exception e) {
    }
    StringBuilder sb=new StringBuilder();
    for (    File directory : directoriesToSearch) {
      if (directory.exists()) {
        if (sb.length() > 0) {
          sb.append(',');
        }
        sb.append(directory.getPath());
      }
    }
    ep.setProperty("org.java.plugin.boot.pluginsRepositories",sb.toString());
    collector.configure(ep);
    Collection<PluginLocation> plugins=collector.collectPluginLocations();
    String[] jarLocationsToSearch=new String[]{"/plugins/net.sf.jabref.core/","/plugins/net.sf.jabref.export.misq/"};
    for (    String jarLocation : jarLocationsToSearch) {
      PluginLocation location=PluginCore.getLocationInsideJar(jarLocation,"plugin.xml");
      if (location != null) {
        plugins.add(location);
      }
    }
    if (plugins.size() <= 0) {
      LOGGER.warn(Globals.lang("No plugins were found in the following folders:") + "\n  " + Util.join(directoriesToSearch.toArray(new String[directoriesToSearch.size()]),"\n  ",0,directoriesToSearch.size())+ "\n"+ Globals.lang("and inside the JabRef-jar:")+ "\n  "+ Util.join(jarLocationsToSearch,"\n  ",0,jarLocationsToSearch.length)+ "\n"+ Globals.lang("At least the plug-in 'net.sf.jabref.core' should be there."));
    }
 else {
      result.publishPlugins(plugins.toArray(new PluginLocation[plugins.size()]));
      Collection<PluginDescriptor> descs=result.getRegistry().getPluginDescriptors();
      sb=new StringBuilder();
      sb.append(Globals.lang("Found %0 plugin(s)",String.valueOf(descs.size()))).append(":\n");
      for (      PluginDescriptor p : result.getRegistry().getPluginDescriptors()) {
        sb.append("  - ").append(p.getId()).append(" (").append(p.getLocation()).append(")\n");
      }
      LOGGER.info(sb.toString());
    }
  }
 catch (  Exception e) {
    LOGGER.error(Globals.lang("Error in starting plug-in system. Starting without, but some functionality may be missing.") + "\n" + e.getLocalizedMessage());
  }
  return result;
}
