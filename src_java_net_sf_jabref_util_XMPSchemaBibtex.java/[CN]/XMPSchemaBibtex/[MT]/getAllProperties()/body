{
  NodeList nodes=getElement().getChildNodes();
  Map result=new HashMap();
  if (nodes == null) {
    return result;
  }
  int n=nodes.getLength();
  for (int i=0; i < n; i++) {
    Node node=nodes.item(i);
    if (node.getNodeType() != Node.ATTRIBUTE_NODE && node.getNodeType() != Node.ELEMENT_NODE)     continue;
    String nodeName=node.getNodeName();
    String[] split=nodeName.split(":");
    if (split.length == 2 && split[0].equals("bibtex")) {
      NodeList seqList=((Element)node).getElementsByTagName("rdf:Seq");
      if (seqList.getLength() > 0) {
        Element seqNode=(Element)seqList.item(0);
        StringBuffer seq=null;
        NodeList items=seqNode.getElementsByTagName("rdf:li");
        for (int j=0; j < items.getLength(); j++) {
          Element li=(Element)items.item(j);
          if (seq == null) {
            seq=new StringBuffer();
          }
 else {
            seq.append(" and ");
          }
          seq.append(getTextContent(li));
        }
        if (seq != null) {
          result.put(split[1],seq.toString());
        }
      }
 else {
        result.put(split[1],getTextContent(node));
      }
    }
  }
  NamedNodeMap attrs=getElement().getAttributes();
  int m=attrs.getLength();
  for (int j=0; j < m; j++) {
    Node attr=attrs.item(j);
    String nodeName=attr.getNodeName();
    String[] split=nodeName.split(":");
    if (split.length == 2 && split[0].equals("bibtex")) {
      result.put(split[1],attr.getNodeValue());
    }
  }
  Set entries=result.entrySet();
  Iterator it=entries.iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    entry.setValue(((String)entry.getValue()).replaceAll("\\s+"," ").trim());
  }
  return result;
}
