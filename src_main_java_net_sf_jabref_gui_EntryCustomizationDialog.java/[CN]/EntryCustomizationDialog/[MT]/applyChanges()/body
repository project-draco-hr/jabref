{
  valueChanged(new ListSelectionEvent(new JList<>(),0,0,false));
  List<String> types=typeComp.getFields();
  for (  Map.Entry<String,List<String>> stringListEntry : reqLists.entrySet()) {
    if (!types.contains(stringListEntry.getKey())) {
      continue;
    }
    List<String> reqStr=stringListEntry.getValue();
    List<String> optStr=optLists.get(stringListEntry.getKey());
    List<String> opt2Str=opt2Lists.get(stringListEntry.getKey());
    if (opt2Str == null) {
      opt2Str=new ArrayList<>(0);
    }
    boolean changesMade=true;
    if (defaulted.contains(stringListEntry.getKey())) {
      String nm=EntryUtil.capitalizeFirst(stringListEntry.getKey());
      EntryTypes.removeType(nm);
      updateTypesForEntries(nm);
      continue;
    }
    EntryType oldType=EntryTypes.getType(stringListEntry.getKey());
    if (oldType != null) {
      List<String> oldReq=oldType.getRequiredFieldsFlat();
      List<String> oldOpt=oldType.getOptionalFields();
      if (biblatexMode) {
        List<String> oldPriOpt=oldType.getPrimaryOptionalFields();
        List<String> oldSecOpt=oldType.getSecondaryOptionalFields();
        if (equalLists(oldReq,reqStr) && equalLists(oldPriOpt,optStr) && equalLists(oldSecOpt,opt2Str)) {
          changesMade=false;
        }
      }
 else       if (equalLists(oldReq,reqStr) && equalLists(oldOpt,optStr)) {
        changesMade=false;
      }
    }
    if (changesMade) {
      CustomEntryType typ=biblatexMode ? new CustomEntryType(EntryUtil.capitalizeFirst(stringListEntry.getKey()),reqStr,optStr,opt2Str) : new CustomEntryType(EntryUtil.capitalizeFirst(stringListEntry.getKey()),reqStr,optStr);
      EntryTypes.addOrModifyCustomEntryType(typ);
      updateTypesForEntries(typ.getName());
    }
  }
  Set<Object> toRemove=new HashSet<>();
  for (  String o : EntryTypes.getAllTypes()) {
    if (!types.contains(o)) {
      toRemove.add(o);
    }
  }
  if (!toRemove.isEmpty()) {
    for (    Object aToRemove : toRemove) {
      typeDeletion((String)aToRemove);
    }
  }
  updateTables();
}
