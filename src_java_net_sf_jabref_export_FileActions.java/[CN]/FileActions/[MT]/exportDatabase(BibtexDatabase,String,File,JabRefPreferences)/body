{
  OutputStreamWriter ps=null;
  try {
    Object[] keys=database.getKeySet().toArray();
    String key, type;
    InputStreamReader reader;
    ps=new OutputStreamWriter(new FileOutputStream(outFile),"iso-8859-1");
    URL reso=JabRefFrame.class.getResource(Globals.LAYOUT_PREFIX + lfName + ".begin.layout");
    int c;
    if (reso != null) {
      reader=new InputStreamReader(reso.openStream());
      while ((c=reader.read()) != -1) {
        ps.write((char)c);
      }
      reader.close();
    }
    String pri=prefs.get("priSort"), sec=prefs.get("secSort"), ter=prefs.get("terSort");
    EntrySorter sorter=database.getSorter(new EntryComparator(prefs.getBoolean("priDescending"),prefs.getBoolean("secDescending"),prefs.getBoolean("terDescending"),pri,sec,ter));
    reso=JabRefFrame.class.getResource(Globals.LAYOUT_PREFIX + lfName + ".layout");
    reader=new InputStreamReader(reso.openStream());
    LayoutHelper layoutHelper=new LayoutHelper(reader);
    Layout defLayout=layoutHelper.getLayoutFromText();
    HashMap layouts=new HashMap();
    Layout layout;
    for (int i=0; i < sorter.getEntryCount(); i++) {
      key=(String)sorter.getIdAt(i);
      BibtexEntry entry=database.getEntryById(key);
      type=entry.getType().getName().toLowerCase();
      if (layouts.containsKey(type))       layout=(Layout)layouts.get(type);
 else {
        reso=JabRefFrame.class.getResource(Globals.LAYOUT_PREFIX + lfName + "."+ type+ ".layout");
        if (reso != null) {
          reader=new InputStreamReader(reso.openStream());
          layoutHelper=new LayoutHelper(reader);
          layout=layoutHelper.getLayoutFromText();
          layouts.put(type,layout);
        }
 else         layout=defLayout;
      }
      ps.write(layout.doLayout(entry));
    }
    reso=JabRefFrame.class.getResource(Globals.LAYOUT_PREFIX + lfName + ".end.layout");
    if (reso != null) {
      reader=new InputStreamReader(reso.openStream());
      while ((c=reader.read()) != -1) {
        ps.write((char)c);
      }
      reader.close();
    }
    ps.flush();
    ps.close();
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
