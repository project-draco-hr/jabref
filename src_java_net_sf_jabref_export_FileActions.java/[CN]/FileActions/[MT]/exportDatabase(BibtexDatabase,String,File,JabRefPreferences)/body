{
  PrintStream ps=null;
  try {
    Object[] keys=database.getKeySet().toArray();
    String key;
    InputStreamReader reader;
    ps=new PrintStream(new FileOutputStream(outFile));
    URL reso=JabRefFrame.class.getResource(Globals.LAYOUT_PREFIX + lfName + ".begin.layout");
    int c;
    if (reso != null) {
      reader=new InputStreamReader(reso.openStream());
      while ((c=reader.read()) != -1) {
        ps.write((char)c);
      }
      reader.close();
    }
    String pri=prefs.get("priSort"), sec=prefs.get("secSort"), ter=prefs.get("terSort");
    EntrySorter sorter=database.getSorter(new EntryComparator(prefs.getBoolean("priDescending"),prefs.getBoolean("secDescending"),prefs.getBoolean("terDescending"),pri,sec,ter));
    for (int i=0; i < sorter.getEntryCount(); i++) {
      reso=JabRefFrame.class.getResource(Globals.LAYOUT_PREFIX + lfName + ".layout");
      reader=new InputStreamReader(reso.openStream());
      LayoutHelper layoutHelper=new LayoutHelper(reader);
      Layout layout=layoutHelper.getLayoutFromText();
      key=(String)sorter.getIdAt(i);
      BibtexEntry entry=database.getEntryById(key);
      ps.println(layout.doLayout(entry));
    }
    reso=JabRefFrame.class.getResource(Globals.LAYOUT_PREFIX + lfName + ".end.layout");
    if (reso != null) {
      reader=new InputStreamReader(reso.openStream());
      while ((c=reader.read()) != -1) {
        ps.write((char)c);
      }
      reader.close();
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
