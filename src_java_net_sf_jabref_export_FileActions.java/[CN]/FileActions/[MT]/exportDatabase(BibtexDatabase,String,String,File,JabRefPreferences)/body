{
  String encoding="iso-8859-1";
  OutputStreamWriter ps=null;
  Object[] keys=database.getKeySet().toArray();
  String key, type;
  Reader reader;
  int c;
  ps=new OutputStreamWriter(new FileOutputStream(outFile),encoding);
  try {
    reader=getReader(prefix + lfName + ".begin.layout");
    while ((c=reader.read()) != -1) {
      ps.write((char)c);
    }
    reader.close();
  }
 catch (  IOException ex) {
  }
  String pri=prefs.get("priSort"), sec=prefs.get("secSort"), ter=prefs.get("terSort");
  EntrySorter sorter=database.getSorter(new EntryComparator(prefs.getBoolean("priDescending"),prefs.getBoolean("secDescending"),prefs.getBoolean("terDescending"),pri,sec,ter));
  reader=getReader(prefix + lfName + ".layout");
  LayoutHelper layoutHelper=new LayoutHelper(reader);
  Layout defLayout=layoutHelper.getLayoutFromText(Globals.FORMATTER_PACKAGE);
  reader.close();
  HashMap layouts=new HashMap();
  Layout layout;
  for (int i=0; i < sorter.getEntryCount(); i++) {
    key=(String)sorter.getIdAt(i);
    BibtexEntry entry=database.getEntryById(key);
    type=entry.getType().getName().toLowerCase();
    if (layouts.containsKey(type))     layout=(Layout)layouts.get(type);
 else {
      try {
        reader=getReader(prefix + lfName + "."+ type+ ".layout");
        layoutHelper=new LayoutHelper(reader);
        layout=layoutHelper.getLayoutFromText(Globals.FORMATTER_PACKAGE);
        layouts.put(type,layout);
        reader.close();
      }
 catch (      IOException ex) {
        layout=defLayout;
      }
    }
    ps.write(layout.doLayout(entry));
  }
  try {
    reader=getReader(prefix + lfName + ".end.layout");
    while ((c=reader.read()) != -1) {
      ps.write((char)c);
    }
    reader.close();
  }
 catch (  IOException ex) {
  }
  ps.flush();
  ps.close();
}
