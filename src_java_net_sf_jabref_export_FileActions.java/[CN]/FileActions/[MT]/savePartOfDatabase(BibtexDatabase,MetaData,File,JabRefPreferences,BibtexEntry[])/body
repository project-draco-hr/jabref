{
  BibtexEntry be=null;
  try {
    initFile(file,prefs.getBoolean("backup"));
    FileWriter fw=new FileWriter(file);
    fw.write(GUIGlobals.SIGNATURE);
    writePreamble(fw,database.getPreamble());
    writeStrings(fw,database);
    String pri=prefs.get("priSort");
    String sec=prefs.get("secSort");
    String ter=prefs.get("terSort");
    TreeSet sorter=new TreeSet(new CrossRefEntryComparator(new EntryComparator(prefs.getBoolean("priDescending"),prefs.getBoolean("secDescending"),prefs.getBoolean("terDescending"),pri,sec,ter)));
    if ((bes != null) && (bes.length > 0))     for (int i=0; i < bes.length; i++) {
      sorter.add(bes[i]);
    }
    FieldFormatter ff=new LatexFieldFormatter();
    for (Iterator i=sorter.iterator(); i.hasNext(); ) {
      be=(BibtexEntry)(i.next());
      be.write(fw,ff);
      fw.write("\n");
    }
    if (metaData != null) {
      metaData.writeMetaData(fw);
    }
    fw.close();
  }
 catch (  Throwable ex) {
    repairAfterError(file);
    throw new SaveException(ex.getMessage(),be);
  }
}
