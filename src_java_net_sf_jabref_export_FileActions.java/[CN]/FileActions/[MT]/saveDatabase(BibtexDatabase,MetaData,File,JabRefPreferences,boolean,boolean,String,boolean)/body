{
  TreeMap<String,BibtexEntryType> types=new TreeMap<String,BibtexEntryType>();
  boolean backup=prefs.getBoolean("backup");
  if (suppressBackup) {
    backup=false;
  }
  SaveSession session;
  BibtexEntry exceptionCause=null;
  try {
    session=new SaveSession(file,encoding,backup);
  }
 catch (  Throwable e) {
    if (encoding != null) {
      System.err.println("Error from encoding: '" + encoding + "' Len: "+ encoding.length());
    }
    e.printStackTrace();
    throw new SaveException(e.getMessage());
  }
  try {
    VerifyingWriter fw=session.getWriter();
    writeBibFileHeader(fw,encoding);
    writePreamble(fw,database.getPreamble());
    writeStrings(fw,database);
    List<BibtexEntry> sorter=getSortedEntries(database,null,true);
    FieldFormatter ff=new LatexFieldFormatter();
    for (    BibtexEntry be : sorter) {
      exceptionCause=be;
      BibtexEntryType tp=be.getType();
      if (BibtexEntryType.getStandardType(tp.getName()) == null) {
        types.put(tp.getName(),tp);
      }
      boolean write=true;
      if (checkSearch && !nonZeroField(be,BibtexFields.SEARCH)) {
        write=false;
      }
      if (checkGroup && !nonZeroField(be,BibtexFields.GROUPSEARCH)) {
        write=false;
      }
      if (write) {
        be.write(fw,ff,true);
        fw.write(Globals.NEWLINE);
      }
    }
    if (metaData != null) {
      metaData.writeMetaData(fw);
    }
    if (types.size() > 0) {
      for (Iterator<String> i=types.keySet().iterator(); i.hasNext(); ) {
        BibtexEntryType type=types.get(i.next());
        if (type instanceof CustomEntryType) {
          CustomEntryType tp=(CustomEntryType)type;
          tp.save(fw);
          fw.write(Globals.NEWLINE);
        }
      }
    }
    fw.close();
  }
 catch (  Throwable ex) {
    ex.printStackTrace();
    try {
      session.cancel();
    }
 catch (    IOException e) {
      e.printStackTrace();
      throw new SaveException(ex.getMessage() + "\n" + Globals.lang("Warning: could not complete file repair; your file may " + "have been corrupted. Error message")+ ": "+ e.getMessage());
    }
    throw new SaveException(ex.getMessage(),exceptionCause);
  }
  return session;
}
