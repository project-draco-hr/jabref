{
  String pri, sec, ter;
  boolean priD, secD, terD, priBinary=false;
  if (!isSaveOperation || !Globals.prefs.getBoolean("saveInStandardOrder")) {
    priBinary=Globals.prefs.getBoolean("priBinary");
    pri=Globals.prefs.get("priSort");
    sec=Globals.prefs.get("secSort");
    ter=Globals.prefs.get("terSort");
    priD=Globals.prefs.getBoolean("priDescending");
    secD=Globals.prefs.getBoolean("secDescending");
    terD=Globals.prefs.getBoolean("terDescending");
  }
 else {
    pri="author";
    sec="editor";
    ter="year";
    priD=false;
    secD=false;
    terD=true;
  }
  List comparators=new ArrayList();
  comparators.add(new CrossRefEntryComparator());
  comparators.add(new FieldComparator(pri,priD));
  comparators.add(new FieldComparator(sec,secD));
  comparators.add(new FieldComparator(ter,terD));
  comparators.add(new FieldComparator(Globals.KEY_FIELD));
  BasicEventList entryList=new BasicEventList();
  SortedList sorter=new SortedList(entryList,new FieldComparatorStack(comparators));
  if (keySet == null)   keySet=database.getKeySet();
  if (keySet != null) {
    Iterator i=keySet.iterator();
    for (; i.hasNext(); ) {
      sorter.add(database.getEntryById((String)(i.next())));
    }
  }
  return sorter;
}
