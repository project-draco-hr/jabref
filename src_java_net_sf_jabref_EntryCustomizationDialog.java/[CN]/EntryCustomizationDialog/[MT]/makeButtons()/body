{
  ok=new JButton(Globals.lang("Store"));
  cancel=new JButton(Globals.lang("Close"));
  delete=new JButton(Globals.lang("Delete custom"));
  importTypes=new JButton(Globals.lang("Import"));
  exportTypes=new JButton(Globals.lang("Export"));
  buttonPanel.add(ok);
  buttonPanel.add(delete);
  buttonPanel.add(Box.createHorizontalStrut(5));
  buttonPanel.add(importTypes);
  buttonPanel.add(exportTypes);
  buttonPanel.add(Box.createHorizontalStrut(5));
  buttonPanel.add(cancel);
  ok.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      save();
    }
  }
);
  cancel.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
);
  delete.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      BibtexEntryType type=BibtexEntryType.getType(name.getText());
      if (type == null)       messageLabel.setText(Globals.lang("There is no entry type") + " '" + Util.nCase(name.getText())+ "' "+ Globals.lang("defined."));
 else       if (!(type instanceof CustomEntryType))       messageLabel.setText("'" + type.getName() + "' "+ Globals.lang("is a standard type."));
 else {
        String nm=name.getText();
        if (BibtexEntryType.getStandardType(nm) == null) {
          int reply=JOptionPane.showConfirmDialog(parent,Globals.lang("All entries of this " + "type will be declared " + "typeless. Continue?"),Globals.lang("Delete custom format") + " '" + Util.nCase(nm)+ "'",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
          if (reply != JOptionPane.YES_OPTION)           return;
        }
        BibtexEntryType.removeType(nm);
        setTypeSelection();
        updateTypesForEntries(Util.nCase(nm));
        messageLabel.setText(Globals.lang("Removed entry type."));
      }
    }
  }
);
  exportTypes.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String filename=FileDialogs.getNewFile(parent,new File(System.getProperty("user.home")),".txt",JFileChooser.SAVE_DIALOG,false);
      if (filename == null)       return;
      File file=new File(filename);
      if (!file.exists() || (JOptionPane.showConfirmDialog(ths,"'" + file.getName() + "' "+ Globals.lang("exists. Overwrite file?"),Globals.lang("Export entry types"),JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)) {
        try {
          FileWriter out=new FileWriter(file);
          Iterator<String> i=BibtexEntryType.ALL_TYPES.keySet().iterator();
          while (i.hasNext()) {
            Object o=BibtexEntryType.ALL_TYPES.get(i.next());
            if (o instanceof CustomEntryType) {
              ((CustomEntryType)o).save(out);
            }
          }
          out.close();
        }
 catch (        IOException ex) {
          JOptionPane.showMessageDialog(ths,Globals.lang("Could not export entry types") + ": " + ex.getMessage(),Globals.lang("Export preferences"),JOptionPane.ERROR_MESSAGE);
        }
      }
    }
  }
);
  importTypes.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String filename=FileDialogs.getNewFile(parent,new File(System.getProperty("user.home")),".txt",JFileChooser.OPEN_DIALOG,false);
      if (filename == null)       return;
      try {
        BufferedReader in=new BufferedReader(new FileReader(new File(filename)));
        String line;
        int count=0;
        while ((line=in.readLine()) != null) {
          line=line.trim();
          if ((line.length() > 9 + GUIGlobals.ENTRYTYPE_FLAG.length()) && line.substring(0,9 + GUIGlobals.ENTRYTYPE_FLAG.length()).equals("@comment{" + GUIGlobals.ENTRYTYPE_FLAG) && line.substring(line.length() - 1).equals("}")) {
            CustomEntryType type=CustomEntryType.parseEntryType(line.substring(9,line.length() - 1));
            if (type != null) {
              BibtexEntryType.ALL_TYPES.put(type.getName().toLowerCase(),type);
              count++;
            }
          }
          if (count > 0) {
            setTypeSelection();
            req_ta.setText("");
            opt_ta.setText("");
            name.setText("");
            messageLabel.setText(Globals.lang("Imported entry types") + ": " + count);
          }
        }
      }
 catch (      IOException ex) {
        JOptionPane.showMessageDialog(ths,Globals.lang("Could not import entry types") + ": " + ex.getMessage(),Globals.lang("Import entry types"),JOptionPane.ERROR_MESSAGE);
      }
    }
  }
);
}
