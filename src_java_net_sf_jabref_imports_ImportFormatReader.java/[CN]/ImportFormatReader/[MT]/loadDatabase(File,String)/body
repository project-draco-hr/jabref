{
  Reader reader=getReader(fileToOpen,encoding);
  String suppliedEncoding=null;
  StringBuffer headerText=new StringBuffer();
  try {
    boolean keepon=true;
    int piv=0;
    int c;
    while (keepon) {
      c=reader.read();
      headerText.append((char)c);
      if (((piv == 0) && Character.isWhitespace((char)c)) || (c == GUIGlobals.SIGNATURE.charAt(piv)))       piv++;
 else       keepon=false;
      found:       if (piv == GUIGlobals.SIGNATURE.length()) {
        keepon=false;
        while (reader.read() != '\n')         ;
        for (int i=0; i < GUIGlobals.encPrefix.length(); i++) {
          if (reader.read() != GUIGlobals.encPrefix.charAt(i))           break found;
        }
        StringBuffer sb=new StringBuffer();
        while ((c=reader.read()) != '\n')         sb.append((char)c);
        suppliedEncoding=sb.toString();
      }
    }
  }
 catch (  IOException ex) {
  }
  if ((suppliedEncoding != null) && (!suppliedEncoding.equalsIgnoreCase(encoding))) {
    Reader oldReader=reader;
    try {
      reader=getReader(fileToOpen,suppliedEncoding);
      oldReader.close();
    }
 catch (    IOException ex) {
      reader=oldReader;
    }
  }
 else {
    reader.close();
    reader=getReader(fileToOpen,encoding);
  }
  BibtexParser bp=new BibtexParser(reader);
  ParserResult pr=bp.parse();
  pr.setEncoding(encoding);
  return pr;
}
