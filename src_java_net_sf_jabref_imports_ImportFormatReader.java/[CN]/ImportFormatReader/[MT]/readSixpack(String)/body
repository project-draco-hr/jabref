{
  final String SEPARATOR=new String(new char[]{0,48});
  HashMap fI=new HashMap();
  fI.put("id","bibtexkey");
  fI.put("au","author");
  fI.put("ti","title");
  fI.put("jo","journal");
  fI.put("vo","volume");
  fI.put("nu","number");
  fI.put("pa","pages");
  fI.put("mo","month");
  fI.put("yr","year");
  fI.put("kw","keywords");
  fI.put("ab","abstract");
  fI.put("no","note");
  fI.put("ed","editor");
  fI.put("pu","publisher");
  fI.put("se","series");
  fI.put("ad","address");
  fI.put("en","edition");
  fI.put("ch","chapter");
  fI.put("hp","howpublished");
  fI.put("tb","booktitle");
  fI.put("or","organization");
  fI.put("sc","school");
  fI.put("in","institution");
  fI.put("ty","type");
  fI.put("url","url");
  fI.put("cr","crossref");
  ArrayList bibitems=new ArrayList();
  File f=new File(filename);
  if (!f.exists() && !f.canRead() && !f.isFile()) {
    System.err.println("Error " + filename + " is not a valid file and|or is not readable.");
    return null;
  }
  try {
    BufferedReader in=new BufferedReader(new FileReader(filename));
    in.readLine();
    String[] fieldDef=in.readLine().split(",");
    String s=null;
    BibtexEntry entry=null;
    lines:     while ((s=in.readLine()) != null) {
      try {
        s=s.replaceAll("<par>","");
        String[] fields=s.split(SEPARATOR);
        if (fields.length < 2)         continue lines;
        BibtexEntryType typ=BibtexEntryType.getType(fields[1].toLowerCase());
        if (typ == null) {
          String type="";
          if (fields[1].equals("Masterthesis"))           type="mastersthesis";
          if (fields[1].equals("PhD-Thesis"))           type="phdthesis";
          if (fields[1].equals("miscellaneous"))           type="misc";
          if (fields[1].equals("Conference"))           type="proceedings";
          typ=BibtexEntryType.getType(type.toLowerCase());
        }
        entry=new BibtexEntry(Util.createNeutralId(),typ);
        String fld;
        for (int i=0; i < Math.min(fieldDef.length,fields.length); i++) {
          fld=(String)fI.get(fieldDef[i]);
          if (fld != null) {
            if (fld.equals("author") || fld.equals("editor"))             setField(entry,fld,fields[i].replaceAll(" and ",", ").replaceAll(", "," and "));
 else             if (fld.equals("pages"))             setField(entry,fld,fields[i].replaceAll("-","--"));
 else             setField(entry,fld,fields[i]);
          }
        }
        bibitems.add(entry);
      }
 catch (      NullPointerException ex) {
        Globals.logger("Problem parsing Sixpack entry, ignoring entry.");
      }
    }
    in.close();
  }
 catch (  IOException e) {
    return null;
  }
  return bibitems;
}
