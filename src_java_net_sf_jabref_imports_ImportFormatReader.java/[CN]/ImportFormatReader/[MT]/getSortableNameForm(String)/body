{
  int commaPos=name.indexOf(',');
  if (commaPos == -1) {
    String[] parts=name.split(" ");
    int piv=parts.length - 1;
    if (piv < 0)     return name;
    while (Globals.JUNIOR_PARTICLES.contains(parts[piv])) {
      piv--;
    }
    StringBuffer sb=new StringBuffer(parts[piv]);
    for (int i=piv + 1; i < parts.length; i++) {
      sb.append(' ');
      sb.append(parts[i]);
    }
    piv--;
    if (piv >= 0)     sb.append(",");
    for (int i=0; i <= piv; i++) {
      sb.append(' ');
      sb.append(parts[i]);
    }
    return sb.toString();
  }
 else {
    String[] lnParts=name.substring(0,commaPos).split(" ");
    int piv=0;
    while ((piv < lnParts.length - 1) && isVonParticle(lnParts[piv]))     piv++;
    StringBuffer sb=new StringBuffer(lnParts[piv]);
    for (int i=piv + 1; i < lnParts.length; i++) {
      sb.append(' ');
      sb.append(lnParts[i]);
    }
    sb.append(',');
    int splitPos=Math.min(name.length() - 1,commaPos + 1);
    String[] fnParts=name.substring(splitPos).trim().split(" ");
    for (int i=0; i < fnParts.length; i++) {
      sb.append(' ');
      sb.append(fnParts[i]);
    }
    if (piv > 0)     for (int i=0; i < piv; i++) {
      sb.append(' ');
      sb.append(lnParts[i]);
    }
    return sb.toString();
  }
}
