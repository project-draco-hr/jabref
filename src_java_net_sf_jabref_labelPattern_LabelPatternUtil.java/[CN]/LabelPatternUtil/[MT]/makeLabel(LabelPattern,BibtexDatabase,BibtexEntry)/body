{
  _db=database;
  ArrayList<String> _al;
  String _label;
  StringBuffer _sb=new StringBuffer();
  boolean forceUpper=false, forceLower=false;
  try {
    String _type=_entry.getType().getName().toLowerCase();
    _al=table.getValue(_type);
    int _alSize=_al.size();
    boolean field=false;
    for (int i=1; i < _alSize; i++) {
      String val=_al.get(i).toString();
      if (val.equals("[")) {
        field=true;
      }
 else       if (val.equals("]")) {
        field=false;
      }
 else       if (field) {
        String[] parts=val.split(":");
        String label=makeLabel(_entry,parts[0]);
        if (parts.length > 1)         for (int j=1; j < parts.length; j++) {
          String modifier=parts[j];
          if (modifier.equals("lower")) {
            label=label.toLowerCase();
          }
 else           if (modifier.equals("abbr")) {
            StringBuffer abbr=new StringBuffer();
            String[] words=label.toString().replaceAll("[\\{\\}']","").split("[ \r\n\"]");
            for (int word=0; word < words.length; word++)             if (words[word].length() > 0)             abbr.append(words[word].charAt(0));
            label=abbr.toString();
          }
 else {
            Globals.logger("Key generator warning: unknown modifier '" + modifier + "'.");
          }
        }
        _sb.append(label);
      }
 else {
        _sb.append(val);
      }
    }
  }
 catch (  Exception e) {
    System.err.println(e);
  }
  _label=Util.checkLegalKey(_sb.toString());
  String regex=Globals.prefs.get("KeyPatternRegex");
  if ((regex != null) && (regex.trim().length() > 0)) {
    String replacement=Globals.prefs.get("KeyPatternReplacement");
    _label=_label.replaceAll(regex,replacement);
  }
  if (forceUpper) {
    _label=_label.toUpperCase();
  }
  if (forceLower) {
    _label=_label.toLowerCase();
  }
  String oldKey=_entry.getCiteKey();
  int occurences=_db.getNumberOfKeyOccurences(_label);
  if ((oldKey != null) && oldKey.equals(_label))   occurences--;
  if (occurences == 0) {
    if (!_label.equals(oldKey))     _db.setCiteKeyForEntry(_entry.getId(),_label);
  }
 else {
    int number=0;
    String moddedKey=_label + getAddition(number);
    occurences=_db.getNumberOfKeyOccurences(moddedKey);
    if ((oldKey != null) && oldKey.equals(moddedKey))     occurences--;
    while (occurences > 0) {
      number++;
      moddedKey=_label + getAddition(number);
      occurences=_db.getNumberOfKeyOccurences(moddedKey);
      if ((oldKey != null) && oldKey.equals(moddedKey))       occurences--;
    }
    if (!moddedKey.equals(oldKey)) {
      _db.setCiteKeyForEntry(_entry.getId(),moddedKey);
    }
  }
  return _entry;
}
