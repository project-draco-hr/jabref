{
  List<String> cited=findCitedKeys();
  Map<String,BibDatabase> linkSourceBase=new HashMap<>();
  Map<BibEntry,BibDatabase> entries=findCitedEntries(databases,cited,linkSourceBase);
  XNameAccess xReferenceMarks=getReferenceMarks();
  List<String> names;
  if (style.isSortByPosition()) {
    names=sortedReferenceMarks;
  }
 else   if (style.isNumberEntries()) {
    SortedMap<BibEntry,BibDatabase> newMap=new TreeMap<>(entryComparator);
    for (    Map.Entry<BibEntry,BibDatabase> bibtexEntryBibtexDatabaseEntry : entries.entrySet()) {
      newMap.put(bibtexEntryBibtexDatabaseEntry.getKey(),bibtexEntryBibtexDatabaseEntry.getValue());
    }
    entries=newMap;
    cited.clear();
    for (    BibEntry entry : entries.keySet()) {
      cited.add(entry.getCiteKeyOptional().orElse(null));
    }
    names=Arrays.asList(xReferenceMarks.getElementNames());
  }
 else {
    names=sortedReferenceMarks;
  }
  List<String> tmp=new ArrayList<>();
  for (  String name : names) {
    if (CITE_PATTERN.matcher(name).find()) {
      tmp.add(name);
    }
  }
  names=tmp;
  Map<String,Integer> numbers=new HashMap<>();
  int lastNum=0;
  String[] citMarkers=new String[names.size()];
  String[][] normCitMarkers=new String[names.size()][];
  String[][] bibtexKeys=new String[names.size()][];
  int minGroupingCount=style.getIntCitProperty(OOBibStyle.MINIMUM_GROUPING_COUNT);
  int[] types=new int[names.size()];
  for (int i=0; i < names.size(); i++) {
    Matcher citeMatcher=CITE_PATTERN.matcher(names.get(i));
    if (citeMatcher.find()) {
      String typeStr=citeMatcher.group(1);
      int type=Integer.parseInt(typeStr);
      types[i]=type;
      String[] keys=citeMatcher.group(2).split(",");
      bibtexKeys[i]=keys;
      BibEntry[] cEntries=new BibEntry[keys.length];
      for (int j=0; j < cEntries.length; j++) {
        BibDatabase database=linkSourceBase.get(keys[j]);
        Optional<BibEntry> tmpEntry=Optional.empty();
        if (database != null) {
          tmpEntry=database.getEntryByKey(keys[j]);
        }
        if (tmpEntry.isPresent()) {
          cEntries[j]=tmpEntry.get();
        }
 else {
          LOGGER.info("BibTeX key not found: '" + keys[j] + '\'');
          LOGGER.info("Problem with reference mark: '" + names.get(i) + '\'');
          cEntries[j]=new UndefinedBibtexEntry(keys[j]);
        }
      }
      String[] normCitMarker=new String[keys.length];
      String citationMarker;
      if (style.isBibtexKeyCiteMarkers()) {
        StringBuilder sb=new StringBuilder();
        normCitMarkers[i]=new String[keys.length];
        for (int j=0; j < keys.length; j++) {
          normCitMarkers[i][j]=cEntries[j].getCiteKeyOptional().orElse(null);
          sb.append(cEntries[j].getCiteKeyOptional().orElse(""));
          if (j < (keys.length - 1)) {
            sb.append(',');
          }
        }
        citationMarker=sb.toString();
      }
 else       if (style.isNumberEntries()) {
        if (style.isSortByPosition()) {
          List<Integer> num=new ArrayList<>(keys.length);
          for (int j=0; j < keys.length; j++) {
            if (cEntries[j] instanceof UndefinedBibtexEntry) {
              num.add(j,-1);
            }
 else {
              num.add(j,lastNum + 1);
              if (numbers.containsKey(keys[j])) {
                num.set(j,numbers.get(keys[j]));
              }
 else {
                numbers.put(keys[j],num.get(j));
                lastNum=num.get(j);
              }
            }
          }
          citationMarker=style.getNumCitationMarker(num,minGroupingCount,false);
          for (int j=0; j < keys.length; j++) {
            normCitMarker[j]=style.getNumCitationMarker(Collections.singletonList(num.get(j)),minGroupingCount,false);
          }
        }
 else {
          List<Integer> num=findCitedEntryIndex(names.get(i),cited);
          if (num.isEmpty()) {
            throw new BibEntryNotFoundException(names.get(i),Localization.lang("Could not resolve BibTeX entry for citation marker '%0'.",names.get(i)));
          }
 else {
            citationMarker=style.getNumCitationMarker(num,minGroupingCount,false);
          }
          for (int j=0; j < keys.length; j++) {
            List<Integer> list=new ArrayList<>(1);
            list.add(num.get(j));
            normCitMarker[j]=style.getNumCitationMarker(list,minGroupingCount,false);
          }
        }
      }
 else {
        if (cEntries.length > 1) {
          if (style.getBooleanCitProperty(OOBibStyle.MULTI_CITE_CHRONOLOGICAL)) {
            Arrays.sort(cEntries,yearAuthorTitleComparator);
          }
 else {
            Arrays.sort(cEntries,entryComparator);
          }
          for (int j=0; j < cEntries.length; j++) {
            bibtexKeys[i][j]=cEntries[j].getCiteKeyOptional().orElse(null);
          }
        }
        citationMarker=style.getCitationMarker(Arrays.asList(cEntries),entries,type == OOBibBase.AUTHORYEAR_PAR,null,null);
        for (int j=0; j < cEntries.length; j++) {
          normCitMarker[j]=style.getCitationMarker(Collections.singletonList(cEntries[j]),entries,true,null,new int[]{-1});
        }
      }
      citMarkers[i]=citationMarker;
      normCitMarkers[i]=normCitMarker;
    }
  }
  uniquefiers.clear();
  if (!style.isBibtexKeyCiteMarkers() && !style.isNumberEntries()) {
    Map<String,List<String>> refKeys=new HashMap<>();
    Map<String,List<Integer>> refNums=new HashMap<>();
    for (int i=0; i < citMarkers.length; i++) {
      String[] markers=normCitMarkers[i];
      for (int j=0; j < markers.length; j++) {
        String marker=markers[j];
        String currentKey=bibtexKeys[i][j];
        if (refKeys.containsKey(marker)) {
          if (!refKeys.get(marker).contains(currentKey)) {
            refKeys.get(marker).add(currentKey);
            refNums.get(marker).add(i);
          }
        }
 else {
          List<String> l=new ArrayList<>(1);
          l.add(currentKey);
          refKeys.put(marker,l);
          List<Integer> l2=new ArrayList<>(1);
          l2.add(i);
          refNums.put(marker,l2);
        }
      }
    }
    for (    Map.Entry<String,List<String>> stringListEntry : refKeys.entrySet()) {
      List<String> keys=stringListEntry.getValue();
      if (keys.size() > 1) {
        int uniq='a';
        for (        String key : keys) {
          uniquefiers.put(key,String.valueOf((char)uniq));
          uniq++;
        }
      }
    }
    int maxAuthorsFirst=style.getIntCitProperty(OOBibStyle.MAX_AUTHORS_FIRST);
    Set<String> seenBefore=new HashSet<>();
    for (int j=0; j < bibtexKeys.length; j++) {
      boolean needsChange=false;
      int[] firstLimAuthors=new int[bibtexKeys[j].length];
      String[] uniquif=new String[bibtexKeys[j].length];
      BibEntry[] cEntries=new BibEntry[bibtexKeys[j].length];
      for (int k=0; k < bibtexKeys[j].length; k++) {
        String currentKey=bibtexKeys[j][k];
        firstLimAuthors[k]=-1;
        if (maxAuthorsFirst > 0) {
          if (!seenBefore.contains(currentKey)) {
            firstLimAuthors[k]=maxAuthorsFirst;
          }
          seenBefore.add(currentKey);
        }
        String uniq=uniquefiers.get(currentKey);
        Optional<BibEntry> tmpEntry=Optional.empty();
        if (uniq == null) {
          if (firstLimAuthors[k] > 0) {
            needsChange=true;
            BibDatabase database=linkSourceBase.get(currentKey);
            if (database != null) {
              tmpEntry=database.getEntryByKey(currentKey);
            }
          }
 else {
            BibDatabase database=linkSourceBase.get(currentKey);
            if (database != null) {
              tmpEntry=database.getEntryByKey(currentKey);
            }
          }
          uniquif[k]="";
        }
 else {
          needsChange=true;
          BibDatabase database=linkSourceBase.get(currentKey);
          if (database != null) {
            tmpEntry=database.getEntryByKey(currentKey);
          }
          uniquif[k]=uniq;
        }
        if (tmpEntry.isPresent()) {
          cEntries[k]=tmpEntry.get();
        }
      }
      if (needsChange) {
        citMarkers[j]=style.getCitationMarker(Arrays.asList(cEntries),entries,types[j] == OOBibBase.AUTHORYEAR_PAR,uniquif,firstLimAuthors);
      }
    }
  }
  boolean hadBibSection=getBookmarkRange(OOBibBase.BIB_SECTION_NAME) != null;
  boolean mustTestCharFormat=style.isFormatCitations();
  for (int i=0; i < names.size(); i++) {
    Object referenceMark=xReferenceMarks.getByName(names.get(i));
    XTextContent bookmark=UnoRuntime.queryInterface(XTextContent.class,referenceMark);
    XTextCursor cursor=bookmark.getAnchor().getText().createTextCursorByRange(bookmark.getAnchor());
    if (mustTestCharFormat) {
      mustTestCharFormat=false;
      XPropertySet xCursorProps=UnoRuntime.queryInterface(XPropertySet.class,cursor);
      String charStyle=style.getCitationCharacterFormat();
      try {
        xCursorProps.setPropertyValue(CHAR_STYLE_NAME,charStyle);
      }
 catch (      UnknownPropertyException|PropertyVetoException|IllegalArgumentException|WrappedTargetException ex) {
        throw new UndefinedCharacterFormatException(charStyle);
      }
    }
    text.removeTextContent(bookmark);
    insertReferenceMark(names.get(i),citMarkers[i],cursor,types[i] != OOBibBase.INVISIBLE_CIT,style);
    if (hadBibSection && (getBookmarkRange(OOBibBase.BIB_SECTION_NAME) == null)) {
      cursor.collapseToEnd();
      OOUtil.insertParagraphBreak(text,cursor);
      insertBookMark(OOBibBase.BIB_SECTION_NAME,cursor);
    }
  }
  List<String> unresolvedKeys=new ArrayList<>();
  for (  BibEntry entry : entries.keySet()) {
    if (entry instanceof UndefinedBibtexEntry) {
      String key=((UndefinedBibtexEntry)entry).getKey();
      if (!unresolvedKeys.contains(key)) {
        unresolvedKeys.add(key);
      }
    }
  }
  return unresolvedKeys;
}
