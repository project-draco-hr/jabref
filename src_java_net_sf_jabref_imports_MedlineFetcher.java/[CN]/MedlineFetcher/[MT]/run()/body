{
  idList=tf.getText().replace(';',',');
  Pattern p1=Pattern.compile("\\d+[,\\d+]*"), p2=Pattern.compile(".+[,.+]*");
  Matcher m1=p1.matcher(idList), m2=p2.matcher(idList);
  if (m1.matches()) {
    panel.frame().output(Globals.lang("Fetching Medline by id ..."));
    idList=tf.getText().replace(';',',');
    fetchById();
  }
 else   if (m2.matches()) {
    panel.frame().output(Globals.lang("Fetching Medline by term ..."));
    String searchTerm=setupTerm(idList);
    SearchResult result=getIds(searchTerm,0,1);
    if (result.count == 0) {
      JOptionPane.showMessageDialog(panel.frame(),Globals.lang("No references found"));
      return;
    }
    String question=Globals.lang("References found") + ": " + Integer.toString(result.count)+ "  "+ Globals.lang("Number of references to fetch?");
    String strCount=JOptionPane.showInputDialog(question,Integer.toString(result.count));
    if (strCount == "")     return;
    int count;
    try {
      count=Integer.parseInt(strCount);
    }
 catch (    NumberFormatException ex) {
      panel.output("");
      return;
    }
    ImportInspectionDialog diag=new ImportInspectionDialog(panel.frame(),panel,GUIGlobals.DEFAULT_INSPECTION_FIELDS,Globals.lang("Fetch Medline"),false);
    Util.placeDialog(diag,panel.frame());
    diag.setVisible(true);
    keepOn=true;
    diag.addCallBack(new ImportInspectionDialog.CallBack(){
      public void done(      int entriesImported){
        if (entriesImported > 0) {
          panel.output(Globals.lang("Medline entries fetched") + ": " + entriesImported);
          panel.markBaseChanged();
        }
 else         panel.output(Globals.lang("No Medline entries found."));
      }
      public void cancelled(){
        panel.output(Globals.lang("%0 import cancelled.","Medline"));
      }
      public void stopFetching(){
        keepOn=false;
      }
    }
);
    for (int jj=0; jj < count; jj+=PACING) {
      if (!keepOn)       break;
      result=getIds(searchTerm,jj,PACING);
      final ArrayList bibs=fetchMedline(result.ids);
      if (!keepOn)       break;
      diag.addEntries(bibs);
      diag.setProgress(jj + PACING,count);
    }
    diag.entryListComplete();
  }
}
