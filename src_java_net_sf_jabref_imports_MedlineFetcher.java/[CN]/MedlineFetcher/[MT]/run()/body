{
  idList=tf.getText().replace(';',',');
  Pattern p1=Pattern.compile("\\d+[,\\d+]*"), p2=Pattern.compile(".+[,.+]*");
  Matcher m1=p1.matcher(idList), m2=p2.matcher(idList);
  if (m1.matches()) {
    panel.frame().output(Globals.lang("Fetching Medline by id ..."));
    idList=tf.getText().replace(';',',');
    fetchById();
  }
 else   if (m2.matches()) {
    panel.frame().output(Globals.lang("Fetching Medline by term ..."));
    String searchTerm=setupTerm(idList);
    SearchResult result=getIds(searchTerm,0,1);
    if (result.count == 0) {
      JOptionPane.showMessageDialog(panel.frame(),Globals.lang("No references found"));
      return;
    }
    String question=Globals.lang("References found") + ": " + Integer.toString(result.count)+ "  "+ Globals.lang("Number of references to fetch?");
    String strCount=JOptionPane.showInputDialog(question,Integer.toString(result.count));
    if (strCount == "")     return;
    int count;
    try {
      count=Integer.parseInt(strCount);
    }
 catch (    NumberFormatException ex) {
      panel.output("");
      return;
    }
    for (int jj=0; jj < count; jj+=PACING) {
      result=getIds(searchTerm,jj,PACING);
      String[] test=getTitles((String[])result.idList.toArray(new String[0]));
      for (int pelle=0; pelle < test.length; pelle++) {
        System.out.println(": " + test[pelle]);
      }
      ArrayList bibs=fetchMedline(result.ids);
      if ((bibs != null) && (bibs.size() > 0)) {
        tf.setText("");
        panel.frame().addBibEntries(bibs,null,false);
        panel.output(Globals.lang("Medline entries fetched") + ": " + bibs.size());
        BibtexEntry[] entries=(BibtexEntry[])bibs.toArray(new BibtexEntry[0]);
        panel.selectEntries(entries,0);
        if (entries.length == 1)         panel.showEntry(entries[0]);
        panel.markBaseChanged();
        panel.refreshTable();
      }
 else       panel.output(Globals.lang("No Medline entries found."));
    }
  }
}
