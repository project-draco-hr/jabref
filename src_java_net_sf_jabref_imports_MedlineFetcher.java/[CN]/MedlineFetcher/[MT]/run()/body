{
  String idList=tf.getText().replace(';',',');
  Pattern p1=Pattern.compile("\\d+[,\\d+]*"), p2=Pattern.compile(".+[,.+]*");
  Matcher m1=p1.matcher(idList), m2=p2.matcher(idList);
  if (m1.matches()) {
    fetchById();
  }
 else   if (m2.matches()) {
    panel.frame().output(Globals.lang("Fetching Medline by author..."));
    idList=setupTerm(idList);
    String[] idListArray=getIds(idList);
    int idMax=idListArray.length;
    Util.pr("fikk " + idListArray.length);
    String[] titles=new String[idMax];
    titles=getTitles(idListArray);
    Util.pr("titler " + titles.length);
    authorDialog=new AuthorDialog(jFrame,titles);
    boolean[] picks=authorDialog.showDialog();
    idList="";
    for (int i=0; i < titles.length; i++) {
      if (picks[i]) {
        idList+=idListArray[i] + ",";
      }
    }
    ArrayList bibs=fetchMedline(idList);
    if ((bibs != null) && (bibs.size() > 0)) {
      tf.setText("");
      NamedCompound ce=new NamedCompound("fetch Medline");
      Iterator i=bibs.iterator();
      while (i.hasNext()) {
        try {
          BibtexEntry be=(BibtexEntry)i.next();
          String id=Util.createId(be.getType(),panel.database());
          be.setId(id);
          panel.database().insertEntry(be);
          ce.addEdit(new UndoableInsertEntry(panel.database(),be,panel));
        }
 catch (        KeyCollisionException ex) {
        }
      }
      ce.end();
      panel.output(Globals.lang("Medline entries fetched") + ": " + bibs.size());
      panel.undoManager.addEdit(ce);
      panel.markBaseChanged();
      panel.refreshTable();
    }
 else     panel.output(Globals.lang("No Medline entries found."));
  }
 else {
    JOptionPane.showMessageDialog(panel.frame(),Globals.lang("Please enter a semicolon or comma separated list of either Medline IDs (numbers), " + "or author names to search for."),Globals.lang("Input error"),JOptionPane.ERROR_MESSAGE);
  }
}
