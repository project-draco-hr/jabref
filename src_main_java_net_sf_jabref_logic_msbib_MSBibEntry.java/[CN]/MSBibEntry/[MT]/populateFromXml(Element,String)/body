{
  String temp;
  sourceType=getFromXml(bcol + "SourceType",entry);
  tag=getFromXml(bcol + "Tag",entry);
  temp=getFromXml(bcol + "LCID",entry);
  if (temp != null) {
    try {
      LCID=Integer.parseInt(temp);
    }
 catch (    NumberFormatException e) {
      LCID=-1;
    }
  }
  title=getFromXml(bcol + "Title",entry);
  year=getFromXml(bcol + "Year",entry);
  month=getFromXml(bcol + "Month",entry);
  day=getFromXml(bcol + "Day",entry);
  shortTitle=getFromXml(bcol + "ShortTitle",entry);
  comments=getFromXml(bcol + "Comments",entry);
  temp=getFromXml(bcol + "Pages",entry);
  if (temp != null) {
    pages=new PageNumbers(temp);
  }
  volume=getFromXml(bcol + "Volume",entry);
  numberOfVolumes=getFromXml(bcol + "NumberVolumes",entry);
  edition=getFromXml(bcol + "Edition",entry);
  standardNumber=getFromXml(bcol + "StandardNumber",entry);
  publisher=getFromXml(bcol + "Publisher",entry);
  String city=getFromXml(bcol + "City",entry);
  String state=getFromXml(bcol + "StateProvince",entry);
  String country=getFromXml(bcol + "CountryRegion",entry);
  StringBuilder addressBuffer=new StringBuilder();
  if (city != null) {
    addressBuffer.append(city).append(", ");
  }
  if (state != null) {
    addressBuffer.append(state).append(' ');
  }
  if (country != null) {
    addressBuffer.append(country);
  }
  address=addressBuffer.toString().trim();
  if (address.isEmpty() || ",".equals(address)) {
    address=null;
  }
  bookTitle=getFromXml(bcol + "BookTitle",entry);
  chapterNumber=getFromXml(bcol + "ChapterNumber",entry);
  journalName=getFromXml(bcol + "JournalName",entry);
  issue=getFromXml(bcol + "Issue",entry);
  periodicalTitle=getFromXml(bcol + "PeriodicalTitle",entry);
  conferenceName=getFromXml(bcol + "ConferenceName",entry);
  department=getFromXml(bcol + "Department",entry);
  institution=getFromXml(bcol + "Institution",entry);
  thesisType=getFromXml(bcol + "ThesisType",entry);
  internetSiteTitle=getFromXml(bcol + "InternetSiteTitle",entry);
  String month=getFromXml(bcol + "MonthAccessed",entry);
  String day=getFromXml(bcol + "DayAccessed",entry);
  String year=getFromXml(bcol + "YearAccessed",entry);
  dateAccessed="";
  if (month != null) {
    dateAccessed+=month + ' ';
  }
  if (day != null) {
    dateAccessed+=day + ", ";
  }
  if (year != null) {
    dateAccessed+=year;
  }
  dateAccessed=dateAccessed.trim();
  if (dateAccessed.isEmpty() || ",".equals(dateAccessed)) {
    dateAccessed=null;
  }
  url=getFromXml(bcol + "URL",entry);
  productionCompany=getFromXml(bcol + "ProductionCompany",entry);
  publicationTitle=getFromXml(bcol + "PublicationTitle",entry);
  medium=getFromXml(bcol + "Medium",entry);
  albumTitle=getFromXml(bcol + "AlbumTitle",entry);
  recordingNumber=getFromXml(bcol + "RecordingNumber",entry);
  theater=getFromXml(bcol + "Theater",entry);
  distributor=getFromXml(bcol + "Distributor",entry);
  broadcastTitle=getFromXml(bcol + "BroadcastTitle",entry);
  broadcaster=getFromXml(bcol + "Broadcaster",entry);
  station=getFromXml(bcol + "Station",entry);
  type=getFromXml(bcol + "Type",entry);
  patentNumber=getFromXml(bcol + "PatentNumber",entry);
  court=getFromXml(bcol + "Court",entry);
  reporter=getFromXml(bcol + "Reporter",entry);
  caseNumber=getFromXml(bcol + "CaseNumber",entry);
  abbreviatedCaseNumber=getFromXml(bcol + "AbbreviatedCaseNumber",entry);
  bibTexSeries=getFromXml(bcol + BIBTEX + "Series",entry);
  bibTexAbstract=getFromXml(bcol + BIBTEX + "Abstract",entry);
  bibTexKeyWords=getFromXml(bcol + BIBTEX + "KeyWords",entry);
  bibTexCrossRef=getFromXml(bcol + BIBTEX + "CrossRef",entry);
  bibTex_HowPublished=getFromXml(bcol + BIBTEX + "HowPublished",entry);
  bibTexAffiliation=getFromXml(bcol + BIBTEX + "Affiliation",entry);
  bibTexContents=getFromXml(bcol + BIBTEX + "Contents",entry);
  bibTexCopyright=getFromXml(bcol + BIBTEX + "Copyright",entry);
  bibTexPrice=getFromXml(bcol + BIBTEX + "Price",entry);
  bibTexSize=getFromXml(bcol + BIBTEX + "Size",entry);
  NodeList nodeLst=entry.getElementsByTagName(bcol + "Author");
  if (nodeLst.getLength() > 0) {
    getAuthors((Element)nodeLst.item(0),bcol);
  }
}
