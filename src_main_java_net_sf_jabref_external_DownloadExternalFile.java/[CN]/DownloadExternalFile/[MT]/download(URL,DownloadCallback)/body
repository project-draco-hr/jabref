{
  String res=url.toString();
  String mimeType;
  final File tmp=File.createTempFile("jabref_download","tmp");
  tmp.deleteOnExit();
  URLDownload udl=URLDownload.buildMonitoredDownload(frame,url);
  try {
    mimeType=udl.determineMimeType();
  }
 catch (  IOException ex) {
    JOptionPane.showMessageDialog(frame,Globals.lang("Invalid URL") + ": " + ex.getMessage(),Globals.lang("Download file"),JOptionPane.ERROR_MESSAGE);
    LOGGER.info("Error while downloading " + "'" + res + "'",ex);
    return;
  }
  final URL urlF=url;
  final URLDownload udlF=udl;
  JabRefExecutorService.INSTANCE.execute(new Runnable(){
    @Override public void run(){
      try {
        udlF.downloadToFile(tmp);
      }
 catch (      IOException e2) {
        dontShowDialog=true;
        if ((editor != null) && (editor.isVisible())) {
          editor.setVisible(false,false);
        }
        JOptionPane.showMessageDialog(frame,Globals.lang("Invalid URL") + ": " + e2.getMessage(),Globals.lang("Download file"),JOptionPane.ERROR_MESSAGE);
        LOGGER.info("Error while downloading " + "'" + urlF.toString() + "'",e2);
        return;
      }
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          downloadFinished();
        }
      }
);
    }
  }
);
  ExternalFileType suggestedType=null;
  if (mimeType != null) {
    System.out.println("mimetype:" + mimeType);
    suggestedType=Globals.prefs.getExternalFileTypeByMimeType(mimeType);
  }
  String suffix;
  if (suggestedType != null) {
    suffix=suggestedType.getExtension();
  }
 else {
    suffix=getSuffix(res);
    suggestedType=Globals.prefs.getExternalFileTypeByExt(suffix);
  }
  String suggestedName=bibtexKey != null ? getSuggestedFileName(suffix) : "";
  String[] fDirectory=getFileDirectory(res);
  final String directory;
  if (fDirectory.length == 0) {
    directory=null;
  }
 else {
    directory=fDirectory[0];
  }
  final String suggestDir=directory != null ? directory : System.getProperty("user.home");
  File file=new File(new File(suggestDir),suggestedName);
  FileListEntry entry=new FileListEntry("",bibtexKey != null ? file.getCanonicalPath() : "",suggestedType);
  editor=new FileListEntryEditor(frame,entry,true,false,metaData);
  editor.getProgressBar().setIndeterminate(true);
  editor.setOkEnabled(false);
  editor.setExternalConfirm(new ConfirmCloseFileListEntryEditor(){
    @Override public boolean confirmClose(    FileListEntry entry){
      File f=directory != null ? expandFilename(directory,entry.getLink()) : new File(entry.getLink());
      if (f.isDirectory()) {
        JOptionPane.showMessageDialog(frame,Globals.lang("Target file cannot be a directory."),Globals.lang("Download file"),JOptionPane.ERROR_MESSAGE);
        return false;
      }
      if (f.exists()) {
        return JOptionPane.showConfirmDialog(frame,"'" + f.getName() + "' "+ Globals.lang("exists. Overwrite file?"),Globals.lang("Download file"),JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION;
      }
 else {
        return true;
      }
    }
  }
);
  if (!dontShowDialog) {
    editor.setVisible(true,false);
  }
 else {
    return;
  }
  if (editor.okPressed()) {
    File toFile=directory != null ? expandFilename(directory,entry.getLink()) : new File(entry.getLink());
    String dirPrefix;
    if (directory != null) {
      if (!directory.endsWith(System.getProperty("file.separator"))) {
        dirPrefix=directory + System.getProperty("file.separator");
      }
 else {
        dirPrefix=directory;
      }
    }
 else {
      dirPrefix=null;
    }
    try {
      boolean success=FileUtil.copyFile(tmp,toFile,true);
      if (!success) {
        System.out.println("File already exists! DownloadExternalFile.download()");
      }
      if ((directory != null) && entry.getLink().startsWith(directory) && (entry.getLink().length() > dirPrefix.length())) {
        entry.setLink(entry.getLink().substring(dirPrefix.length()));
      }
      callback.downloadComplete(entry);
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
    tmp.delete();
  }
 else {
    if (downloadFinished) {
      tmp.delete();
    }
  }
}
