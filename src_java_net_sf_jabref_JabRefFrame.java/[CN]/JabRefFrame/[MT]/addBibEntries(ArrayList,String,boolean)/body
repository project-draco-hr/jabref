{
  if (intoNew || (tabbedPane.getTabCount() == 0)) {
    BibtexDatabase database=new BibtexDatabase();
    Iterator it=bibentries.iterator();
    while (it.hasNext()) {
      BibtexEntry entry=(BibtexEntry)it.next();
      try {
        entry.setId(Util.createId(entry.getType(),database));
        database.insertEntry(entry);
      }
 catch (      KeyCollisionException ex) {
        System.err.println("KeyCollisionException [ addBibEntries(...) ]");
      }
    }
    HashMap meta=new HashMap();
    BasePanel bp=new BasePanel(ths,database,null,meta,prefs);
    tabbedPane.add(Globals.lang("untitled"),bp);
    tabbedPane.setSelectedComponent(bp);
    if (tabbedPane.getTabCount() == 1)     setNonEmptyState();
    output(Globals.lang("Imported database") + " '" + filename+ "' "+ Globals.lang("with")+ " "+ database.getEntryCount()+ " "+ Globals.lang("entries into new database")+ ".");
  }
 else {
    BasePanel basePanel=basePanel();
    BibtexDatabase database=basePanel.database;
    int oldCount=database.getEntryCount();
    NamedCompound ce=new NamedCompound("Import database");
    Iterator it=bibentries.iterator();
    while (it.hasNext()) {
      BibtexEntry entry=(BibtexEntry)it.next();
      try {
        entry.setId(Util.createId(entry.getType(),database));
        database.insertEntry(entry);
        ce.addEdit(new UndoableInsertEntry(database,entry,basePanel));
      }
 catch (      KeyCollisionException ex) {
        System.err.println("KeyCollisionException [ addBibEntries(...) ]");
      }
    }
    ce.end();
    basePanel.undoManager.addEdit(ce);
    basePanel.markBaseChanged();
    basePanel.refreshTable();
    output(Globals.lang("Imported database") + " '" + filename+ "' "+ Globals.lang("with")+ " "+ (database.getEntryCount() - oldCount)+ " "+ Globals.lang("entries into new database")+ ".");
  }
}
