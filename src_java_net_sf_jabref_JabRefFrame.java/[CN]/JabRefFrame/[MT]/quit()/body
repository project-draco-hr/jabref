{
  boolean close=true;
  Vector<String> filenames=new Vector<String>();
  if (tabbedPane.getTabCount() > 0) {
    for (int i=0; i < tabbedPane.getTabCount(); i++) {
      if (baseAt(i).baseChanged) {
        tabbedPane.setSelectedIndex(i);
        int answer=JOptionPane.showConfirmDialog(ths,Globals.lang("Database has changed. Do you " + "want to save before closing?"),Globals.lang("Save before closing"),JOptionPane.YES_NO_CANCEL_OPTION);
        if ((answer == JOptionPane.CANCEL_OPTION) || (answer == JOptionPane.CLOSED_OPTION)) {
          close=false;
          return;
        }
        if (answer == JOptionPane.YES_OPTION) {
          try {
            basePanel().runCommand("save");
          }
 catch (          Throwable ex) {
            close=false;
            break;
          }
        }
      }
      if (baseAt(i).getFile() != null) {
        filenames.add(baseAt(i).getFile().getAbsolutePath());
      }
    }
  }
  if (close) {
    dispose();
    prefs.putInt("posX",ths.getLocation().x);
    prefs.putInt("posY",ths.getLocation().y);
    prefs.putInt("sizeX",ths.getSize().width);
    prefs.putInt("sizeY",ths.getSize().height);
    prefs.putBoolean("searchPanelVisible",sidePaneManager.isComponentVisible("search"));
    int width=contentPane.getDividerLocation();
    if (width > 0)     prefs.putInt("sidePaneWidth",width);
    if (prefs.getBoolean("openLastEdited")) {
      if (filenames.size() == 0) {
        prefs.remove("lastEdited");
      }
 else {
        String[] names=new String[filenames.size()];
        for (int i=0; i < filenames.size(); i++) {
          names[i]=(String)filenames.elementAt(i);
        }
        prefs.putStringArray("lastEdited",names);
      }
    }
    fileHistory.storeHistory();
    prefs.customExports.store();
    prefs.customImports.store();
    BibtexEntryType.saveCustomEntryTypes(prefs);
    if (basePanel() != null) {
      ((SearchManager2)searchManager).updatePrefs();
    }
    System.exit(0);
  }
}
