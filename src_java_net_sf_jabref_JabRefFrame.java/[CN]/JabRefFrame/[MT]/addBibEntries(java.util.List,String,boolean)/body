{
  if (bibentries == null || bibentries.size() == 0) {
    JOptionPane.showMessageDialog(ths,Globals.lang("No entries found. Please make sure you are " + "using the correct import filter."),Globals.lang("Import failed"),JOptionPane.ERROR_MESSAGE);
    return 0;
  }
  int addedEntries=0;
  Util.setAutomaticFields(bibentries);
  if (intoNew || (tabbedPane.getTabCount() == 0)) {
    BibtexDatabase database=new BibtexDatabase();
    Iterator it=bibentries.iterator();
    while (it.hasNext()) {
      BibtexEntry entry=(BibtexEntry)it.next();
      try {
        entry.setId(Util.createNeutralId());
        database.insertEntry(entry);
      }
 catch (      KeyCollisionException ex) {
        System.err.println("KeyCollisionException [ addBibEntries(...) ]");
      }
    }
    HashMap meta=new HashMap();
    BasePanel bp=new BasePanel(ths,database,null,meta,Globals.prefs.get("defaultEncoding"));
    addedEntries=database.getEntryCount();
    tabbedPane.add(Globals.lang("untitled"),bp);
    bp.markBaseChanged();
    tabbedPane.setSelectedComponent(bp);
    if (tabbedPane.getTabCount() == 1) {
      setNonEmptyState();
    }
    if (filename != null)     output(Globals.lang("Imported database") + " '" + filename+ "' "+ Globals.lang("with")+ " "+ database.getEntryCount()+ " "+ Globals.lang("entries into new database")+ ".");
  }
 else {
    boolean checkForDuplicates=true;
    BasePanel basePanel=basePanel();
    BibtexDatabase database=basePanel.database;
    int oldCount=database.getEntryCount();
    NamedCompound ce=new NamedCompound(Globals.lang("Import entries"));
    Iterator it=bibentries.iterator();
    mainLoop:     while (it.hasNext()) {
      BibtexEntry entry=(BibtexEntry)it.next();
      boolean dupli=false;
      if (checkForDuplicates) {
        loop:         for (Iterator i2=database.getKeySet().iterator(); i2.hasNext(); ) {
          BibtexEntry existingEntry=database.getEntryById((String)i2.next());
          if (Util.isDuplicate(entry,existingEntry,Globals.duplicateThreshold)) {
            DuplicateResolverDialog drd=new DuplicateResolverDialog(ths,existingEntry,entry,DuplicateResolverDialog.IMPORT_CHECK);
            drd.setVisible(true);
            int res=drd.getSelected();
            if (res == DuplicateResolverDialog.KEEP_LOWER) {
              dupli=true;
            }
 else             if (res == DuplicateResolverDialog.KEEP_UPPER) {
              database.removeEntry(existingEntry.getId());
              ce.addEdit(new UndoableRemoveEntry(database,existingEntry,basePanel));
            }
 else             if (res == DuplicateResolverDialog.BREAK) {
              break mainLoop;
            }
            break loop;
          }
        }
      }
      if (!dupli) {
        try {
          entry.setId(Util.createNeutralId());
          database.insertEntry(entry);
          ce.addEdit(new UndoableInsertEntry(database,entry,basePanel));
          addedEntries++;
        }
 catch (        KeyCollisionException ex) {
          System.err.println("KeyCollisionException [ addBibEntries(...) ]");
        }
      }
    }
    if (addedEntries > 0) {
      ce.end();
      basePanel.undoManager.addEdit(ce);
      basePanel.markBaseChanged();
      if (filename != null)       output(Globals.lang("Imported database") + " '" + filename+ "' "+ Globals.lang("with")+ " "+ (database.getEntryCount() - oldCount)+ " "+ Globals.lang("entries into new database")+ ".");
    }
  }
  return addedEntries;
}
