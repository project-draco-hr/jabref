{
  _prefs=prefs;
  this.frame=frame;
  setLayout(new BorderLayout());
  TableModel tm=new AbstractTableModel(){
    @Override public int getRowCount(){
      return rowCount;
    }
    @Override public int getColumnCount(){
      return 2;
    }
    @Override public Object getValueAt(    int row,    int column){
      if (row == 0) {
        return column == 0 ? GUIGlobals.NUMBER_COL : "" + ncWidth;
      }
      row--;
      if (row >= tableRows.size()) {
        return "";
      }
      Object rowContent=tableRows.elementAt(row);
      if (rowContent == null) {
        return "";
      }
      TableRow tr=(TableRow)rowContent;
switch (column) {
case 0:
        return tr.name;
case 1:
      return tr.length > 0 ? Integer.toString(tr.length) : "";
  }
  return null;
}
@Override public String getColumnName(int col){
  return col == 0 ? Globals.lang("Field name") : Globals.lang("Column width");
}
@Override public Class<?> getColumnClass(int column){
  if (column == 0) {
    return String.class;
  }
 else {
    return Integer.class;
  }
}
@Override public boolean isCellEditable(int row,int col){
  return !(row == 0 && col == 0);
}
@Override public void setValueAt(Object value,int row,int col){
  tableChanged=true;
  while (row >= tableRows.size()) {
    tableRows.add(new TableRow("",-1));
  }
  if (row == 0 && col == 1) {
    ncWidth=Integer.parseInt(value.toString());
    return;
  }
  TableRow rowContent=tableRows.elementAt(row - 1);
  if (col == 0) {
    rowContent.name=value.toString();
    if (getValueAt(row,1).equals("")) {
      setValueAt("" + GUIGlobals.DEFAULT_FIELD_LENGTH,row,1);
    }
  }
 else {
    if (value == null) {
      rowContent.length=-1;
    }
 else {
      rowContent.length=Integer.parseInt(value.toString());
    }
  }
}
}
;
colSetup=new JTable(tm);
TableColumnModel cm=colSetup.getColumnModel();
cm.getColumn(0).setPreferredWidth(140);
cm.getColumn(1).setPreferredWidth(80);
FormLayout layout=new FormLayout("1dlu, 8dlu, left:pref, 4dlu, fill:pref","");
DefaultFormBuilder builder=new DefaultFormBuilder(layout);
JPanel pan=new JPanel();
JPanel tabPanel=new JPanel();
tabPanel.setLayout(new BorderLayout());
JScrollPane sp=new JScrollPane(colSetup,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
colSetup.setPreferredScrollableViewportSize(new Dimension(250,200));
sp.setMinimumSize(new Dimension(250,300));
tabPanel.add(sp,BorderLayout.CENTER);
JToolBar tlb=new JToolBar(SwingConstants.VERTICAL);
tlb.setFloatable(false);
AddRowAction ara=new AddRowAction();
DeleteRowAction dra=new DeleteRowAction();
MoveRowUpAction moveUp=new MoveRowUpAction();
MoveRowDownAction moveDown=new MoveRowDownAction();
tlb.setBorder(null);
tlb.add(ara);
tlb.add(dra);
tlb.addSeparator();
tlb.add(moveUp);
tlb.add(moveDown);
tabPanel.add(tlb,BorderLayout.EAST);
showOneLetterHeadingForIconColumns=new JCheckBox(Globals.lang("Show one letter heading for icon columns"));
fileColumn=new JCheckBox(Globals.lang("Show file column"));
pdfColumn=new JCheckBox(Globals.lang("Show PDF/PS column"));
urlColumn=new JCheckBox(Globals.lang("Show URL/DOI column"));
preferUrl=new JRadioButton(Globals.lang("Show URL first"));
preferDoi=new JRadioButton(Globals.lang("Show DOI first"));
ButtonGroup preferUrlDoiGroup=new ButtonGroup();
preferUrlDoiGroup.add(preferUrl);
preferUrlDoiGroup.add(preferDoi);
urlColumn.addChangeListener(new ChangeListener(){
@Override public void stateChanged(ChangeEvent arg0){
  preferUrl.setEnabled(urlColumn.isSelected());
  preferDoi.setEnabled(urlColumn.isSelected());
}
}
);
arxivColumn=new JCheckBox(Globals.lang("Show ArXiv column"));
extraFileColumns=new JCheckBox(Globals.lang("Show Extra columns"));
extraFileColumns.addChangeListener(new ChangeListener(){
@Override public void stateChanged(ChangeEvent arg0){
  listOfFileColumns.setEnabled(extraFileColumns.isSelected());
}
}
);
ExternalFileType[] fileTypes=Globals.prefs.getExternalFileTypeSelection();
String[] fileTypeNames=new String[fileTypes.length];
for (int i=0; i < fileTypes.length; i++) {
fileTypeNames[i]=fileTypes[i].getName();
}
listOfFileColumns=new JList(fileTypeNames);
JScrollPane listOfFileColumnsScrollPane=new JScrollPane(listOfFileColumns);
listOfFileColumns.setVisibleRowCount(3);
HelpAction help=new HelpAction(frame.helpDiag,GUIGlobals.specialFieldsHelp);
JButton hlb=new JButton(GUIGlobals.getImage("helpSmall"));
hlb.setToolTipText(Globals.lang("Help on special fields"));
hlb.addActionListener(help);
specialFieldsEnabled=new JCheckBox(Globals.lang("Enable special fields"));
specialFieldsEnabled.addChangeListener(new ChangeListener(){
@Override public void stateChanged(ChangeEvent event){
  boolean isEnabled=specialFieldsEnabled.isSelected();
  rankingColumn.setEnabled(isEnabled);
  compactRankingColumn.setEnabled(isEnabled && rankingColumn.isSelected());
  qualityColumn.setEnabled(isEnabled);
  priorityColumn.setEnabled(isEnabled);
  relevanceColumn.setEnabled(isEnabled);
  printedColumn.setEnabled(isEnabled);
  readStatusColumn.setEnabled(isEnabled);
  syncKeywords.setEnabled(isEnabled);
  writeSpecialFields.setEnabled(isEnabled);
}
}
);
rankingColumn=new JCheckBox(Globals.lang("Show rank"));
rankingColumn.addChangeListener(new ChangeListener(){
@Override public void stateChanged(ChangeEvent event){
  compactRankingColumn.setEnabled(rankingColumn.isSelected());
}
}
);
compactRankingColumn=new JCheckBox(Globals.lang("Compact rank"));
qualityColumn=new JCheckBox(Globals.lang("Show quality"));
priorityColumn=new JCheckBox(Globals.lang("Show priority"));
relevanceColumn=new JCheckBox(Globals.lang("Show relevance"));
printedColumn=new JCheckBox(Globals.lang("Show printed status"));
readStatusColumn=new JCheckBox(Globals.lang("Show read status"));
syncKeywords=new JRadioButton(Globals.lang("Synchronize with keywords"));
writeSpecialFields=new JRadioButton(Globals.lang("Write values of special fields as separate fields to BibTeX"));
ButtonGroup group=new ButtonGroup();
group.add(syncKeywords);
group.add(writeSpecialFields);
builder.appendSeparator(Globals.lang("Special table columns"));
builder.nextLine();
builder.append(pan);
DefaultFormBuilder specialTableColumnsBuilder=new DefaultFormBuilder(new FormLayout("8dlu, 8dlu, 8cm, 8dlu, 8dlu, left:pref:grow","pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref, pref"));
CellConstraints cc=new CellConstraints();
specialTableColumnsBuilder.add(specialFieldsEnabled,cc.xyw(1,1,3));
specialTableColumnsBuilder.add(rankingColumn,cc.xyw(2,2,2));
specialTableColumnsBuilder.add(compactRankingColumn,cc.xy(3,3));
specialTableColumnsBuilder.add(relevanceColumn,cc.xyw(2,4,2));
specialTableColumnsBuilder.add(qualityColumn,cc.xyw(2,5,2));
specialTableColumnsBuilder.add(priorityColumn,cc.xyw(2,6,2));
specialTableColumnsBuilder.add(printedColumn,cc.xyw(2,7,2));
specialTableColumnsBuilder.add(readStatusColumn,cc.xyw(2,8,2));
specialTableColumnsBuilder.add(syncKeywords,cc.xyw(2,10,2));
specialTableColumnsBuilder.add(writeSpecialFields,cc.xyw(2,11,2));
specialTableColumnsBuilder.add(showOneLetterHeadingForIconColumns,cc.xyw(1,12,4));
specialTableColumnsBuilder.add(hlb,cc.xyw(1,13,2));
specialTableColumnsBuilder.add(fileColumn,cc.xyw(5,1,2));
specialTableColumnsBuilder.add(pdfColumn,cc.xyw(5,2,2));
specialTableColumnsBuilder.add(urlColumn,cc.xyw(5,3,2));
specialTableColumnsBuilder.add(preferUrl,cc.xy(6,4));
specialTableColumnsBuilder.add(preferDoi,cc.xy(6,5));
specialTableColumnsBuilder.add(arxivColumn,cc.xyw(5,6,2));
specialTableColumnsBuilder.add(extraFileColumns,cc.xyw(5,7,2));
specialTableColumnsBuilder.add(listOfFileColumnsScrollPane,cc.xywh(5,8,2,5));
builder.append(specialTableColumnsBuilder.getPanel());
builder.nextLine();
builder.appendSeparator(Globals.lang("Entry table columns"));
builder.nextLine();
builder.append(pan);
builder.append(tabPanel);
builder.nextLine();
builder.append(pan);
JButton buttonWidth=new JButton(new UpdateWidthsAction());
JButton buttonOrder=new JButton(new UpdateOrderAction());
builder.append(buttonWidth);
builder.nextLine();
builder.append(pan);
builder.append(buttonOrder);
builder.nextLine();
builder.append(pan);
builder.nextLine();
pan=builder.getPanel();
pan.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
add(pan,BorderLayout.CENTER);
}
