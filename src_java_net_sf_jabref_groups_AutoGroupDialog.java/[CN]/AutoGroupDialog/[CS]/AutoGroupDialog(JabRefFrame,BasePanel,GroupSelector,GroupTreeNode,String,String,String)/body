{
  super(jabrefFrame,Globals.lang("Automatically create groups"),true);
  frame=jabrefFrame;
  gs=groupSelector;
  panel=basePanel;
  m_groupsRoot=groupsRoot;
  field.setText(defaultField);
  remove.setText(defaultRemove);
  deliminator.setText(defaultDeliminator);
  ActionListener okListener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ok_pressed=true;
      dispose();
      GroupTreeNode autoGroupsRoot=new GroupTreeNode(new ExplicitGroup(Globals.lang("Automatically created groups")));
      HashSet hs=null;
      if (nd.isSelected()) {
        hs=Util.findDeliminatedWordsInField(panel.getDatabase(),field().toLowerCase().trim(),deliminator.getText());
      }
 else {
        hs=Util.findAllWordsInField(panel.getDatabase(),field().toLowerCase().trim(),remove());
      }
      Iterator i=hs.iterator();
      while (i.hasNext()) {
        String keyword=i.next().toString();
        KeywordGroup group=new KeywordGroup(keyword,field(),keyword,false,false);
        autoGroupsRoot.add(new GroupTreeNode(group));
      }
      m_groupsRoot.add(autoGroupsRoot);
      NamedCompound ce=new NamedCompound(Globals.lang("Autogenerate groups"));
      UndoableAddOrRemoveGroup undo=new UndoableAddOrRemoveGroup(gs,m_groupsRoot,autoGroupsRoot,UndoableAddOrRemoveGroup.ADD_NODE);
      undo.setRevalidate(true);
      ce.addEdit(undo);
      panel.markBaseChanged();
      gs.revalidateGroups();
      frame.output(Globals.lang("Created groups."));
      ce.end();
      panel.undoManager.addEdit(ce);
    }
  }
;
  remove.addActionListener(okListener);
  field.addActionListener(okListener);
  field.addCaretListener(this);
  AbstractAction cancelAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
;
  cancel.addActionListener(cancelAction);
  ok.addActionListener(okListener);
  ActionMap am=main.getActionMap();
  InputMap im=main.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(frame.prefs().getKey("Close dialog"),"close");
  am.put("close",cancelAction);
  main.setLayout(gbl);
  opt.setLayout(gbl);
  main.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),Globals.lang("Group properties")));
  con.weightx=0;
  con.gridwidth=1;
  con.insets=new Insets(3,5,3,5);
  con.anchor=GridBagConstraints.EAST;
  con.fill=GridBagConstraints.NONE;
  con.gridx=0;
  con.gridy=0;
  gbl.setConstraints(nf,con);
  main.add(nf);
  con.gridy=1;
  gbl.setConstraints(nr,con);
  main.add(nr);
  con.gridy=2;
  gbl.setConstraints(nd,con);
  main.add(nd);
  con.weightx=1;
  con.anchor=GridBagConstraints.WEST;
  con.fill=GridBagConstraints.HORIZONTAL;
  con.gridy=0;
  con.gridx=1;
  gbl.setConstraints(field,con);
  main.add(field);
  con.gridy=1;
  gbl.setConstraints(remove,con);
  main.add(remove);
  con.gridy=2;
  gbl.setConstraints(deliminator,con);
  main.add(deliminator);
  con.gridx=GridBagConstraints.RELATIVE;
  con.gridy=GridBagConstraints.RELATIVE;
  con.weightx=1;
  con.gridwidth=1;
  con.anchor=GridBagConstraints.EAST;
  con.fill=GridBagConstraints.NONE;
  gbl.setConstraints(ok,con);
  opt.add(ok);
  con.anchor=GridBagConstraints.WEST;
  con.gridwidth=GridBagConstraints.REMAINDER;
  gbl.setConstraints(cancel,con);
  opt.add(cancel);
  getContentPane().add(main,BorderLayout.CENTER);
  getContentPane().add(opt,BorderLayout.SOUTH);
  updateComponents();
  setSize(400,200);
  Util.placeDialog(this,frame);
}
