{
  super(frame_,"Automatically create groups",true);
  frame=frame_;
  gs=gs_;
  panel=panel_;
  groups=groups_;
  field.setText(defaultField);
  remove.setText(defaultRemove);
  ActionListener okListener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (field.getText().equals("")) {
        JOptionPane.showMessageDialog(frame,"You must provide a field name " + "as basis for the group creation.","Automatically create groups",JOptionPane.ERROR_MESSAGE);
        return;
      }
      ok_pressed=true;
      dispose();
      HashSet hs=Util.findAllWordsInField(panel.getDatabase(),field().toLowerCase()," " + remove());
      Vector added=new Vector(20,20);
      NamedCompound ce=new NamedCompound("Autogenerate groups");
      Iterator i=hs.iterator();
      while (i.hasNext()) {
        String regExp=i.next().toString().toLowerCase();
        boolean found=false;
        for (int j=GroupSelector.OFFSET + 1; j < groups.size(); j+=GroupSelector.DIM) {
          if (regExp.equals(((String)groups.elementAt(j)).toLowerCase()))           found=true;
        }
        if (!found) {
          int index=GroupSelector.findPos(groups,regExp);
          added.add(new UndoableAddOrRemoveGroup(gs,groups,index,true,field(),Util.nCase(regExp),regExp));
          groups.add(index,field());
          groups.add(index,Util.nCase(regExp));
          groups.add(index,regExp);
        }
      }
      if (added.size() > 0) {
        panel.markBaseChanged();
        gs.revalidateList(0);
        frame.output(Globals.lang("Created groups."));
        if (added.size() > 2) {
          for (int k=1; k < added.size() - 1; k++)           ((UndoableAddOrRemoveGroup)added.elementAt(k)).setRevalidate(false);
        }
        for (int k=0; k < added.size(); k++)         ce.addEdit((UndoableAddOrRemoveGroup)added.elementAt(k));
        ce.end();
        panel.undoManager.addEdit(ce);
      }
    }
  }
;
  remove.addActionListener(okListener);
  field.addActionListener(okListener);
  AbstractAction cancelAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
;
  cancel.addActionListener(cancelAction);
  ok.addActionListener(okListener);
  ActionMap am=main.getActionMap();
  InputMap im=main.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(GUIGlobals.exitDialog,"close");
  am.put("close",cancelAction);
  main.setLayout(gbl);
  opt.setLayout(gbl);
  main.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),"Group properties"));
  con.weightx=0;
  con.gridwidth=1;
  con.insets=new Insets(3,5,3,5);
  con.anchor=GridBagConstraints.EAST;
  con.fill=GridBagConstraints.NONE;
  con.gridx=0;
  con.gridy=0;
  gbl.setConstraints(nf,con);
  main.add(nf);
  con.gridy=1;
  gbl.setConstraints(nr,con);
  main.add(nr);
  con.weightx=1;
  con.anchor=GridBagConstraints.WEST;
  con.fill=GridBagConstraints.HORIZONTAL;
  con.gridy=0;
  con.gridx=1;
  gbl.setConstraints(field,con);
  main.add(field);
  con.gridy=1;
  gbl.setConstraints(remove,con);
  main.add(remove);
  con.gridx=GridBagConstraints.RELATIVE;
  con.gridy=GridBagConstraints.RELATIVE;
  con.weightx=1;
  con.gridwidth=1;
  con.anchor=GridBagConstraints.EAST;
  con.fill=GridBagConstraints.NONE;
  gbl.setConstraints(ok,con);
  opt.add(ok);
  con.anchor=GridBagConstraints.WEST;
  con.gridwidth=GridBagConstraints.REMAINDER;
  gbl.setConstraints(cancel,con);
  opt.add(cancel);
  getContentPane().add(main,BorderLayout.CENTER);
  getContentPane().add(opt,BorderLayout.SOUTH);
  setSize(400,140);
  Util.placeDialog(this,frame);
}
