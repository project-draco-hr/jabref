{
  setHighlight1Cell(null);
  try {
    final Transferable transferable=dtde.getTransferable();
    final Point p=dtde.getLocation();
    final TreePath path=getPathForLocation(p.x,p.y);
    if (path == null) {
      dtde.rejectDrop();
      return;
    }
    final GroupTreeNode target=(GroupTreeNode)path.getLastPathComponent();
    if (transferable.isDataFlavorSupported(GroupTreeNode.flavor)) {
      GroupTreeNode source=(GroupTreeNode)transferable.getTransferData(GroupTreeNode.flavor);
      if (source == target) {
        dtde.rejectDrop();
        return;
      }
      if (source.isNodeDescendant(target)) {
        dtde.rejectDrop();
        return;
      }
      Enumeration<TreePath> expandedPaths=groupSelector.getExpandedPaths();
      UndoableMoveGroup undo=new UndoableMoveGroup(groupSelector,groupSelector.getGroupTreeRoot(),source,target,target.getChildCount());
      target.add(source);
      dtde.getDropTargetContext().dropComplete(true);
      groupSelector.revalidateGroups(new TreePath[]{new TreePath(source.getPath())},refreshPaths(expandedPaths));
      groupSelector.concludeMoveGroup(undo,source);
    }
 else     if (transferable.isDataFlavorSupported(TransferableEntrySelection.flavorInternal)) {
      final AbstractGroup group=target.getGroup();
      if (!group.supportsAdd()) {
        dtde.rejectDrop();
        return;
      }
      final TransferableEntrySelection selection=(TransferableEntrySelection)transferable.getTransferData(TransferableEntrySelection.flavorInternal);
      final BibtexEntry[] entries=selection.getSelection();
      int assignedEntries=0;
      for (      BibtexEntry entry : entries) {
        if (!target.getGroup().contains(entry))         ++assignedEntries;
      }
      if (!Util.warnAssignmentSideEffects(new AbstractGroup[]{group},selection.getSelection(),groupSelector.getActiveBasePanel().getDatabase(),groupSelector.frame))       return;
      groupSelector.getActiveBasePanel().storeCurrentEdit();
      AbstractUndoableEdit undo=group.add(selection.getSelection());
      if (undo instanceof UndoableChangeAssignment)       ((UndoableChangeAssignment)undo).setEditedNode(target);
      dtde.getDropTargetContext().dropComplete(true);
      groupSelector.revalidateGroups();
      groupSelector.concludeAssignment(undo,target,assignedEntries);
    }
 else {
      dtde.rejectDrop();
      return;
    }
  }
 catch (  IOException ioe) {
  }
catch (  UnsupportedFlavorException e) {
  }
}
