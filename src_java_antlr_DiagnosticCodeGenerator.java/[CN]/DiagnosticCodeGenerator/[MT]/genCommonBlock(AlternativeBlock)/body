{
  boolean singleAlt=(blk.alternatives.size() == 1);
  println("Start of an alternative block.");
  tabs++;
  println("The lookahead set for this block is:");
  tabs++;
  genLookaheadSetForBlock(blk);
  tabs--;
  if (singleAlt) {
    println("This block has a single alternative");
    if (blk.getAlternativeAt(0).synPred != null) {
      println("Warning: you specified a syntactic predicate for this alternative,");
      println("and it is the only alternative of a block and will be ignored.");
    }
  }
 else {
    println("This block has multiple alternatives:");
    tabs++;
  }
  for (int i=0; i < blk.alternatives.size(); i++) {
    Alternative alt=blk.getAlternativeAt(i);
    AlternativeElement elem=alt.head;
    println("");
    if (i != 0) {
      print("Otherwise, ");
    }
 else {
      print("");
    }
    _println("Alternate(" + (i + 1) + ") will be taken IF:");
    println("The lookahead set: ");
    tabs++;
    genLookaheadSetForAlt(alt);
    tabs--;
    if (alt.semPred != null || alt.synPred != null) {
      print("is matched, AND ");
    }
 else {
      println("is matched.");
    }
    if (alt.semPred != null) {
      _println("the semantic predicate:");
      tabs++;
      println(alt.semPred);
      if (alt.synPred != null) {
        print("is true, AND ");
      }
 else {
        println("is true.");
      }
    }
    if (alt.synPred != null) {
      _println("the syntactic predicate:");
      tabs++;
      genSynPred(alt.synPred);
      tabs--;
      println("is matched.");
    }
    genAlt(alt);
  }
  println("");
  println("OTHERWISE, a NoViableAlt exception will be thrown");
  println("");
  if (!singleAlt) {
    tabs--;
    println("End of alternatives");
  }
  tabs--;
  println("End of alternative block.");
}
