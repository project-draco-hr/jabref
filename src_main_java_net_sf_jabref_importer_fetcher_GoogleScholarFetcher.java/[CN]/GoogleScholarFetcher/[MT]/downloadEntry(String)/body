{
  try {
    String s=new URLDownload(GoogleScholarFetcher.URL_START + link).downloadToString();
    BibtexParser bp=new BibtexParser(new StringReader(s));
    ParserResult pr=bp.parse();
    if ((pr != null) && (pr.getDatabase() != null)) {
      Collection<BibEntry> entries=pr.getDatabase().getEntries();
      if (entries.size() == 1) {
        BibEntry entry=entries.iterator().next();
        entry.clearField(BibEntry.KEY_FIELD);
        if (!entry.hasField("url")) {
          String storedUrl=entryLinks.get(link);
          if (storedUrl != null) {
            entry.setField("url",storedUrl);
          }
        }
        String title=entry.getField("title");
        if (title != null) {
          String newtitle=title.replaceAll("<.?i>([^<]*)</i>","$1");
          if (!newtitle.equals(title)) {
            entry.setField("title",newtitle);
          }
        }
        return entry;
      }
 else       if (entries.isEmpty()) {
        LOGGER.warn("No entry found! (" + link + ")");
        return null;
      }
 else {
        LOGGER.debug(entries.size() + " entries found! (" + link+ ")");
        return null;
      }
    }
    LOGGER.warn("Parser failed! (" + link + ")");
    return null;
  }
 catch (  MalformedURLException ex) {
    LOGGER.error("Malformed URL.",ex);
    return null;
  }
}
