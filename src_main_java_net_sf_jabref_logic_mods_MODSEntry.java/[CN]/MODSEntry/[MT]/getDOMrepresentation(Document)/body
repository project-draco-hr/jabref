{
  try {
    Element mods=d.createElement(entryType);
    mods.setAttribute("version","3.0");
    if (title != null) {
      Element titleInfo=d.createElement("titleInfo");
      Element mainTitle=d.createElement("title");
      mainTitle.appendChild(d.createTextNode(StringUtil.stripNonValidXMLCharacters(title)));
      titleInfo.appendChild(mainTitle);
      mods.appendChild(titleInfo);
    }
    if (authors != null) {
      for (      PersonName name : authors) {
        Element modsName=d.createElement("name");
        modsName.setAttribute("type","personal");
        if (name.getSurname() != null) {
          Element namePart=d.createElement("namePart");
          namePart.setAttribute("type","family");
          namePart.appendChild(d.createTextNode(StringUtil.stripNonValidXMLCharacters(name.getSurname())));
          modsName.appendChild(namePart);
        }
        if (name.getGivenNames() != null) {
          Element namePart=d.createElement("namePart");
          namePart.setAttribute("type","given");
          namePart.appendChild(d.createTextNode(StringUtil.stripNonValidXMLCharacters(name.getGivenNames())));
          modsName.appendChild(namePart);
        }
        Element role=d.createElement("role");
        Element roleTerm=d.createElement("roleTerm");
        roleTerm.setAttribute("type","text");
        roleTerm.appendChild(d.createTextNode("author"));
        role.appendChild(roleTerm);
        modsName.appendChild(role);
        mods.appendChild(modsName);
      }
    }
    Element originInfo=d.createElement("originInfo");
    mods.appendChild(originInfo);
    if (this.publisher != null) {
      Element publisherElement=d.createElement(FieldName.PUBLISHER);
      publisherElement.appendChild(d.createTextNode(StringUtil.stripNonValidXMLCharacters(this.publisher)));
      originInfo.appendChild(publisherElement);
    }
    if (date != null) {
      Element dateIssued=d.createElement("dateIssued");
      dateIssued.appendChild(d.createTextNode(StringUtil.stripNonValidXMLCharacters(date)));
      originInfo.appendChild(dateIssued);
    }
    Element issuanceElement=d.createElement("issuance");
    issuanceElement.appendChild(d.createTextNode(StringUtil.stripNonValidXMLCharacters(this.issuance)));
    originInfo.appendChild(issuanceElement);
    if (id != null) {
      Element idref=d.createElement("identifier");
      idref.appendChild(d.createTextNode(StringUtil.stripNonValidXMLCharacters(id)));
      mods.appendChild(idref);
      mods.setAttribute("ID",id);
    }
    Element typeOfResource=d.createElement("typeOfResource");
    String type="text";
    typeOfResource.appendChild(d.createTextNode(StringUtil.stripNonValidXMLCharacters(type)));
    mods.appendChild(typeOfResource);
    if (genre != null) {
      Element genreElement=d.createElement("genre");
      genreElement.setAttribute("authority","marc");
      genreElement.appendChild(d.createTextNode(StringUtil.stripNonValidXMLCharacters(genre)));
      mods.appendChild(genreElement);
    }
    if (host != null) {
      Element relatedItem=host.getDOMrepresentation(d);
      relatedItem.setAttribute("type","host");
      mods.appendChild(relatedItem);
    }
    if (pages != null) {
      mods.appendChild(pages.getDOMrepresentation(d));
    }
    for (    Map.Entry<String,String> theEntry : extensionFields.entrySet()) {
      Element extension=d.createElement("extension");
      String field=theEntry.getKey();
      String value=theEntry.getValue();
      if (handledExtensions.contains(field)) {
        continue;
      }
      Element theData=d.createElement(field);
      theData.appendChild(d.createTextNode(StringUtil.stripNonValidXMLCharacters(value)));
      extension.appendChild(theData);
      mods.appendChild(extension);
    }
    return mods;
  }
 catch (  Exception e) {
    LOGGER.warn("Exception caught...",e);
    throw new Error(e);
  }
}
