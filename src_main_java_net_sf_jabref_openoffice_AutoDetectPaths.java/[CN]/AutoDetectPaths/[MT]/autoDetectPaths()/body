{
  if (OS.WINDOWS) {
    List<File> progFiles=AutoDetectPaths.findProgramFilesDir();
    File sOffice=null;
    if (fileSearchCancelled) {
      return false;
    }
    List<File> sofficeFiles=new ArrayList<>();
    for (    File dir : progFiles) {
      sOffice=findFileDir(dir,"soffice.exe");
      if (sOffice != null) {
        sofficeFiles.add(sOffice);
      }
    }
    if (sOffice == null) {
      JOptionPane.showMessageDialog(parent,Localization.lang("Unable to autodetect OpenOffice/LibreOffice installation. Please choose the installation directory manually."),Localization.lang("Could not find OpenOffice/LibreOffice installation"),JOptionPane.INFORMATION_MESSAGE);
      JFileChooser jfc=new JFileChooser(new File("C:\\"));
      jfc.setDialogType(JFileChooser.OPEN_DIALOG);
      jfc.setFileFilter(new javax.swing.filechooser.FileFilter(){
        @Override public boolean accept(        File file){
          return file.isDirectory();
        }
        @Override public String getDescription(){
          return Localization.lang("Directories");
        }
      }
);
      jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      jfc.showOpenDialog(parent);
      if (jfc.getSelectedFile() != null) {
        sOffice=jfc.getSelectedFile();
      }
    }
    if (sOffice == null) {
      return false;
    }
    if (sofficeFiles.size() > 1) {
      DefaultListModel<File> mod=new DefaultListModel<>();
      for (      File tmpfile : sofficeFiles) {
        mod.addElement(tmpfile);
      }
      JList<File> fileList=new JList<>(mod);
      fileList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      fileList.setSelectedIndex(0);
      FormBuilder b=FormBuilder.create().layout(new FormLayout("left:pref","pref, 2dlu, pref, 4dlu, pref"));
      b.add(Localization.lang("Found more than one OpenOffice/LibreOffice executable.")).xy(1,1);
      b.add(Localization.lang("Please choose which one to connect to:")).xy(1,3);
      b.add(fileList).xy(1,5);
      int answer=JOptionPane.showConfirmDialog(null,b.getPanel(),Localization.lang("Choose OpenOffice/LibreOffice executable"),JOptionPane.OK_CANCEL_OPTION);
      if (answer == JOptionPane.CANCEL_OPTION) {
        return false;
      }
 else {
        sOffice=fileList.getSelectedValue();
      }
    }
 else {
      sOffice=sofficeFiles.get(0);
    }
    Globals.prefs.put("ooExecutablePath",new File(sOffice,"soffice.exe").getPath());
    File unoil=findFileDir(sOffice.getParentFile(),"unoil.jar");
    if (fileSearchCancelled) {
      return false;
    }
    File jurt=findFileDir(sOffice.getParentFile(),"jurt.jar");
    if (fileSearchCancelled) {
      return false;
    }
    if ((unoil != null) && (jurt != null)) {
      Globals.prefs.put("ooUnoilPath",unoil.getPath());
      Globals.prefs.put("ooJurtPath",jurt.getPath());
      return true;
    }
 else {
      return false;
    }
  }
 else   if (OS.OS_X) {
    File rootDir=new File("/Applications");
    File[] files=rootDir.listFiles();
    for (    File file : files) {
      if (file.isDirectory() && file.getName().equals("OpenOffice.org.app")) {
        rootDir=file;
        break;
      }
    }
    File sOffice=findFileDir(rootDir,"soffice.bin");
    if (fileSearchCancelled) {
      return false;
    }
    if (sOffice != null) {
      Globals.prefs.put("ooExecutablePath",new File(sOffice,"soffice.bin").getPath());
      File unoil=findFileDir(rootDir,"unoil.jar");
      if (fileSearchCancelled) {
        return false;
      }
      File jurt=findFileDir(rootDir,"jurt.jar");
      if (fileSearchCancelled) {
        return false;
      }
      if ((unoil != null) && (jurt != null)) {
        Globals.prefs.put("ooUnoilPath",unoil.getPath());
        Globals.prefs.put("ooJurtPath",jurt.getPath());
        return true;
      }
 else {
        return false;
      }
    }
 else {
      return false;
    }
  }
 else {
    String usrRoot="/usr/lib";
    File inUsr=findFileDir(new File("/usr/lib"),"soffice");
    if (fileSearchCancelled) {
      return false;
    }
    if (inUsr == null) {
      inUsr=findFileDir(new File("/usr/lib64"),"soffice");
      if (inUsr != null) {
        usrRoot="/usr/lib64";
      }
    }
    if (fileSearchCancelled) {
      return false;
    }
    File inOpt=findFileDir(new File("/opt"),"soffice");
    if (fileSearchCancelled) {
      return false;
    }
    if ((inUsr != null) && (inOpt == null)) {
      return setupPreferencesForOO(usrRoot,inUsr);
    }
 else     if ((inOpt != null) && (inUsr == null)) {
      Globals.prefs.put("ooExecutablePath",new File(inOpt,"soffice.bin").getPath());
      File unoil=findFileDir(new File("/opt"),"unoil.jar");
      File jurt=findFileDir(new File("/opt"),"jurt.jar");
      if ((unoil != null) && (jurt != null)) {
        Globals.prefs.put("ooUnoilPath",unoil.getPath());
        Globals.prefs.put("ooJurtPath",jurt.getPath());
        return true;
      }
 else {
        return false;
      }
    }
 else     if (inOpt != null) {
      JRadioButton optRB=new JRadioButton(inOpt.getPath(),true);
      JRadioButton usrRB=new JRadioButton(inUsr.getPath(),false);
      ButtonGroup bg=new ButtonGroup();
      bg.add(optRB);
      bg.add(usrRB);
      FormBuilder b=FormBuilder.create().layout(new FormLayout("left:pref","pref, 2dlu, pref, 2dlu, pref "));
      b.add(Localization.lang("Found more than one OpenOffice/LibreOffice executable. Please choose which one to connect to:")).xy(1,1);
      b.add(optRB).xy(1,3);
      b.add(usrRB).xy(1,5);
      int answer=JOptionPane.showConfirmDialog(null,b.getPanel(),Localization.lang("Choose OpenOffice/LibreOffice executable"),JOptionPane.OK_CANCEL_OPTION);
      if (answer == JOptionPane.CANCEL_OPTION) {
        return false;
      }
 else {
        if (optRB.isSelected()) {
          return setupPreferencesForOO("/opt",inOpt);
        }
 else {
          return setupPreferencesForOO(usrRoot,inUsr);
        }
      }
    }
 else {
      return false;
    }
  }
}
