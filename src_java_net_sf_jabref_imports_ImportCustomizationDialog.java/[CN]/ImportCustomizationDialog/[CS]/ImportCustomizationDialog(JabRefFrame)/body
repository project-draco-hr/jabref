{
  super(frame_,Globals.lang("Manage custom imports"),false);
  frame=frame_;
  addFromFolderButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      CustomImportList.Importer importer=prefs.customImports.new Importer();
      importer.setBasePath(Globals.getNewDir(frame,prefs,new File(prefs.get("workingDirectory")),"",Globals.lang("Select Classpath of New Importer"),JFileChooser.CUSTOM_DIALOG,false));
      String chosenFileStr=Globals.getNewFile(frame,prefs,importer.getBasePath(),".class",Globals.lang("Select new ImportFormat Subclass"),JFileChooser.CUSTOM_DIALOG,false);
      if (chosenFileStr != null) {
        try {
          File chosenFile=new File(chosenFileStr);
          String className=null;
          while (!chosenFile.equals(importer.getBasePath())) {
            className=chosenFile.getName() + (className != null ? "." + className : "");
            chosenFile=chosenFile.getParentFile();
          }
          className=className.substring(0,className.lastIndexOf('.'));
          importer.setClassName(className);
          importer.setName(importer.getInstance().getFormatName());
          importer.setCliId(importer.getInstance().getCLIId());
        }
 catch (        Exception exc) {
          exc.printStackTrace();
          JOptionPane.showMessageDialog(frame,"Could not instantiate " + chosenFileStr + ":\n "+ exc.getMessage());
        }
        prefs.customImports.replaceImporter(importer);
        Globals.importFormatReader.resetImportFormats();
        customImporterTable.revalidate();
        customImporterTable.repaint();
        frame.setUpImportMenus();
      }
    }
  }
);
  addFromFolderButton.setToolTipText(Globals.lang("Add a (compiled) custom ImportFormat class from a class path. \nThe path need not be on the classpath of JabRef."));
  showDescButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int row=customImporterTable.getSelectedRow();
      if (row != -1) {
        CustomImportList.Importer importer=((ImportTableModel)customImporterTable.getModel()).getImporter(row);
        try {
          ImportFormat importFormat=importer.getInstance();
          JOptionPane.showMessageDialog(frame,importFormat.getDescription());
        }
 catch (        Exception exc) {
          exc.printStackTrace();
          JOptionPane.showMessageDialog(frame,"Could not instantiate " + importer.getClassName() + ": "+ exc.getMessage());
        }
      }
 else {
        JOptionPane.showMessageDialog(frame,Globals.lang("Please select an importer."));
      }
    }
  }
);
  removeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int row=customImporterTable.getSelectedRow();
      if (row != -1) {
        customImporterTable.removeRowSelectionInterval(row,row);
        prefs.customImports.remove(((ImportTableModel)customImporterTable.getModel()).getImporter(row));
        Globals.importFormatReader.resetImportFormats();
        customImporterTable.revalidate();
        customImporterTable.repaint();
        frame.setUpImportMenus();
      }
 else {
        JOptionPane.showMessageDialog(frame,Globals.lang("Please select an importer."));
      }
    }
  }
);
  AbstractAction closeAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
;
  closeButton.addActionListener(closeAction);
  helpButton.addActionListener(new HelpAction(frame.helpDiag,GUIGlobals.importCustomizationHelp,"Help"));
  ImportTableModel tableModel=new ImportTableModel();
  customImporterTable=new JTable(tableModel);
  TableColumnModel cm=customImporterTable.getColumnModel();
  cm.getColumn(0).setPreferredWidth(GUIGlobals.IMPORT_DIALOG_COL_0_WIDTH);
  cm.getColumn(1).setPreferredWidth(GUIGlobals.IMPORT_DIALOG_COL_1_WIDTH);
  cm.getColumn(2).setPreferredWidth(GUIGlobals.IMPORT_DIALOG_COL_2_WIDTH);
  cm.getColumn(3).setPreferredWidth(GUIGlobals.IMPORT_DIALOG_COL_3_WIDTH);
  JScrollPane sp=new JScrollPane(customImporterTable,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  customImporterTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  customImporterTable.setPreferredScrollableViewportSize(getSize());
  if (customImporterTable.getRowCount() > 0) {
    customImporterTable.setRowSelectionInterval(0,0);
  }
  ActionMap am=mainPanel.getActionMap();
  InputMap im=mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(frame.prefs().getKey("Close dialog"),"close");
  am.put("close",closeAction);
  mainPanel.setLayout(new BorderLayout());
  mainPanel.add(sp,BorderLayout.CENTER);
  optionsPanel.add(addFromFolderButton);
  optionsPanel.add(showDescButton);
  optionsPanel.add(removeButton);
  optionsPanel.add(closeButton);
  optionsPanel.add(Box.createHorizontalStrut(5));
  optionsPanel.add(helpButton);
  getContentPane().add(mainPanel,BorderLayout.CENTER);
  getContentPane().add(optionsPanel,BorderLayout.SOUTH);
  this.setSize(getSize());
  pack();
  Util.placeDialog(this,frame);
  new FocusRequester(customImporterTable);
}
