{
  openDatabaseOnlyActions=new LinkedList<>();
  openDatabaseOnlyActions.addAll(Arrays.asList(manageSelectors,mergeDatabaseAction,newSubDatabaseAction,close,save,saveAs,saveSelectedAs,saveSelectedAsPlain,undo,redo,cut,delete,copy,paste,mark,unmark,unmarkAll,editEntry,selectAll,copyKey,copyCiteKey,copyKeyAndTitle,editPreamble,editStrings,toggleGroups,toggleSearch,makeKeyAction,normalSearch,mergeEntries,cleanupEntries,exportToClipboard,replaceAll,sendAsEmail,downloadFullText,writeXmpAction,findUnlinkedFiles,addToGroup,removeFromGroup,moveToGroup,autoLinkFile,resolveDuplicateKeys,openPdf,openUrl,openFolder,openFile,openSpires,togglePreview,dupliCheck,autoSetFile,newEntryAction,plainTextImport,massSetField,manageKeywords,pushExternalButton.getMenuAction(),closeDatabaseAction,switchPreview,checkIntegrity,toggleHighlightAny,toggleHighlightAll,databaseProperties,abbreviateIso,abbreviateMedline,unabbreviate,exportAll,exportSelected,importCurrent,saveAll,dbConnect,dbExport,focusTable));
  openDatabaseOnlyActions.addAll(fetcherActions);
  openDatabaseOnlyActions.addAll(Arrays.asList(newSpecificEntryAction));
  severalDatabasesOnlyActions=new LinkedList<>();
  severalDatabasesOnlyActions.addAll(Arrays.asList(nextTab,prevTab,sortTabs));
  tabbedPane.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent event){
      updateEnabledState();
    }
  }
);
}
