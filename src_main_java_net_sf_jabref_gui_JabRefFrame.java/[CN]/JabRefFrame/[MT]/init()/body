{
  tabbedPane=new DragDropPopupPane(manageSelectors,databaseProperties,bibtexKeyPattern,closeDatabaseAction);
  MyGlassPane glassPane=new MyGlassPane();
  setGlassPane(glassPane);
  setTitle(GUIGlobals.frameTitle);
  setIconImage(new ImageIcon(IconTheme.getIconUrl("jabrefIcon48")).getImage());
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (OS.OS_X) {
        setState(Frame.ICONIFIED);
      }
 else {
        new CloseAction().actionPerformed(null);
      }
    }
  }
);
  initSidePane();
  initLayout();
  initActions();
  tlb.setVisible(Globals.prefs.getBoolean(JabRefPreferences.TOOLBAR_VISIBLE));
  setBounds(GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds());
  pw=new PositionWindow(this,JabRefPreferences.POS_X,JabRefPreferences.POS_Y,JabRefPreferences.SIZE_X,JabRefPreferences.SIZE_Y);
  positionWindowOnScreen();
  this.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      pw.storeWindowPosition();
    }
    @Override public void componentMoved(    ComponentEvent e){
      pw.storeWindowPosition();
    }
  }
);
  tabbedPane.setBorder(null);
  tabbedPane.setForeground(GUIGlobals.inActiveTabbed);
  tabbedPane.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      markActiveBasePanel();
      BasePanel bp=getCurrentBasePanel();
      if (bp != null) {
        groupToggle.setSelected(sidePaneManager.isComponentVisible("groups"));
        searchToggle.setSelected(sidePaneManager.isComponentVisible("search"));
        previewToggle.setSelected(Globals.prefs.getBoolean(JabRefPreferences.PREVIEW_ENABLED));
        fetcherToggle.setSelected(sidePaneManager.isComponentVisible(generalFetcher.getTitle()));
        Globals.focusListener.setFocused(bp.mainTable);
        setWindowTitle();
        bp.updateSearchManager();
        bp.setBackAndForwardEnabledState();
        new FocusRequester(bp.mainTable);
      }
    }
  }
);
  if (OS.OS_X) {
    try {
      new MacAdapter().registerMacEvents(this);
    }
 catch (    Exception e) {
      LOGGER.fatal("Could not interface with Mac OS X methods.",e);
    }
  }
}
