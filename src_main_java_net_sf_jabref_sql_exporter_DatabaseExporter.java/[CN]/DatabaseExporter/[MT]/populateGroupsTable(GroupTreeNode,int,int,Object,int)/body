{
  if (cursor == null) {
    return -1;
  }
  AbstractGroup group=cursor.getGroup();
  String searchField=null;
  String searchExpr=null;
  String caseSens=null;
  String regExp=null;
  GroupHierarchyType hierContext=group.getHierarchicalContext();
  if (group instanceof KeywordGroup) {
    searchField=((KeywordGroup)group).getSearchField();
    searchExpr=((KeywordGroup)group).getSearchExpression();
    caseSens=((KeywordGroup)group).isCaseSensitive() ? "1" : "0";
    regExp=((KeywordGroup)group).isRegExp() ? "1" : "0";
  }
 else   if (group instanceof SearchGroup) {
    searchExpr=((SearchGroup)group).getSearchExpression();
    caseSens=((SearchGroup)group).isCaseSensitive() ? "1" : "0";
    regExp=((SearchGroup)group).isRegExp() ? "1" : "0";
  }
  if (searchField != null) {
    searchField=StringUtil.quote(searchField,"'",'\\');
  }
  if (searchExpr != null) {
    searchExpr=StringUtil.quote(searchExpr,"'",'\\');
  }
  SQLUtil.processQuery(out,"INSERT INTO groups (label, parent_id, group_types_id, search_field, " + "search_expression, case_sensitive, reg_exp, hierarchical_context, database_id) " + "VALUES ('" + group.getName() + "', "+ parentID+ ", (SELECT group_types_id FROM group_types where label='"+ group.getTypeId()+ "')"+ ", "+ (searchField != null ? '\'' + searchField + '\'' : "NULL")+ ", "+ (searchExpr != null ? '\'' + searchExpr + '\'' : "NULL")+ ", "+ (caseSens != null ? '\'' + caseSens + '\'' : "NULL")+ ", "+ (regExp != null ? '\'' + regExp + '\'' : "NULL")+ ", "+ hierContext.ordinal()+ ", '"+ database_id+ "');");
  if (out instanceof Connection) {
    try (Statement statement=((Connection)out).createStatement();ResultSet rs=statement.executeQuery("SELECT groups_id FROM groups WHERE label='" + cursor.getGroup().getName() + "' AND database_id='"+ database_id+ "' AND parent_id='"+ parentID+ "';")){
      int myID=currentID;
      rs.next();
      myID=rs.getInt("groups_id");
      for (      GroupTreeNode child : cursor.getChildren()) {
        ++currentID;
        currentID=populateGroupsTable(child,myID,currentID,out,database_id);
      }
    }
 catch (    Exception e) {
      LOGGER.warn("Cannot close resource",e);
    }
  }
  return currentID;
}
