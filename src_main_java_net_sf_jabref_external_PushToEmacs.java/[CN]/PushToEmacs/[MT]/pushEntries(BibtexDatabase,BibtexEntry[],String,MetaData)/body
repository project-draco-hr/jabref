{
  couldNotConnect=false;
  couldNotRunClient=false;
  String command=Globals.prefs.get(JabRefPreferences.EMACS_PATH);
  String[] addParams=Globals.prefs.get(JabRefPreferences.EMACS_ADDITIONAL_PARAMETERS).split(" ");
  try {
    String[] com=new String[addParams.length + 2];
    com[0]=command;
    System.arraycopy(addParams,0,com,1,addParams.length);
    String prefix;
    String suffix;
    if (Globals.prefs.getBoolean(JabRefPreferences.EMACS_23)) {
      prefix="(with-current-buffer (window-buffer) (insert ";
      suffix="))";
    }
 else {
      prefix="(insert ";
      suffix=")";
    }
    com[com.length - 1]=OS.WINDOWS ? prefix.concat("\\\"\\" + Globals.prefs.get(JabRefPreferences.CITE_COMMAND_EMACS).replaceAll("\\\\","\\\\\\\\") + "{"+ keys+ "}\\\"").concat(suffix) : prefix.concat("\"" + Globals.prefs.get(JabRefPreferences.CITE_COMMAND_EMACS).replaceAll("\\\\","\\\\\\\\") + "{"+ keys+ "}\"").concat(suffix);
    final Process p=Runtime.getRuntime().exec(com);
    Runnable errorListener=new Runnable(){
      @Override public void run(){
        InputStream out=p.getErrorStream();
        int c;
        StringBuilder sb=new StringBuilder();
        try {
          while ((c=out.read()) != -1) {
            sb.append((char)c);
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        if (!sb.toString().trim().isEmpty()) {
          System.out.println(sb);
          couldNotConnect=true;
        }
      }
    }
;
    JabRefExecutorService.INSTANCE.executeAndWait(errorListener);
  }
 catch (  IOException excep) {
    couldNotRunClient=true;
  }
}
