{
  final Collection<BibtexEntry> entries=new ArrayList<BibtexEntry>();
  entries.add(entry);
  final ExternalFileType[] types=Globals.prefs.getExternalFileTypeSelection();
  final JProgressBar prog=new JProgressBar(JProgressBar.HORIZONTAL,0,types.length - 1);
  prog.setIndeterminate(true);
  prog.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  final JLabel label=new JLabel(Globals.lang("Searching for files"));
  if (diag != null) {
    diag.setTitle(Globals.lang("Autosetting links"));
    diag.getContentPane().add(prog,BorderLayout.CENTER);
    diag.getContentPane().add(label,BorderLayout.SOUTH);
    diag.pack();
    diag.setLocationRelativeTo(diag.getParent());
  }
  Runnable r=new Runnable(){
    public void run(){
      boolean foundAny=false;
      ExternalFileType[] types=Globals.prefs.getExternalFileTypeSelection();
      ArrayList<File> dirs=new ArrayList<File>();
      String[] dirsS=metaData.getFileDirectory(GUIGlobals.FILE_FIELD);
      for (int i=0; i < dirsS.length; i++)       dirs.add(new File(dirsS[i]));
      Collection<String> extensions=new ArrayList<String>();
      for (int i=0; i < types.length; i++) {
        final ExternalFileType type=types[i];
        extensions.add(type.getExtension());
      }
      Map<BibtexEntry,java.util.List<File>> result;
      if (Globals.prefs.getBoolean(JabRefPreferences.USE_REG_EXP_SEARCH_KEY)) {
        String regExp=Globals.prefs.get(JabRefPreferences.REG_EXP_SEARCH_EXPRESSION_KEY);
        result=RegExpFileSearch.findFilesForSet(entries,extensions,dirs,regExp);
      }
 else       result=Util.findAssociatedFiles(entries,extensions,dirs);
      for (Iterator<BibtexEntry> i=result.keySet().iterator(); i.hasNext(); ) {
        BibtexEntry anEntry=i.next();
        List<File> files=result.get(anEntry);
        for (        File f : files) {
          f=relativizePath(f,dirs);
          boolean alreadyHas=false;
          for (int j=0; j < tableModel.getRowCount(); j++) {
            FileListEntry existingEntry=tableModel.getEntry(j);
            if (new File(existingEntry.getLink()).equals(f)) {
              alreadyHas=true;
              break;
            }
          }
          if (!alreadyHas) {
            int index=f.getPath().lastIndexOf('.');
            if ((index >= 0) && (index < f.getPath().length() - 1)) {
              ExternalFileType type=Globals.prefs.getExternalFileTypeByExt(f.getPath().substring(index + 1));
              FileListEntry flEntry=new FileListEntry(f.getName(),f.getPath(),type);
              tableModel.addEntry(tableModel.getRowCount(),flEntry);
              foundAny=true;
            }
 else {
              FileListEntry flEntry=new FileListEntry(f.getName(),f.getPath(),new UnknownExternalFileType(""));
              tableModel.addEntry(tableModel.getRowCount(),flEntry);
              foundAny=true;
            }
          }
        }
      }
      final int id=foundAny ? 1 : 0;
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (diag != null)           diag.dispose();
          if (callback != null)           callback.actionPerformed(new ActionEvent(this,id,""));
        }
      }
);
    }
  }
;
  Thread t=new Thread(r);
  t.start();
  if (diag != null) {
    diag.setVisible(true);
  }
  return t;
}
