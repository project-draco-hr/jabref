{
  final ExternalFileType[] types=Globals.prefs.getExternalFileTypeSelection();
  final JLabel label=new JLabel(Globals.lang("Searching for files"));
  Runnable r=new Runnable(){
    public void run(){
      boolean foundAny=false;
      ExternalFileType[] types=Globals.prefs.getExternalFileTypeSelection();
      ArrayList<File> dirs=new ArrayList<File>();
      if (Globals.prefs.hasKey(GUIGlobals.FILE_FIELD + "Directory"))       dirs.add(new File(Globals.prefs.get(GUIGlobals.FILE_FIELD + "Directory")));
      Collection<String> extensions=new ArrayList<String>();
      for (int i=0; i < types.length; i++) {
        final ExternalFileType type=types[i];
        extensions.add(type.getExtension());
      }
      Map<BibtexEntry,java.util.List<File>> result=Util.findAssociatedFiles(entries,extensions,dirs);
      for (Iterator<BibtexEntry> i=result.keySet().iterator(); i.hasNext(); ) {
        BibtexEntry anEntry=i.next();
        FileListTableModel tableModel=new FileListTableModel();
        Object oldVal=anEntry.getField(GUIGlobals.FILE_FIELD);
        if (oldVal != null)         tableModel.setContent((String)oldVal);
        List<File> files=result.get(anEntry);
        for (        File f : files) {
          boolean alreadyHas=false;
          for (int j=0; j < tableModel.getRowCount(); j++) {
            FileListEntry existingEntry=tableModel.getEntry(j);
            if (new File(existingEntry.getLink()).equals(f)) {
              alreadyHas=true;
              break;
            }
          }
          if (!alreadyHas) {
            int index=f.getPath().indexOf('.');
            if ((index >= 0) && (index < f.getPath().length() - 1)) {
              ExternalFileType type=Globals.prefs.getExternalFileTypeByExt(f.getPath().substring(index + 1));
              FileListEntry flEntry=new FileListEntry(f.getName(),f.getPath(),type);
              tableModel.addEntry(tableModel.getRowCount(),flEntry);
            }
 else {
              FileListEntry flEntry=new FileListEntry(f.getName(),f.getPath(),new UnknownExternalFileType(""));
              tableModel.addEntry(tableModel.getRowCount(),flEntry);
            }
            String newVal=tableModel.getStringRepresentation();
            if (newVal.length() == 0)             newVal=null;
            UndoableFieldChange change=new UndoableFieldChange(anEntry,GUIGlobals.FILE_FIELD,oldVal,newVal);
            ce.addEdit(change);
            anEntry.setField(GUIGlobals.FILE_FIELD,newVal);
            changedEntries.add(anEntry);
          }
        }
      }
    }
  }
;
  Thread t=new Thread(r);
  t.start();
  return t;
}
