{
  final ExternalFileType[] types=Globals.prefs.getExternalFileTypeSelection();
  final JProgressBar prog=new JProgressBar(JProgressBar.HORIZONTAL,types.length - 1);
  prog.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  final JLabel label=new JLabel(Globals.lang("Searching for") + ":                                            ");
  if (diag != null) {
    diag.setTitle(Globals.lang("Autosetting links"));
    diag.getContentPane().add(prog,BorderLayout.CENTER);
    diag.getContentPane().add(label,BorderLayout.SOUTH);
    diag.pack();
    diag.setLocationRelativeTo(diag.getParent());
  }
  Runnable r=new Runnable(){
    public void run(){
      boolean foundAny=false;
      ExternalFileType[] types=Globals.prefs.getExternalFileTypeSelection();
      ArrayList dirs=new ArrayList();
      if (Globals.prefs.hasKey(GUIGlobals.FILE_FIELD + "Directory"))       dirs.add(Globals.prefs.get(GUIGlobals.FILE_FIELD + "Directory"));
      for (int i=0; i < types.length; i++) {
        final ExternalFileType type=types[i];
        String found=Util.findFile(entry,type,dirs);
        if (found != null) {
          File f=new File(found);
          boolean alreadyHas=false;
          for (int j=0; j < tableModel.getRowCount(); j++) {
            FileListEntry existingEntry=tableModel.getEntry(j);
            if (new File(existingEntry.getLink()).equals(f)) {
              alreadyHas=true;
              break;
            }
          }
          if (!alreadyHas) {
            FileListEntry flEntry=new FileListEntry(f.getName(),found,type);
            tableModel.addEntry(tableModel.getRowCount(),flEntry);
            foundAny=true;
          }
        }
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            label.setText(Globals.lang("Searching for") + ": " + type.getName());
            prog.setValue(prog.getValue() + 1);
          }
        }
);
      }
      final int id=foundAny ? 1 : 0;
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (diag != null)           diag.dispose();
          if (callback != null)           callback.actionPerformed(new ActionEvent(this,id,""));
        }
      }
);
    }
  }
;
  Thread t=new Thread(r);
  t.start();
  if (diag != null) {
    diag.setVisible(true);
  }
  return t;
}
