{
  this.frame=frame;
  this.fieldName=fieldName;
  this.entryEditor=entryEditor;
  label=new FieldNameLabel(" " + Util.nCase(fieldName) + " ");
  tableModel=new FileListTableModel();
  setText(content);
  setModel(tableModel);
  sPane=new JScrollPane(this);
  setTableHeader(null);
  addMouseListener(new TableClickListener());
  add=new JButton(GUIGlobals.getImage("add"));
  remove=new JButton(GUIGlobals.getImage("remove"));
  up=new JButton(GUIGlobals.getImage("up"));
  down=new JButton(GUIGlobals.getImage("down"));
  auto=new JButton(Globals.lang("Auto"));
  download=new JButton(Globals.lang("Download"));
  add.setMargin(new Insets(0,0,0,0));
  remove.setMargin(new Insets(0,0,0,0));
  up.setMargin(new Insets(0,0,0,0));
  down.setMargin(new Insets(0,0,0,0));
  add.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      addEntry();
    }
  }
);
  remove.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      removeEntries();
    }
  }
);
  up.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      moveEntry(-1);
    }
  }
);
  down.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      moveEntry(1);
    }
  }
);
  auto.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      autoSetLinks();
    }
  }
);
  download.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      downloadFile();
    }
  }
);
  DefaultFormBuilder builder=new DefaultFormBuilder(new FormLayout("fill:pref,1dlu,fill:pref,1dlu,fill:pref","fill:pref,fill:pref"));
  builder.append(up);
  builder.append(add);
  builder.append(auto);
  builder.append(down);
  builder.append(remove);
  builder.append(download);
  panel=new JPanel();
  panel.setLayout(new BorderLayout());
  panel.add(sPane,BorderLayout.CENTER);
  panel.add(builder.getPanel(),BorderLayout.EAST);
  getInputMap().put(KeyStroke.getKeyStroke("DELETE"),"delete");
  getActionMap().put("delete",new AbstractAction(){
    public void actionPerformed(    ActionEvent actionEvent){
      int row=getSelectedRow();
      removeEntries();
      row=Math.min(row,getRowCount() - 1);
      if (row >= 0)       setRowSelectionInterval(row,row);
    }
  }
);
  getInputMap().put(KeyStroke.getKeyStroke("INSERT"),"insert");
  getActionMap().put("insert",new AbstractAction(){
    public void actionPerformed(    ActionEvent actionEvent){
      addEntry();
    }
  }
);
}
