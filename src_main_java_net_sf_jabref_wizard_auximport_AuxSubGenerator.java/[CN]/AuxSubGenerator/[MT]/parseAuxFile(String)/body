{
  Matcher matcher;
  boolean cont;
  boolean back=true;
  List<String> fileList=new ArrayList<>(5);
  fileList.add(filename);
  File dummy=new File(filename);
  String path=dummy.getParent();
  if (path == null) {
    path="";
  }
 else {
    path=path + File.separator;
  }
  nestedAuxCounter=-1;
  int fileIndex=0;
  while (fileIndex < fileList.size()) {
    String fName=fileList.get(fileIndex);
    try (BufferedReader br=new BufferedReader(new FileReader(fName))){
      cont=true;
      while (cont) {
        Optional<String> maybeLine;
        try {
          maybeLine=Optional.ofNullable(br.readLine());
        }
 catch (        IOException ioe) {
          maybeLine=Optional.empty();
        }
        if (maybeLine.isPresent()) {
          String line=maybeLine.get();
          matcher=TAG_PATTERN.matcher(line);
          while (matcher.find()) {
            int len=matcher.end() - matcher.start();
            if (len > 11) {
              String str=matcher.group(2);
              String[] keys=str.split(",");
              if (keys != null) {
                for (                String dummyStr : keys) {
                  if (dummyStr != null) {
                    mySet.add(dummyStr.trim());
                  }
                }
              }
            }
          }
          int index=line.indexOf("\\@input{");
          if (index >= 0) {
            int start=index + 8;
            int end=line.indexOf('}',start);
            if (end > start) {
              String str=path + line.substring(index + 8,end);
              if (!fileList.contains(str)) {
                fileList.add(str);
              }
            }
          }
        }
 else {
          cont=false;
        }
      }
      nestedAuxCounter++;
    }
 catch (    FileNotFoundException e) {
      LOGGER.info("Cannot locate input file!",e);
    }
catch (    IOException e) {
      LOGGER.warn("Problem opening file!",e);
    }
    fileIndex++;
  }
  return back;
}
