{
  Pattern pattern;
  Matcher matcher;
  boolean cont;
  boolean back=true;
  boolean loopFileOpen;
  pattern=Pattern.compile("\\\\(citation|abx@aux@cite)\\{(.+)\\}");
  BufferedReader br=null;
  Vector<String> fileList=new Vector<>(5);
  fileList.add(filename);
  File dummy=new File(filename);
  String path=dummy.getParent();
  if (path != null) {
    path=path + File.separator;
  }
 else {
    path="";
  }
  nestedAuxCounter=-1;
  int fileIndex=0;
  while (fileIndex < fileList.size()) {
    String fName=fileList.elementAt(fileIndex);
    try {
      br=new BufferedReader(new FileReader(fName));
      cont=true;
      loopFileOpen=true;
    }
 catch (    FileNotFoundException fnfe) {
      System.out.println("Cannot locate input file! " + fnfe.getMessage());
      back=false;
      cont=false;
      loopFileOpen=false;
      try {
        br.close();
      }
 catch (      IOException e) {
      }
    }
    while (cont) {
      String line;
      try {
        line=br.readLine();
      }
 catch (      IOException ioe) {
        line=null;
        cont=false;
      }
      if (line != null) {
        matcher=pattern.matcher(line);
        while (matcher.find()) {
          int len=matcher.end() - matcher.start();
          if (len > 11) {
            String str=matcher.group(2);
            String[] keys=str.split(",");
            if (keys != null) {
              for (              String dummyStr : keys) {
                if (dummyStr != null) {
                  mySet.add(dummyStr.trim());
                }
              }
            }
          }
        }
        int index=line.indexOf("\\@input{");
        if (index >= 0) {
          int start=index + 8;
          int end=line.indexOf("}",start);
          if (end > start) {
            String str=path + line.substring(index + 8,end);
            if (!fileList.contains(str)) {
              fileList.add(str);
            }
          }
        }
      }
 else {
        cont=false;
      }
    }
    if (loopFileOpen) {
      try {
        br.close();
        nestedAuxCounter++;
      }
 catch (      IOException ignored) {
      }
    }
    fileIndex++;
  }
  return back;
}
