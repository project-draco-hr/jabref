{
  if (!Desktop.isDesktopSupported()) {
    message=Globals.lang("Error creating email");
    return;
  }
  BasePanel panel=frame.basePanel();
  if (panel == null)   return;
  if (panel.getSelectedEntries().length == 0) {
    message=Globals.lang("No entries selected.");
    return;
  }
  StringWriter sw=new StringWriter();
  BibtexEntry[] bes=panel.getSelectedEntries();
  BibtexEntryWriter bibtexEntryWriter=new BibtexEntryWriter(new LatexFieldFormatter(),true);
  for (  BibtexEntry entry : bes) {
    try {
      bibtexEntryWriter.write(entry,sw);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  ArrayList<String> attachments=new ArrayList<String>();
  boolean openFolders=JabRefPreferences.getInstance().getBoolean("openFoldersOfAttachedFiles");
  List<File> fileList=Util.getListOfLinkedFiles(bes,frame.basePanel().metaData().getFileDirectory(GUIGlobals.FILE_FIELD));
  for (  File f : fileList) {
    attachments.add(f.getPath());
    if (openFolders) {
      try {
        Util.openFolderAndSelectFile(f.getAbsolutePath());
      }
 catch (      IOException e) {
        logger.fine(e.getMessage());
      }
    }
  }
  String mailTo="?Body=".concat(sw.getBuffer().toString());
  mailTo=mailTo.concat("&Subject=");
  mailTo=mailTo.concat(JabRefPreferences.getInstance().get(JabRefPreferences.EMAIL_SUBJECT));
  for (  String path : attachments) {
    mailTo=mailTo.concat("&Attachment=\"").concat(path);
    mailTo=mailTo.concat("\"");
  }
  URI uriMailTo=null;
  try {
    uriMailTo=new URI("mailto",mailTo,null);
  }
 catch (  URISyntaxException e1) {
    e1.printStackTrace();
    message=Globals.lang("Error creating email");
    return;
  }
  Desktop desktop=Desktop.getDesktop();
  try {
    desktop.mail(uriMailTo);
  }
 catch (  IOException e) {
    e.printStackTrace();
    message=Globals.lang("Error creating email");
    return;
  }
  message=String.format("%s: %d",Globals.lang("Entries added to an email"),bes.length);
}
