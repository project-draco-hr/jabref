{
  AutoCompletePreferences autoCompletePreferences=new AutoCompletePreferences(JabRefPreferences.getInstance());
  AutoCompleterFactory autoCompleterFactory=new AutoCompleterFactory(autoCompletePreferences);
  AutoCompleter<String> autoCompleter=autoCompleterFactory.getFor(AutoCompleterTest.AUTHOR_FIELD);
  for (  BibtexEntry entry : getDatabase().getEntries()) {
    autoCompleter.addBibtexEntry(entry);
  }
  boolean oldAutocomplete=Globals.prefs.getBoolean("autoComplete");
  Globals.prefs.putBoolean("autoComplete",Boolean.TRUE);
  boolean oldAutoCompFF=Globals.prefs.getBoolean("autoCompLF");
  Globals.prefs.putBoolean("autoCompFF",Boolean.FALSE);
  boolean oldAutoCompLF=Globals.prefs.getBoolean("autoCompLF");
  Globals.prefs.putBoolean("autoCompLF",Boolean.FALSE);
  AutoCompleteFirstNameMode oldACFM=autoCompletePreferences.getFirstnameMode();
  autoCompletePreferences.setFirstnameMode(AutoCompleteFirstNameMode.BOTH);
  Assert.assertEquals("Kostakos, V.",autoCompleter.complete("Kostakos")[0]);
  Assert.assertEquals(2,autoCompleter.complete("Kostakos").length);
  Assert.assertEquals("Kostakos, V.",autoCompleter.complete("Kosta")[0]);
  Assert.assertEquals(2,autoCompleter.complete("Kosta").length);
  Assert.assertEquals("Kostakos, Vassilis",autoCompleter.complete("Kostakos, Va")[0]);
  Assert.assertEquals(1,autoCompleter.complete("Kostakos, Va").length);
  Assert.assertEquals("Vassilis Kostakos",autoCompleter.complete("Va")[0]);
  Assert.assertEquals(1,autoCompleter.complete("Va").length);
  Assert.assertEquals(0,autoCompleter.complete("osta").length);
  Assert.assertEquals(0,autoCompleter.complete("osta").length);
  Assert.assertEquals("Eric von Hippel",autoCompleter.complete("Eric")[0]);
  Assert.assertEquals(1,autoCompleter.complete("Eric").length);
  Assert.assertEquals("von Hippel, E.",autoCompleter.complete("von")[0]);
  Assert.assertEquals(2,autoCompleter.complete("von").length);
  Assert.assertEquals("Reagle, Jr., J. M.",autoCompleter.complete("Reagle")[0]);
  Assert.assertEquals(2,autoCompleter.complete("Reagle").length);
  Assert.assertEquals("Reagle, Jr., Joseph M.",autoCompleter.complete("Reagle, Jr., Jo")[0]);
  Assert.assertEquals(1,autoCompleter.complete("Reagle, Jr., Jo").length);
  Assert.assertEquals("Joseph M. Reagle, Jr.",autoCompleter.complete("Joseph")[0]);
  Assert.assertEquals(1,autoCompleter.complete("Joseph").length);
  Assert.assertEquals("van den Huevel, Jr., J. A.",autoCompleter.complete("van den")[0]);
  Assert.assertEquals(2,autoCompleter.complete("van den").length);
  Assert.assertEquals("Johan A van den Huevel, Jr.",autoCompleter.complete("Joh")[0]);
  Assert.assertEquals(1,autoCompleter.complete("Joh").length);
  Assert.assertEquals("Jr. Sherry, John F.",autoCompleter.complete("Jr. S")[0]);
  Assert.assertEquals(1,autoCompleter.complete("Jr.").length);
  Assert.assertEquals("Sherry, John F., J.",autoCompleter.complete("Sherry")[0]);
  Assert.assertEquals(2,autoCompleter.complete("Sherry").length);
  Globals.prefs.putBoolean("autoComplete",oldAutocomplete);
  Globals.prefs.putBoolean("autoCompFF",oldAutoCompFF);
  Globals.prefs.putBoolean("autoCompLF",oldAutoCompLF);
  autoCompletePreferences.setFirstnameMode(oldACFM);
}
