{
  AbstractGroup group=node.getGroup();
  Optional<EntriesGroupChange> changesRemove=Optional.empty();
  Optional<EntriesGroupChange> changesAdd=Optional.empty();
  List<BibEntry> toRemove=new ArrayList<>(entries.size());
  List<BibEntry> toAdd=new ArrayList<>(entries.size());
  for (  BibEntry entry : entries) {
    if (group.contains(entry)) {
      toRemove.add(entry);
    }
 else {
      toAdd.add(entry);
    }
  }
  if (!toRemove.isEmpty()) {
    changesRemove=removeEntriesFromGroup(toRemove);
  }
  if (!toAdd.isEmpty()) {
    changesAdd=addEntriesToGroup(toAdd);
  }
  if (changesRemove.isPresent()) {
    AbstractUndoableEdit undoRemove=UndoableChangeEntriesOfGroup.getUndoableEdit(this,changesRemove.get());
    if (changesAdd.isPresent() && (undoRemove != null)) {
      undoRemove.addEdit(UndoableChangeEntriesOfGroup.getUndoableEdit(this,changesAdd.get()));
    }
    undoManager.addEdit(undoRemove);
  }
 else   if (changesAdd.isPresent()) {
    undoManager.addEdit(UndoableChangeEntriesOfGroup.getUndoableEdit(this,changesAdd.get()));
  }
}
