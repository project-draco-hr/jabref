{
  try {
    List<File> files=null;
    if (t.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
      files=(List<File>)t.getTransferData(DataFlavor.javaFileListFlavor);
    }
    if (t.isDataFlavorSupported(urlFlavor)) {
      URL dropLink=(URL)t.getTransferData(urlFlavor);
      LOGGER.debug("URL: " + dropLink);
    }
    if (t.isDataFlavorSupported(stringFlavor)) {
      String dropStr=(String)t.getTransferData(stringFlavor);
      files=EntryTableTransferHandler.getFilesFromDraggedFilesString(dropStr);
    }
    if (files != null) {
      final List<File> theFiles=files;
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          for (          File file : theFiles) {
            String name=file.getAbsolutePath();
            Optional<String> extension=FileUtil.getFileExtension(name);
            ExternalFileType fileType=null;
            if (extension.isPresent()) {
              fileType=ExternalFileTypes.getInstance().getExternalFileTypeByExt(extension.get());
            }
            if (fileType != null) {
              if (droppedFileHandler == null) {
                droppedFileHandler=new DroppedFileHandler(frame,frame.getCurrentBasePanel());
              }
              droppedFileHandler.handleDroppedfile(name,fileType,entryContainer.getEntry());
            }
          }
        }
      }
);
      return true;
    }
  }
 catch (  IOException ioe) {
    LOGGER.warn("Failed to read dropped data. ",ioe);
  }
catch (  UnsupportedFlavorException|ClassCastException ufe) {
    LOGGER.warn("Drop type error. ",ufe);
  }
  StringBuilder logMessage=new StringBuilder("Cannot transfer input:");
  DataFlavor[] inflavs=t.getTransferDataFlavors();
  for (  DataFlavor inflav : inflavs) {
    logMessage.append(' ').append(inflav);
  }
  LOGGER.warn(logMessage.toString());
  return false;
}
