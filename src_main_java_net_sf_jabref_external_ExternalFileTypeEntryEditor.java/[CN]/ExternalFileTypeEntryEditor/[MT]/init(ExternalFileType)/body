{
  this.entry=entry;
  icon.setText(null);
  ButtonGroup bg=new ButtonGroup();
  bg.add(useDefault);
  bg.add(other);
  FormBuilder builder=FormBuilder.create();
  builder.layout(new FormLayout("left:pref, 4dlu, fill:150dlu, 4dlu, fill:pref","p, 2dlu, p, 2dlu, p, 2dlu, p, 2dlu, p, 2dlu, p"));
  builder.add(Localization.lang("Icon")).xy(1,1);
  builder.add(icon).xy(3,1);
  builder.add(Localization.lang("Name")).xy(1,3);
  builder.add(name).xy(3,3);
  builder.add(Localization.lang("Extension")).xy(1,5);
  builder.add(extension).xy(3,5);
  builder.add(Localization.lang("MIME type")).xy(1,7);
  builder.add(mimeType).xy(3,7);
  builder.getPanel().setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  builder.add(Localization.lang("Application")).xy(1,9);
  JButton browseBut=new JButton(Localization.lang("Browse"));
  if (OS.WINDOWS) {
    builder.add(useDefault).xy(3,9);
    builder.appendRows("2dlu, p");
    JPanel p1=new JPanel();
    builder.add(p1).xy(1,11);
    JPanel p2=new JPanel();
    application.setPreferredSize(new Dimension(300,application.getPreferredSize().height));
    BorderLayout bl=new BorderLayout();
    bl.setHgap(4);
    p2.setLayout(bl);
    p2.add(other,BorderLayout.WEST);
    p2.add(application,BorderLayout.CENTER);
    builder.add(p2).xy(3,11);
    builder.add(browseBut).xy(5,11);
  }
 else {
    builder.add(application).xy(3,9);
    builder.add(browseBut).xy(5,9);
  }
  ButtonBarBuilder bb=new ButtonBarBuilder();
  bb.addGlue();
  bb.addButton(ok);
  bb.addButton(cancel);
  bb.addGlue();
  ok.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      okPressed=true;
      storeSettings(ExternalFileTypeEntryEditor.this.entry);
      diag.dispose();
    }
  }
);
  cancel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      diag.dispose();
    }
  }
);
  icon.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      String initSel=ExternalFileTypeEntryEditor.this.entry.getIconName();
      if (selectedIcon != null) {
        initSel=selectedIcon;
      }
      IconSelection ic=new IconSelection(diag,initSel);
      ic.setVisible(true);
      if (ic.isOkPressed()) {
        selectedIcon=ic.getSelectedIconKey();
        icon.setIcon(IconTheme.getImage(selectedIcon));
      }
    }
  }
);
  if (OS.WINDOWS) {
    application.getDocument().addDocumentListener(new DocumentListener(){
      private void handle(      DocumentEvent e){
        if (application.getText().isEmpty()) {
          useDefault.setSelected(true);
        }
 else {
          other.setSelected(true);
        }
      }
      @Override public void insertUpdate(      DocumentEvent e){
        handle(e);
      }
      @Override public void removeUpdate(      DocumentEvent documentEvent){
        handle(documentEvent);
      }
      @Override public void changedUpdate(      DocumentEvent documentEvent){
        handle(documentEvent);
      }
    }
);
  }
  String title="Edit file type";
  if (entry.getName().isEmpty()) {
    title="Add new file type";
  }
  if (dParent != null) {
    diag=new JDialog(dParent,Localization.lang(title),true);
  }
 else {
    diag=new JDialog(fParent,Localization.lang(title),true);
  }
  diag.getContentPane().add(builder.getPanel(),BorderLayout.CENTER);
  diag.getContentPane().add(bb.getPanel(),BorderLayout.SOUTH);
  diag.pack();
  BrowseListener browse=new BrowseListener(diag,application);
  browseBut.addActionListener(browse);
  if (dParent != null) {
    diag.setLocationRelativeTo(dParent);
  }
 else {
    diag.setLocationRelativeTo(fParent);
  }
  setValues(entry);
}
