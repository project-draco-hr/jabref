{
  ArrayList<File> res=new ArrayList<>();
  if (file.startsWith("/")) {
    directory=new File(".");
    file=file.substring(1);
  }
  Matcher m=ESCAPE_PATTERN.matcher(file);
  StringBuffer s=new StringBuffer();
  while (m.find()) {
    m.appendReplacement(s,m.group(1) + '/' + m.group(2));
  }
  m.appendTail(s);
  file=s.toString();
  String[] fileParts=file.split("/");
  if (fileParts.length == 0) {
    return res;
  }
  if (fileParts.length > 1) {
    for (int i=0; i < (fileParts.length - 1); i++) {
      String dirToProcess=fileParts[i];
      dirToProcess=Util.expandBrackets(dirToProcess,entry,null);
      if (dirToProcess.matches("^.:$")) {
        directory=new File(dirToProcess + '/');
        continue;
      }
      if (".".equals(dirToProcess)) {
        continue;
      }
      if ("..".equals(dirToProcess)) {
        directory=new File(directory.getParent());
        continue;
      }
      if ("*".equals(dirToProcess)) {
        File[] subDirs=directory.listFiles();
        if (subDirs != null) {
          String restOfFileString=StringUtil.join(fileParts,"/",i + 1,fileParts.length);
          for (          File subDir : subDirs) {
            if (subDir.isDirectory()) {
              res.addAll(RegExpFileSearch.findFile(entry,subDir,restOfFileString,extensionRegExp));
            }
          }
        }
      }
      if ("**".equals(dirToProcess)) {
        List<File> toDo=new LinkedList<>();
        toDo.add(directory);
        String restOfFileString=StringUtil.join(fileParts,"/",i + 1,fileParts.length);
        while (!toDo.isEmpty()) {
          File[] subDirs=toDo.remove(0).listFiles();
          if (subDirs == null) {
            continue;
          }
          toDo.addAll(Arrays.asList(subDirs));
          for (          File subDir : subDirs) {
            if (!subDir.isDirectory()) {
              continue;
            }
            res.addAll(RegExpFileSearch.findFile(entry,subDir,restOfFileString,extensionRegExp));
          }
        }
      }
    }
  }
  String filePart=fileParts[fileParts.length - 1].replace("[extension]",RegExpFileSearch.EXT_MARKER);
  String filenameToLookFor=Util.expandBrackets(filePart,entry,null).replaceAll(RegExpFileSearch.EXT_MARKER,extensionRegExp);
  final Pattern toMatch=Pattern.compile('^' + filenameToLookFor.replaceAll("\\\\\\\\","\\\\") + '$',Pattern.CASE_INSENSITIVE);
  File[] matches=directory.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File arg0,    String arg1){
      return toMatch.matcher(arg1).matches();
    }
  }
);
  if ((matches != null) && (matches.length > 0)) {
    Collections.addAll(res,matches);
  }
  return res;
}
