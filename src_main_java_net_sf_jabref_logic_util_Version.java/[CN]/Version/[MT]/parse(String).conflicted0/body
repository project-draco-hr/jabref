{
  if ((version == null) || "".equals(version) || version.equals(BuildInfo.UNKNOWN_VERSION)|| "${version}".equals(version)) {
    return UNKNOWN_VERSION;
  }
  Version parsedVersion=new Version();
  parsedVersion.fullVersion=version;
  Matcher matcher=VERSION_PATTERN.matcher(version);
  if (matcher.find()) {
    try {
      parsedVersion.major=Integer.parseInt(matcher.group("major"));
      String minorString=matcher.group("minor");
      parsedVersion.minor=minorString == null ? 0 : Integer.parseInt(minorString);
      String patchString=matcher.group("patch");
      parsedVersion.patch=patchString == null ? 0 : Integer.parseInt(patchString);
      String versionStageString=matcher.group("stage");
      parsedVersion.developmentStage=versionStageString == null ? DevelopmentStage.STABLE : DevelopmentStage.parse(versionStageString);
      parsedVersion.isDevelopmentVersion=matcher.group("dev") != null;
    }
 catch (    NumberFormatException e) {
      LOGGER.warn("Invalid version string used: " + version,e);
      return UNKNOWN_VERSION;
    }
catch (    IllegalArgumentException e) {
      LOGGER.warn("Invalid version pattern is used",e);
      return UNKNOWN_VERSION;
    }
  }
 else {
    LOGGER.warn("Version could not be recognized by the pattern");
    return UNKNOWN_VERSION;
  }
  return parsedVersion;
}
