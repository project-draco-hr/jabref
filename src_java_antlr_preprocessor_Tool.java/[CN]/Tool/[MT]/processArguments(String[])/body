{
  this.nargs=0;
  this.args=new String[incomingArgs.length];
  for (int i=0; i < incomingArgs.length; i++) {
    if (incomingArgs[i].length() == 0) {
      antlrTool.warning("Zero length argument ignoring...");
      continue;
    }
    if (incomingArgs[i].equals("-glib")) {
      if (File.separator.equals("\\") && incomingArgs[i].indexOf('/') != -1) {
        antlrTool.warning("-glib cannot deal with '/' on a PC: use '\\'; ignoring...");
      }
 else {
        grammars=antlrTool.parseSeparatedList(incomingArgs[i + 1],';');
        i++;
      }
    }
 else     if (incomingArgs[i].equals("-o")) {
      args[this.nargs++]=incomingArgs[i];
      if (i + 1 >= incomingArgs.length) {
        antlrTool.error("missing output directory with -o option; ignoring");
      }
 else {
        i++;
        args[this.nargs++]=incomingArgs[i];
        antlrTool.setOutputDirectory(incomingArgs[i]);
      }
    }
 else     if (incomingArgs[i].charAt(0) == '-') {
      args[this.nargs++]=incomingArgs[i];
    }
 else {
      grammarFileName=incomingArgs[i];
      if (grammars == null) {
        grammars=new Vector(10);
      }
      grammars.appendElement(grammarFileName);
      if ((i + 1) < incomingArgs.length) {
        antlrTool.warning("grammar file must be last; ignoring other arguments...");
        break;
      }
    }
  }
}
