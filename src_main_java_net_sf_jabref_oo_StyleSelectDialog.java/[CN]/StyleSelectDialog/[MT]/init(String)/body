{
  this.initSelection=initSelection;
  ButtonGroup bg=new ButtonGroup();
  bg.add(useDefaultAuthoryear);
  bg.add(useDefaultNumerical);
  bg.add(chooseDirectly);
  bg.add(setDirectory);
  if (Globals.prefs.getBoolean("ooUseDefaultAuthoryearStyle")) {
    useDefaultAuthoryear.setSelected(true);
  }
 else   if (Globals.prefs.getBoolean("ooUseDefaultNumericalStyle")) {
    useDefaultNumerical.setSelected(true);
  }
 else {
    if (Globals.prefs.getBoolean("ooChooseStyleDirectly")) {
      chooseDirectly.setSelected(true);
    }
 else {
      setDirectory.setSelected(true);
    }
  }
  directFile.setText(Globals.prefs.get("ooDirectFile"));
  styleDir.setText(Globals.prefs.get("ooStyleDirectory"));
  directFile.setEditable(false);
  styleDir.setEditable(false);
  popup.add(edit);
  BrowseAction dfBrowse=BrowseAction.buildForFile(directFile,directFile);
  browseDirectFile.addActionListener(dfBrowse);
  BrowseAction sdBrowse=BrowseAction.buildForDir(styleDir,setDirectory);
  browseStyleDir.addActionListener(sdBrowse);
  showDefaultAuthoryearStyle.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      displayDefaultStyle(true);
    }
  }
);
  showDefaultNumericalStyle.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      displayDefaultStyle(false);
    }
  }
);
  edit.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      int i=table.getSelectedRow();
      if (i == -1) {
        return;
      }
      ExternalFileType type=Globals.prefs.getExternalFileTypeByExt("jstyle");
      String link=tableModel.getElementAt(i).getFile().getPath();
      try {
        if (type != null) {
          Util.openExternalFileAnyFormat(new MetaData(),link,type);
        }
 else {
          Util.openExternalFileUnknown(frame,null,new MetaData(),link,new UnknownExternalFileType("jstyle"));
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
  diag=new JDialog(frame,Globals.lang("Styles"),true);
  styles=new BasicEventList<OOBibStyle>();
  EventList<OOBibStyle> sortedStyles=new SortedList<OOBibStyle>(styles);
  preview=new PreviewPanel(null,new MetaData(),"");
  preview.setEntry(prevEntry);
  tableModel=new EventTableModel<OOBibStyle>(sortedStyles,new StyleTableFormat());
  table=new JTable(tableModel);
  TableColumnModel cm=table.getColumnModel();
  cm.getColumn(0).setPreferredWidth(100);
  cm.getColumn(1).setPreferredWidth(200);
  cm.getColumn(2).setPreferredWidth(80);
  selectionModel=new EventSelectionModel<OOBibStyle>(sortedStyles);
  table.setSelectionModel(selectionModel);
  table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent mouseEvent){
      if (mouseEvent.isPopupTrigger()) {
        tablePopup(mouseEvent);
      }
    }
    @Override public void mouseReleased(    MouseEvent mouseEvent){
      if (mouseEvent.isPopupTrigger()) {
        tablePopup(mouseEvent);
      }
    }
  }
);
  selectionModel.getSelected().addListEventListener(new EntrySelectionListener());
  styleDir.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void insertUpdate(    DocumentEvent documentEvent){
      readStyles();
      setDirectory.setSelected(true);
    }
    @Override public void removeUpdate(    DocumentEvent documentEvent){
      readStyles();
      setDirectory.setSelected(true);
    }
    @Override public void changedUpdate(    DocumentEvent documentEvent){
      readStyles();
      setDirectory.setSelected(true);
    }
  }
);
  directFile.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void insertUpdate(    DocumentEvent documentEvent){
      chooseDirectly.setSelected(true);
    }
    @Override public void removeUpdate(    DocumentEvent documentEvent){
      chooseDirectly.setSelected(true);
    }
    @Override public void changedUpdate(    DocumentEvent documentEvent){
      chooseDirectly.setSelected(true);
    }
  }
);
  contentPane.setTopComponent(new JScrollPane(table));
  contentPane.setBottomComponent(preview);
  readStyles();
  DefaultFormBuilder b=new DefaultFormBuilder(new FormLayout("fill:pref,4dlu,fill:150dlu,4dlu,fill:pref",""));
  b.append(useDefaultAuthoryear,3);
  b.append(showDefaultAuthoryearStyle);
  b.nextLine();
  b.append(useDefaultNumerical,3);
  b.append(showDefaultNumericalStyle);
  b.nextLine();
  b.append(chooseDirectly);
  b.append(directFile);
  b.append(browseDirectFile);
  b.nextLine();
  b.append(setDirectory);
  b.append(styleDir);
  b.append(browseStyleDir);
  b.nextLine();
  DefaultFormBuilder b2=new DefaultFormBuilder(new FormLayout("fill:1dlu:grow","fill:pref, fill:pref, fill:270dlu:grow"));
  b2.nextLine();
  b2.append(new JLabel("<html>" + Globals.lang("This is the list of available styles. Select the one you want to use.") + "</html>"));
  b2.nextLine();
  b2.append(contentPane);
  b.getPanel().setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  b2.getPanel().setBorder(BorderFactory.createEmptyBorder(15,5,5,5));
  diag.add(b.getPanel(),BorderLayout.NORTH);
  diag.add(b2.getPanel(),BorderLayout.CENTER);
  AbstractAction okListener=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent event){
      if (!useDefaultAuthoryear.isSelected() && !useDefaultNumerical.isSelected()) {
        if (chooseDirectly.isSelected()) {
          File f=new File(directFile.getText());
          if (!f.exists()) {
            JOptionPane.showMessageDialog(diag,Globals.lang("You must select either a valid style file, or use a default style."),Globals.lang("Style selection"),JOptionPane.ERROR_MESSAGE);
            return;
          }
        }
 else {
          if ((table.getRowCount() == 0) || (table.getSelectedRowCount() == 0)) {
            JOptionPane.showMessageDialog(diag,Globals.lang("You must select either a valid style file, or use a default style."),Globals.lang("Style selection"),JOptionPane.ERROR_MESSAGE);
            return;
          }
        }
      }
      okPressed=true;
      storeSettings();
      diag.dispose();
    }
  }
;
  ok.addActionListener(okListener);
  Action cancelListener=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent event){
      diag.dispose();
    }
  }
;
  cancel.addActionListener(cancelListener);
  ButtonBarBuilder bb=new ButtonBarBuilder();
  bb.addGlue();
  bb.addButton(ok);
  bb.addButton(cancel);
  bb.addGlue();
  bb.getPanel().setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  diag.add(bb.getPanel(),BorderLayout.SOUTH);
  ActionMap am=bb.getPanel().getActionMap();
  InputMap im=bb.getPanel().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(Globals.prefs.getKey("Close dialog"),"close");
  am.put("close",cancelListener);
  im.put(KeyStroke.getKeyStroke("ENTER"),"enterOk");
  am.put("enterOk",okListener);
  diag.pack();
  diag.setLocationRelativeTo(frame);
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      contentPane.setDividerLocation(contentPane.getSize().height - 150);
    }
  }
);
}
