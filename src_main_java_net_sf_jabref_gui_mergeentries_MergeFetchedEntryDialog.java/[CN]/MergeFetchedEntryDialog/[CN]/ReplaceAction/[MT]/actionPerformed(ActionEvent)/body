{
  BibEntry mergedEntry=mergeEntries.getMergeEntry();
  Set<String> jointFields=new TreeSet<>(mergedEntry.getFieldNames());
  Set<String> originalFields=new TreeSet<>(originalEntry.getFieldNames());
  boolean edited=false;
  String oldType=originalEntry.getType();
  String newType=mergedEntry.getType();
  if (!oldType.equalsIgnoreCase(newType)) {
    originalEntry.setType(newType);
    ce.addEdit(new UndoableChangeType(originalEntry,oldType,newType));
    edited=true;
  }
  for (  String field : jointFields) {
    Optional<String> originalString=originalEntry.getField(field);
    Optional<String> mergedString=mergedEntry.getField(field);
    if (!originalString.isPresent() || !originalString.equals(mergedString)) {
      originalEntry.setField(field,mergedString.get());
      ce.addEdit(new UndoableFieldChange(originalEntry,field,originalString.orElse(null),mergedString.get()));
      edited=true;
    }
  }
  for (  String field : originalFields) {
    if (!jointFields.contains(field) && !InternalBibtexFields.isInternalField(field)) {
      Optional<String> originalString=originalEntry.getField(field);
      originalEntry.clearField(field);
      ce.addEdit(new UndoableFieldChange(originalEntry,field,originalString.get(),null));
      edited=true;
    }
  }
  if (edited) {
    ce.end();
    panel.getUndoManager().addEdit(ce);
    panel.output(Localization.lang("Updated entry with info from %0",type));
    panel.updateEntryEditorIfShowing();
    panel.markBaseChanged();
  }
 else {
    panel.output(Localization.lang("No information added"));
  }
  dispose();
}
