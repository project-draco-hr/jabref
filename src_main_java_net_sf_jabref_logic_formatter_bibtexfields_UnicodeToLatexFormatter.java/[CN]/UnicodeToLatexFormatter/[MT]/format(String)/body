{
  String result=Objects.requireNonNull(text);
  if (result.isEmpty()) {
    return result;
  }
  Set<Character> chars=HTMLUnicodeConversionMaps.UNICODE_LATEX_CONVERSION_MAP.keySet();
  for (  Character character : chars) {
    result=result.replace(character.toString(),HTMLUnicodeConversionMaps.UNICODE_LATEX_CONVERSION_MAP.get(character));
  }
  StringBuilder sb=new StringBuilder();
  boolean consumed=false;
  for (int i=0; i <= (result.length() - 2); i++) {
    if (!consumed && (i < (result.length() - 1))) {
      int cpCurrent=result.codePointAt(i);
      Integer cpNext=result.codePointAt(i + 1);
      String code=HTMLUnicodeConversionMaps.ESCAPED_ACCENTS.get(cpNext);
      if (code == null) {
        sb.append((char)cpCurrent);
      }
 else {
        sb.append("{\\").append(code).append('{').append((char)cpCurrent).append("}}");
        consumed=true;
      }
    }
 else {
      consumed=false;
    }
  }
  if (!consumed) {
    sb.append((char)result.codePointAt(result.length() - 1));
  }
  result=sb.toString();
  for (int i=0; i <= (result.length() - 1); i++) {
    int cp=result.codePointAt(i);
    if (cp >= 129) {
      LOGGER.warn("Unicode character not converted: " + cp);
    }
  }
  return result;
}
