{
  fileSearch.resetFileSearch();
  if (OS.WINDOWS) {
    List<File> progFiles=fileSearch.findWindowsProgramFilesDir();
    List<File> sofficeFiles=new ArrayList<>(fileSearch.findFileInDirs(progFiles,OpenOfficePreferences.WINDOWS_EXECUTABLE));
    if (fileSearchCancelled) {
      return false;
    }
    if (sofficeFiles.isEmpty()) {
      JOptionPane.showMessageDialog(parent,Localization.lang("Unable to autodetect OpenOffice/LibreOffice installation. Please choose the installation directory manually."),Localization.lang("Could not find OpenOffice/LibreOffice installation"),JOptionPane.INFORMATION_MESSAGE);
      JFileChooser fileChooser=new JFileChooser(new File(System.getenv("ProgramFiles")));
      fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
      fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter(){
        @Override public boolean accept(        File file){
          return file.isDirectory();
        }
        @Override public String getDescription(){
          return Localization.lang("Directories");
        }
      }
);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      fileChooser.showOpenDialog(parent);
      if (fileChooser.getSelectedFile() != null) {
        sofficeFiles.add(fileChooser.getSelectedFile());
      }
    }
    Optional<File> actualFile=checkAndSelectAmongMultipleInstalls(sofficeFiles);
    if (actualFile.isPresent()) {
      return setupPreferencesForOO(actualFile.get().getParentFile(),actualFile.get(),OpenOfficePreferences.WINDOWS_EXECUTABLE);
    }
 else {
      return false;
    }
  }
 else   if (OS.OS_X) {
    List<File> dirList=fileSearch.findOSXProgramFilesDir();
    List<File> sofficeFiles=new ArrayList<>(fileSearch.findFileInDirs(dirList,OpenOfficePreferences.OSX_EXECUTABLE));
    if (fileSearchCancelled) {
      return false;
    }
    Optional<File> actualFile=checkAndSelectAmongMultipleInstalls(sofficeFiles);
    if (actualFile.isPresent()) {
      for (      File rootdir : dirList) {
        if (actualFile.get().getPath().startsWith(rootdir.getPath())) {
          return setupPreferencesForOO(rootdir,actualFile.get(),OpenOfficePreferences.OSX_EXECUTABLE);
        }
      }
    }
    return false;
  }
 else {
    String usrRoot="/usr/lib";
    File inUsr=fileSearch.findFileInDir(new File(usrRoot),SOFFICE);
    if (fileSearchCancelled) {
      return false;
    }
    if (inUsr == null) {
      inUsr=fileSearch.findFileInDir(new File("/usr/lib64"),SOFFICE);
      if (inUsr != null) {
        usrRoot="/usr/lib64";
      }
    }
    if (fileSearchCancelled) {
      return false;
    }
    File inOpt=fileSearch.findFileInDir(new File("/opt"),SOFFICE);
    if (fileSearchCancelled) {
      return false;
    }
    if ((inUsr != null) && (inOpt == null)) {
      return setupPreferencesForOO(usrRoot,inUsr,SOFFICE);
    }
 else     if (inOpt != null) {
      if (inUsr == null) {
        return setupPreferencesForOO("/opt",inOpt,SOFFICE);
      }
 else {
        JRadioButton optRB=new JRadioButton(inOpt.getPath(),true);
        JRadioButton usrRB=new JRadioButton(inUsr.getPath(),false);
        ButtonGroup bg=new ButtonGroup();
        bg.add(optRB);
        bg.add(usrRB);
        FormBuilder b=FormBuilder.create().layout(new FormLayout("left:pref","pref, 2dlu, pref, 2dlu, pref "));
        b.add(Localization.lang("Found more than one OpenOffice/LibreOffice executable. Please choose which one to connect to:")).xy(1,1);
        b.add(optRB).xy(1,3);
        b.add(usrRB).xy(1,5);
        int answer=JOptionPane.showConfirmDialog(null,b.getPanel(),Localization.lang("Choose OpenOffice/LibreOffice executable"),JOptionPane.OK_CANCEL_OPTION);
        if (answer == JOptionPane.CANCEL_OPTION) {
          return false;
        }
        if (optRB.isSelected()) {
          return setupPreferencesForOO("/opt",inOpt,SOFFICE);
        }
 else {
          return setupPreferencesForOO(usrRoot,inUsr,SOFFICE);
        }
      }
    }
  }
  return false;
}
