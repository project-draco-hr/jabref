{
  super(parent,Localization.lang("JabRef preferences"),false);
  final JabRefPreferences prefs=JabRefPreferences.getInstance();
  frame=parent;
  final JList<String> chooser;
  JButton importPrefs=new JButton(Localization.lang("Import preferences"));
  JButton exportPrefs=new JButton(Localization.lang("Export preferences"));
  main=new JPanel();
  JPanel upper=new JPanel();
  JPanel lower=new JPanel();
  getContentPane().setLayout(new BorderLayout());
  getContentPane().add(upper,BorderLayout.CENTER);
  getContentPane().add(lower,BorderLayout.SOUTH);
  final CardLayout cardLayout=new CardLayout();
  main.setLayout(cardLayout);
  List<PrefsTab> tabs=new ArrayList<>();
  tabs.add(new GeneralTab(frame,prefs));
  tabs.add(new NetworkTab(prefs));
  tabs.add(new FileTab(frame,prefs));
  tabs.add(new FileSortTab(prefs));
  tabs.add(new EntryEditorPrefsTab(frame,prefs));
  tabs.add(new GroupsPrefsTab(prefs));
  tabs.add(new AppearancePrefsTab(prefs));
  tabs.add(new ExternalTab(frame,this,prefs,parent.helpDiag));
  tabs.add(new TablePrefsTab(prefs));
  tabs.add(new TableColumnsTab(prefs,parent));
  tabs.add(new LabelPatternPrefTab(prefs,parent.helpDiag));
  tabs.add(new PreviewPrefsTab(prefs));
  tabs.add(new NameFormatterTab(parent.helpDiag));
  tabs.add(new ImportSettingsTab());
  tabs.add(new XmpPrefsTab());
  tabs.add(new AdvancedTab(prefs,parent.helpDiag,jabRef));
  Iterator<PrefsTab> prefTabs=tabs.iterator();
  String[] names=new String[tabs.size()];
  int index=0;
  while (prefTabs.hasNext()) {
    PrefsTab tab=prefTabs.next();
    names[index]=tab.getTabName();
    index++;
    main.add((Component)tab,tab.getTabName());
  }
  upper.setBorder(BorderFactory.createEtchedBorder());
  chooser=new JList<>(names);
  chooser.setBorder(BorderFactory.createEtchedBorder());
  chooser.setPrototypeCellValue("This should be wide enough");
  chooser.setSelectedIndex(0);
  chooser.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  chooser.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      String o=chooser.getSelectedValue();
      cardLayout.show(main,o);
    }
  }
);
  JPanel one=new JPanel();
  JPanel two=new JPanel();
  one.setLayout(new BorderLayout());
  two.setLayout(new BorderLayout());
  one.add(chooser,BorderLayout.CENTER);
  one.add(importPrefs,BorderLayout.SOUTH);
  two.add(one,BorderLayout.CENTER);
  two.add(exportPrefs,BorderLayout.SOUTH);
  upper.setLayout(new BorderLayout());
  upper.add(two,BorderLayout.WEST);
  upper.add(main,BorderLayout.CENTER);
  JButton ok=new JButton(Localization.lang("Ok"));
  JButton cancel=new JButton(Localization.lang("Cancel"));
  ok.addActionListener(new OkAction());
  CancelAction cancelAction=new CancelAction();
  cancel.addActionListener(cancelAction);
  lower.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
  ButtonBarBuilder buttonBarBuilder=new ButtonBarBuilder(lower);
  buttonBarBuilder.addGlue();
  buttonBarBuilder.addButton(ok);
  buttonBarBuilder.addButton(cancel);
  buttonBarBuilder.addGlue();
  Util.bindCloseDialogKeyToCancelAction(this.getRootPane(),cancelAction);
  exportPrefs.setToolTipText(Localization.lang("Export preferences to file"));
  importPrefs.setToolTipText(Localization.lang("Import preferences from file"));
  exportPrefs.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      String filename=FileDialogs.getNewFile(frame,new File(System.getProperty("user.home")),".xml",JFileChooser.SAVE_DIALOG,false);
      if (filename == null) {
        return;
      }
      File file=new File(filename);
      if (!file.exists() || (JOptionPane.showConfirmDialog(PreferencesDialog.this,Localization.lang("'%0' exists. Overwrite file?",file.getName()),Localization.lang("Export preferences"),JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)) {
        try {
          prefs.exportPreferences(filename);
        }
 catch (        JabRefException ex) {
          LOGGER.warn(ex.getMessage(),ex);
          JOptionPane.showMessageDialog(PreferencesDialog.this,ex.getLocalizedMessage(),Localization.lang("Export preferences"),JOptionPane.ERROR_MESSAGE);
        }
      }
    }
  }
);
  importPrefs.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      String filename=FileDialogs.getNewFile(frame,new File(System.getProperty("user.home")),".xml",JFileChooser.OPEN_DIALOG,false);
      if (filename == null) {
        return;
      }
      try {
        prefs.importPreferences(filename);
        setValues();
        CustomEntryTypesManager.loadCustomEntryTypes(prefs);
        ExportFormats.initAllExports();
        frame.removeCachedEntryEditors();
        Globals.prefs.updateEntryEditorTabList();
      }
 catch (      JabRefException ex) {
        LOGGER.warn(ex.getMessage(),ex);
        JOptionPane.showMessageDialog(PreferencesDialog.this,ex.getLocalizedMessage(),Localization.lang("Import preferences"),JOptionPane.ERROR_MESSAGE);
      }
    }
  }
);
  setValues();
  pack();
}
