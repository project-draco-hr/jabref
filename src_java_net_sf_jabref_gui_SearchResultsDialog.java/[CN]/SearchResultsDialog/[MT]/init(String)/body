{
  diag=new JDialog(frame,title,false);
  int activePreview=Globals.prefs.getInt("activePreview");
  preview=new PreviewPanel(null,new MetaData(),activePreview == 0 ? Globals.prefs.get("preview0") : Globals.prefs.get("preview1"));
  sortedEntries=new SortedList<BibtexEntry>(entries,new EntryComparator(false,true,"author"));
  model=new EventTableModel<BibtexEntry>(sortedEntries,new EntryTableFormat());
  entryTable=new JTable(model);
  GeneralRenderer renderer=new GeneralRenderer(Color.white);
  entryTable.setDefaultRenderer(JLabel.class,renderer);
  entryTable.setDefaultRenderer(String.class,renderer);
  setWidths();
  TableComparatorChooser<BibtexEntry> tableSorter=new TableComparatorChooser<BibtexEntry>(entryTable,sortedEntries,TableComparatorChooser.MULTIPLE_COLUMN_KEYBOARD);
  setupComparatorChooser(tableSorter);
  JScrollPane sp=new JScrollPane(entryTable);
  final EventSelectionModel<BibtexEntry> selectionModel=new EventSelectionModel<BibtexEntry>(sortedEntries);
  entryTable.setSelectionModel(selectionModel);
  selectionModel.getSelected().addListEventListener(new EntrySelectionListener());
  entryTable.addMouseListener(new TableClickListener());
  contentPane.setTopComponent(sp);
  contentPane.setBottomComponent(preview);
  AbstractAction closeAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      diag.dispose();
    }
  }
;
  ActionMap am=contentPane.getActionMap();
  InputMap im=contentPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(Globals.prefs.getKey("Close dialog"),"close");
  am.put("close",closeAction);
  entryTable.getActionMap().put("copy",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (selectionModel.getSelected().size() > 0) {
        BibtexEntry[] bes=selectionModel.getSelected().toArray(new BibtexEntry[selectionModel.getSelected().size()]);
        TransferableBibtexEntry trbe=new TransferableBibtexEntry(bes);
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(trbe,frame.basePanel());
        frame.output(Globals.lang("Copied") + " " + (bes.length > 1 ? bes.length + " " + Globals.lang("entries") : "1 " + Globals.lang("entry") + "."));
      }
    }
  }
);
  diag.addWindowListener(new WindowAdapter(){
    public void windowOpened(    WindowEvent e){
      contentPane.setDividerLocation(0.5f);
    }
    public void windowClosing(    WindowEvent event){
      Globals.prefs.putInt("searchDialogWidth",diag.getSize().width);
      Globals.prefs.putInt("searchDialogHeight",diag.getSize().height);
    }
  }
);
  diag.getContentPane().add(contentPane,BorderLayout.CENTER);
  diag.setSize(new Dimension(Globals.prefs.getInt("searchDialogWidth"),Globals.prefs.getInt("searchDialogHeight")));
  diag.setLocationRelativeTo(frame);
}
