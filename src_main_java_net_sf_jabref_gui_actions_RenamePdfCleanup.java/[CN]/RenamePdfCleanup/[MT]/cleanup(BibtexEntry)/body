{
  String oldValue=entry.getField(Globals.FILE_FIELD);
  if (oldValue == null) {
    return new ArrayList<>();
  }
  FileListTableModel flModel=new FileListTableModel();
  flModel.setContent(oldValue);
  if (flModel.getRowCount() == 0) {
    return new ArrayList<>();
  }
  boolean changed=false;
  for (int i=0; i < flModel.getRowCount(); i++) {
    String realOldFilename=flModel.getEntry(i).getLink();
    if (onlyRelativePaths && (new File(realOldFilename).isAbsolute())) {
      continue;
    }
    String newFilename=Util.getLinkedFileName(database,entry);
    newFilename=newFilename + "." + flModel.getEntry(i).getType().getExtension();
    File expandedOldFile=FileUtil.expandFilename(realOldFilename,paths);
    if (expandedOldFile.getParent() == null) {
      continue;
    }
    String newPath=expandedOldFile.getParent().concat(System.getProperty("file.separator")).concat(newFilename);
    if (new File(newPath).exists()) {
      continue;
    }
    boolean renameSuccessful=FileUtil.renameFile(expandedOldFile.toString(),newPath);
    if (renameSuccessful) {
      changed=true;
      String description=flModel.getEntry(i).getDescription();
      ExternalFileType type=flModel.getEntry(i).getType();
      flModel.removeEntry(i);
      File parent=(new File(realOldFilename)).getParentFile();
      String newFileEntryFileName;
      if (parent == null) {
        newFileEntryFileName=newFilename;
      }
 else {
        newFileEntryFileName=parent.toString().concat(System.getProperty("file.separator")).concat(newFilename);
      }
      flModel.addEntry(i,new FileListEntry(description,newFileEntryFileName,type));
    }
 else {
      unsuccessfulRenames++;
    }
  }
  if (changed) {
    String newValue=flModel.getStringRepresentation();
    assert(!oldValue.equals(newValue));
    entry.setField(Globals.FILE_FIELD,newValue);
    FieldChange change=new FieldChange(entry,Globals.FILE_FIELD,oldValue,newValue);
    return Arrays.asList(new FieldChange[]{change});
  }
  return new ArrayList<>();
}
