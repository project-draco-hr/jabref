{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST expressionSearch_AST=null;
  if ((LA(1) == STRING) && (_tokenSet_2.member(LA(2))) && (LA(3) == STRING)) {
    quotedRegularExpression(false,true);
    astFactory.addASTChild(currentAST,returnAST);
    compareType();
    astFactory.addASTChild(currentAST,returnAST);
    quotedRegularExpression(caseSensitive,regex);
    astFactory.addASTChild(currentAST,returnAST);
    if (inputState.guessing == 0) {
      expressionSearch_AST=currentAST.root;
      expressionSearch_AST=astFactory.make((new ASTArray(2)).add(astFactory.create(ExpressionSearch)).add(expressionSearch_AST));
      currentAST.root=expressionSearch_AST;
      currentAST.child=expressionSearch_AST != null && expressionSearch_AST.getFirstChild() != null ? expressionSearch_AST.getFirstChild() : expressionSearch_AST;
      currentAST.advanceChildToEnd();
    }
    expressionSearch_AST=currentAST.root;
  }
 else   if ((LA(1) == FIELDTYPE) && (_tokenSet_2.member(LA(2))) && (LA(3) == STRING)) {
    simpleRegularExpression(false,true);
    astFactory.addASTChild(currentAST,returnAST);
    compareType();
    astFactory.addASTChild(currentAST,returnAST);
    quotedRegularExpression(caseSensitive,regex);
    astFactory.addASTChild(currentAST,returnAST);
    if (inputState.guessing == 0) {
      expressionSearch_AST=currentAST.root;
      expressionSearch_AST=astFactory.make((new ASTArray(2)).add(astFactory.create(ExpressionSearch)).add(expressionSearch_AST));
      currentAST.root=expressionSearch_AST;
      currentAST.child=expressionSearch_AST != null && expressionSearch_AST.getFirstChild() != null ? expressionSearch_AST.getFirstChild() : expressionSearch_AST;
      currentAST.advanceChildToEnd();
    }
    expressionSearch_AST=currentAST.root;
  }
 else   if ((LA(1) == FIELDTYPE) && (_tokenSet_2.member(LA(2))) && (LA(3) == FIELDTYPE)) {
    simpleRegularExpression(false,true);
    astFactory.addASTChild(currentAST,returnAST);
    compareType();
    astFactory.addASTChild(currentAST,returnAST);
    simpleRegularExpression(caseSensitive,regex);
    astFactory.addASTChild(currentAST,returnAST);
    if (inputState.guessing == 0) {
      expressionSearch_AST=currentAST.root;
      expressionSearch_AST=astFactory.make((new ASTArray(2)).add(astFactory.create(ExpressionSearch)).add(expressionSearch_AST));
      currentAST.root=expressionSearch_AST;
      currentAST.child=expressionSearch_AST != null && expressionSearch_AST.getFirstChild() != null ? expressionSearch_AST.getFirstChild() : expressionSearch_AST;
      currentAST.advanceChildToEnd();
    }
    expressionSearch_AST=currentAST.root;
  }
 else   if ((LA(1) == STRING) && (_tokenSet_2.member(LA(2))) && (LA(3) == FIELDTYPE)) {
    quotedRegularExpression(false,true);
    astFactory.addASTChild(currentAST,returnAST);
    compareType();
    astFactory.addASTChild(currentAST,returnAST);
    simpleRegularExpression(caseSensitive,regex);
    astFactory.addASTChild(currentAST,returnAST);
    if (inputState.guessing == 0) {
      expressionSearch_AST=currentAST.root;
      expressionSearch_AST=astFactory.make((new ASTArray(2)).add(astFactory.create(ExpressionSearch)).add(expressionSearch_AST));
      currentAST.root=expressionSearch_AST;
      currentAST.child=expressionSearch_AST != null && expressionSearch_AST.getFirstChild() != null ? expressionSearch_AST.getFirstChild() : expressionSearch_AST;
      currentAST.advanceChildToEnd();
    }
    expressionSearch_AST=currentAST.root;
  }
 else {
    throw new NoViableAltException(LT(1),getFilename());
  }
  returnAST=expressionSearch_AST;
}
