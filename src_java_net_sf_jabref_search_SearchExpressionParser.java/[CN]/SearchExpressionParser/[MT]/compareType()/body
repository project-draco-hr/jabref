{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST compareType_AST=null;
switch (LA(1)) {
case LITERAL_contains:
{
      AST tmp10_AST=null;
      if (inputState.guessing == 0) {
        tmp10_AST=(AST)astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp10_AST);
      }
      match(LITERAL_contains);
      compareType_AST=(AST)currentAST.root;
      break;
    }
case LITERAL_matches:
{
    AST tmp11_AST=null;
    if (inputState.guessing == 0) {
      tmp11_AST=(AST)astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp11_AST);
    }
    match(LITERAL_matches);
    compareType_AST=(AST)currentAST.root;
    break;
  }
case EQUAL:
{
  AST tmp12_AST=null;
  if (inputState.guessing == 0) {
    tmp12_AST=(AST)astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp12_AST);
  }
  match(EQUAL);
  compareType_AST=(AST)currentAST.root;
  break;
}
case EEQUAL:
{
AST tmp13_AST=null;
if (inputState.guessing == 0) {
  tmp13_AST=(AST)astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp13_AST);
}
match(EEQUAL);
compareType_AST=(AST)currentAST.root;
break;
}
case NEQUAL:
{
AST tmp14_AST=null;
if (inputState.guessing == 0) {
tmp14_AST=(AST)astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp14_AST);
}
match(NEQUAL);
compareType_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=compareType_AST;
}
