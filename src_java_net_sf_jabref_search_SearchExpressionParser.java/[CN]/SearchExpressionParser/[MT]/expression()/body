{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST expression_AST=null;
switch (LA(1)) {
case STRING:
case FIELDTYPE:
{
      expressionSearch();
      astFactory.addASTChild(currentAST,returnAST);
      expression_AST=currentAST.root;
      break;
    }
case LPAREN:
{
    match(LPAREN);
    condition();
    astFactory.addASTChild(currentAST,returnAST);
    match(RPAREN);
    expression_AST=currentAST.root;
    break;
  }
default :
if ((LA(1) == LITERAL_not) && (LA(2) == STRING || LA(2) == FIELDTYPE)) {
  match(LITERAL_not);
  expressionSearch();
  astFactory.addASTChild(currentAST,returnAST);
  if (inputState.guessing == 0) {
    expression_AST=currentAST.root;
    expression_AST=astFactory.make((new ASTArray(2)).add(astFactory.create(Not)).add(expression_AST));
    currentAST.root=expression_AST;
    currentAST.child=expression_AST != null && expression_AST.getFirstChild() != null ? expression_AST.getFirstChild() : expression_AST;
    currentAST.advanceChildToEnd();
  }
  expression_AST=currentAST.root;
}
 else if ((LA(1) == LITERAL_not) && (LA(2) == LPAREN)) {
  match(LITERAL_not);
  match(LPAREN);
  condition();
  astFactory.addASTChild(currentAST,returnAST);
  match(RPAREN);
  if (inputState.guessing == 0) {
    expression_AST=currentAST.root;
    expression_AST=astFactory.make((new ASTArray(2)).add(astFactory.create(Not)).add(expression_AST));
    currentAST.root=expression_AST;
    currentAST.child=expression_AST != null && expression_AST.getFirstChild() != null ? expression_AST.getFirstChild() : expression_AST;
    currentAST.advanceChildToEnd();
  }
  expression_AST=currentAST.root;
}
 else {
  throw new NoViableAltException(LT(1),getFilename());
}
}
returnAST=expression_AST;
}
