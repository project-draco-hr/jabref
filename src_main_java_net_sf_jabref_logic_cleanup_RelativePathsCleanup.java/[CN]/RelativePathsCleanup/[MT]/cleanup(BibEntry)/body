{
  Optional<String> oldValue=entry.getFieldOptional(Globals.FILE_FIELD);
  if (!oldValue.isPresent()) {
    return new ArrayList<>();
  }
  List<FileField.ParsedFileField> fileList=FileField.parse(oldValue.get());
  List<FileField.ParsedFileField> newFileList=new ArrayList<>();
  boolean changed=false;
  for (  FileField.ParsedFileField flEntry : fileList) {
    String oldFileName=flEntry.link;
    String newFileName=FileUtil.shortenFileName(new File(oldFileName),paths).toString();
    FileField.ParsedFileField newFlEntry=flEntry;
    if (!oldFileName.equals(newFileName)) {
      newFlEntry=new FileField.ParsedFileField(flEntry.description,newFileName,flEntry.fileType);
      changed=true;
    }
    newFileList.add(newFlEntry);
  }
  if (changed) {
    String newValue=FileField.getStringRepresentation(newFileList);
    assert(!oldValue.get().equals(newValue));
    entry.setField(Globals.FILE_FIELD,newValue);
    FieldChange change=new FieldChange(entry,Globals.FILE_FIELD,oldValue.get(),newValue);
    return Collections.singletonList(change);
  }
  return new ArrayList<>();
}
