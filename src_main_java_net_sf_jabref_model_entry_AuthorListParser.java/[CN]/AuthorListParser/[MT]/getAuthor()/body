{
  List<Object> tokens=new ArrayList<>();
  int vonStart=-1;
  int lastStart=-1;
  int commaFirst=-1;
  int commaSecond=-1;
  boolean continueLoop=true;
  while (continueLoop) {
    int token=getToken();
switch (token) {
case TOKEN_EOF:
case TOKEN_AND:
      continueLoop=false;
    break;
case TOKEN_COMMA:
  if (commaFirst < 0) {
    commaFirst=tokens.size();
  }
 else   if (commaSecond < 0) {
    commaSecond=tokens.size();
  }
break;
case TOKEN_WORD:
tokens.add(original.substring(tokenStart,tokenEnd));
tokens.add(original.substring(tokenStart,tokenAbbr));
tokens.add(tokenTerm);
tokens.add(tokenCase);
if (commaFirst >= 0) {
break;
}
if (lastStart >= 0) {
break;
}
if (vonStart < 0) {
if (!tokenCase) {
int previousTermToken=tokens.size() - TOKEN_GROUP_LENGTH - TOKEN_GROUP_LENGTH + OFFSET_TOKEN_TERM;
if (previousTermToken >= 0 && tokens.get(previousTermToken).equals('-')) {
break;
}
vonStart=tokens.size() - TOKEN_GROUP_LENGTH;
break;
}
}
 else if ((lastStart < 0) && tokenCase) {
lastStart=tokens.size() - TOKEN_GROUP_LENGTH;
break;
}
break;
default :
break;
}
}
if (tokens.isEmpty()) {
return null;
}
int firstPartStart=-1;
int vonPartStart=-1;
int lastPartStart=-1;
int jrPartStart=-1;
int firstPartEnd;
int vonPartEnd=0;
int lastPartEnd=0;
int jrPartEnd=0;
if (commaFirst < 0) {
if (vonStart < 0) {
lastPartEnd=tokens.size();
lastPartStart=tokens.size() - TOKEN_GROUP_LENGTH;
int index=(tokens.size() - (2 * TOKEN_GROUP_LENGTH)) + OFFSET_TOKEN_TERM;
if (index > 0) {
Character ch=(Character)tokens.get(index);
if (ch == '-') {
lastPartStart-=TOKEN_GROUP_LENGTH;
}
}
firstPartEnd=lastPartStart;
if (firstPartEnd > 0) {
firstPartStart=0;
}
}
 else {
if (lastStart >= 0) {
lastPartEnd=tokens.size();
lastPartStart=lastStart;
vonPartEnd=lastPartStart;
}
 else {
vonPartEnd=tokens.size();
}
vonPartStart=vonStart;
firstPartEnd=vonPartStart;
if (firstPartEnd > 0) {
firstPartStart=0;
}
}
}
 else {
firstPartEnd=tokens.size();
if (commaSecond < 0) {
if (commaFirst < firstPartEnd) {
firstPartStart=commaFirst;
}
}
 else {
if (commaSecond < firstPartEnd) {
firstPartStart=commaSecond;
}
jrPartEnd=commaSecond;
if (commaFirst < jrPartEnd) {
jrPartStart=commaFirst;
}
}
if (vonStart == 0) {
if (lastStart < 0) {
vonPartEnd=commaFirst;
}
 else {
lastPartEnd=commaFirst;
lastPartStart=lastStart;
vonPartEnd=lastPartStart;
}
vonPartStart=0;
}
 else {
lastPartEnd=commaFirst;
if (lastPartEnd > 0) {
lastPartStart=0;
}
}
}
if ((firstPartStart == -1) && (lastPartStart == -1) && (vonPartStart != -1)) {
lastPartStart=vonPartStart;
lastPartEnd=vonPartEnd;
vonPartStart=-1;
vonPartEnd=-1;
}
String firstPart=firstPartStart < 0 ? null : concatTokens(tokens,firstPartStart,firstPartEnd,OFFSET_TOKEN,false);
String firstAbbr=firstPartStart < 0 ? null : concatTokens(tokens,firstPartStart,firstPartEnd,OFFSET_TOKEN_ABBR,true);
String vonPart=vonPartStart < 0 ? null : concatTokens(tokens,vonPartStart,vonPartEnd,OFFSET_TOKEN,false);
String lastPart=lastPartStart < 0 ? null : concatTokens(tokens,lastPartStart,lastPartEnd,OFFSET_TOKEN,false);
String jrPart=jrPartStart < 0 ? null : concatTokens(tokens,jrPartStart,jrPartEnd,OFFSET_TOKEN,false);
if (firstPart != null && lastPart != null && lastPart.equals(lastPart.toUpperCase()) && lastPart.length() < 5) {
return new Author(lastPart,lastPart,vonPart,firstPart,jrPart);
}
 else {
return new Author(firstPart,firstAbbr,vonPart,lastPart,jrPart);
}
}
