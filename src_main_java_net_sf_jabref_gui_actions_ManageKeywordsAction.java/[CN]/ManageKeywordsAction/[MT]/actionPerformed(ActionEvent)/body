{
  BasePanel bp=frame.getCurrentBasePanel();
  if (bp == null) {
    return;
  }
  if (bp.getSelectedEntries().isEmpty()) {
    bp.output(Localization.lang("Select at least one entry to manage keywords."));
    return;
  }
  if (diag == null) {
    createDialog();
  }
  cancelled=true;
  fillKeyWordList();
  diag.pack();
  PositionWindow.placeDialog(diag,frame);
  diag.setVisible(true);
  if (cancelled) {
    return;
  }
  Set<String> keywordsToAdd=new HashSet<>();
  Set<String> userSelectedKeywords=new HashSet<>();
  for (Enumeration<String> keywords=keywordListModel.elements(); keywords.hasMoreElements(); ) {
    String kword=keywords.nextElement();
    userSelectedKeywords.add(kword);
    if (!sortedKeywordsOfAllEntriesBeforeUpdateByUser.contains(kword)) {
      keywordsToAdd.add(kword);
    }
  }
  Set<String> keywordsToRemove=new HashSet<>();
  for (  String kword : sortedKeywordsOfAllEntriesBeforeUpdateByUser) {
    if (!userSelectedKeywords.contains(kword)) {
      keywordsToRemove.add(kword);
    }
  }
  if (keywordsToAdd.isEmpty() && keywordsToRemove.isEmpty()) {
    return;
  }
  if (SpecialFieldsUtils.keywordSyncEnabled() && !keywordsToAdd.isEmpty()) {
    Set<String> clone;
    clone=createClone(keywordsToAdd);
    clone.retainAll(Priority.getInstance().getKeyWords());
    if (!clone.isEmpty()) {
      keywordsToRemove.addAll(Priority.getInstance().getKeyWords());
    }
    clone=createClone(keywordsToAdd);
    clone.retainAll(Quality.getInstance().getKeyWords());
    if (!clone.isEmpty()) {
      keywordsToRemove.addAll(Quality.getInstance().getKeyWords());
    }
    clone=createClone(keywordsToAdd);
    clone.retainAll(Rank.getInstance().getKeyWords());
    if (!clone.isEmpty()) {
      keywordsToRemove.addAll(Rank.getInstance().getKeyWords());
    }
    clone=createClone(keywordsToAdd);
    clone.retainAll(Relevance.getInstance().getKeyWords());
    if (!clone.isEmpty()) {
      keywordsToRemove.addAll(Relevance.getInstance().getKeyWords());
    }
    clone=createClone(keywordsToAdd);
    clone.retainAll(ReadStatus.getInstance().getKeyWords());
    if (!clone.isEmpty()) {
      keywordsToRemove.addAll(ReadStatus.getInstance().getKeyWords());
    }
    clone=createClone(keywordsToAdd);
    clone.retainAll(Printed.getInstance().getKeyWords());
    if (!clone.isEmpty()) {
      keywordsToRemove.addAll(Printed.getInstance().getKeyWords());
    }
  }
  List<BibEntry> entries=bp.getSelectedEntries();
  NamedCompound ce=new NamedCompound(Localization.lang("Update keywords"));
  for (  BibEntry entry : entries) {
    List<String> separatedKeywords=entry.getSeparatedKeywords();
    Set<String> keywords=new TreeSet<>();
    keywords.addAll(separatedKeywords);
    keywords.removeAll(keywordsToRemove);
    keywords.addAll(keywordsToAdd);
    separatedKeywords.clear();
    separatedKeywords.addAll(keywords);
    String oldValue=entry.getField("keywords");
    entry.putKeywords(separatedKeywords);
    String updatedValue=entry.getField("keywords");
    if ((oldValue == null) || !oldValue.equals(updatedValue)) {
      ce.addEdit(new UndoableFieldChange(entry,"keywords",oldValue,updatedValue));
    }
    if (SpecialFieldsUtils.keywordSyncEnabled()) {
      SpecialFieldsUtils.syncSpecialFieldsFromKeywords(entry,ce);
    }
  }
  ce.end();
  bp.undoManager.addEdit(ce);
  bp.markBaseChanged();
}
