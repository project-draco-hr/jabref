{
class ImportAction extends MnemonicAwareAction {
    private final JabRefFrame frame;
    private final boolean openInNew;
    public ImportAction(    JabRefFrame frame,    boolean openInNew){
      this.frame=frame;
      this.openInNew=openInNew;
      putValue(Action.NAME,openInNew ? "Import into new database" : "Import into current database");
      putValue(Action.ACCELERATOR_KEY,openInNew ? Globals.prefs.getKey("Import into new database") : Globals.prefs.getKey("Import into current database"));
    }
    @Override public void actionPerformed(    ActionEvent e){
      JFileChooser fc=ImportFormats.createImportFileChooser(Globals.prefs.get("importWorkingDirectory"));
      fc.showOpenDialog(frame);
      File file=fc.getSelectedFile();
      if (file == null) {
        return;
      }
      FileFilter ff=fc.getFileFilter();
      ImportFormat format=null;
      if (ff instanceof ImportFileFilter) {
        format=((ImportFileFilter)ff).getImportFormat();
      }
      try {
        if (!file.exists()) {
          JOptionPane.showMessageDialog(frame,Globals.lang("File not found") + ": '" + file.getName()+ "'.",Globals.lang("Import"),JOptionPane.ERROR_MESSAGE);
          return;
        }
        ImportMenuItem imi=new ImportMenuItem(frame,openInNew,format);
        imi.automatedImport(new String[]{file.getAbsolutePath()});
        if (format != null) {
          Globals.prefs.put("lastUsedImport",format.getFormatName());
        }
 else {
          Globals.prefs.put("lastUsedImport","__all");
        }
        Globals.prefs.put("importWorkingDirectory",file.getParent());
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
  return new ImportAction(frame,openInNew);
}
