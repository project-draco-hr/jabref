{
  if (!goOn) {
    panel.output(Globals.lang("No entries selected."));
    return;
  }
  panel.frame().setProgressBarValue(0);
  panel.frame().setProgressBarVisible(true);
  int weightAutoSet=10;
  int progressBarMax=(autoSet ? weightAutoSet * sel.length : 0) + (checkExisting ? sel.length : 0);
  panel.frame().setProgressBarMaximum(progressBarMax);
  int progress=0;
  brokenLinks=0;
  final NamedCompound ce=new NamedCompound(Globals.lang("Autoset %0 field",fieldName));
  String dir=panel.metaData().getFileDirectory(GUIGlobals.FILE_FIELD);
  Set<BibtexEntry> changedEntries=new HashSet<BibtexEntry>();
  if (autoSet) {
    Collection<BibtexEntry> entries=new ArrayList<BibtexEntry>();
    for (int i=0; i < sel.length; i++) {
      entries.add(sel[i]);
    }
    ArrayList<File> dirs=new ArrayList<File>();
    String dr=panel.metaData().getFileDirectory(GUIGlobals.FILE_FIELD);
    if (dr != null)     dirs.add(new File(dr));
    Thread t=FileListEditor.autoSetLinks(entries,ce,changedEntries,dirs);
    try {
      t.join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  progress+=sel.length * weightAutoSet;
  panel.frame().setProgressBarValue(progress);
  if (checkExisting) {
    mainLoop:     for (int i=0; i < sel.length; i++) {
      panel.frame().setProgressBarValue(progress++);
      final String old=sel[i].getField(fieldName);
      if ((old != null) && !old.equals("")) {
        FileListTableModel tableModel=new FileListTableModel();
        tableModel.setContentDontGuessTypes(old);
        for (int j=0; j < tableModel.getRowCount(); j++) {
          FileListEntry flEntry=tableModel.getEntry(j);
          boolean httpLink=flEntry.getLink().toLowerCase().startsWith("http");
          if (httpLink)           continue;
          boolean deleted=false;
          File file=Util.expandFilename(flEntry.getLink(),new String[]{dir,"."});
          if ((file == null) || !file.exists()) {
            int answer=JOptionPane.showOptionDialog(panel.frame(),Globals.lang("<HTML>Could not find file '%0'<BR>linked from entry '%1'</HTML>",new String[]{flEntry.getLink(),sel[i].getCiteKey()}),Globals.lang("Broken link"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,brokenLinkOptions,brokenLinkOptions[0]);
switch (answer) {
case 1:
              FileListEntryEditor flEditor=new FileListEntryEditor(panel.frame(),flEntry,false,true,panel.metaData());
            flEditor.setVisible(true);
          break;
case 2:
        tableModel.removeEntry(j);
      deleted=true;
    j--;
  break;
case 3:
break mainLoop;
}
brokenLinks++;
}
if (!deleted && (flEntry.getType() instanceof UnknownExternalFileType)) {
String[] options=new String[]{Globals.lang("Define '%0'",flEntry.getType().getName()),Globals.lang("Change file type"),Globals.lang("Cancel")};
String defOption=options[0];
int answer=JOptionPane.showOptionDialog(panel.frame(),Globals.lang("One or more file links are of the type '%0', which is undefined. What do you want to do?",flEntry.getType().getName()),Globals.lang("Undefined file type"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,defOption);
if (answer == JOptionPane.CANCEL_OPTION) {
}
 else if (answer == JOptionPane.YES_OPTION) {
ExternalFileType newType=new ExternalFileType(flEntry.getType().getName(),"","","new");
ExternalFileTypeEntryEditor editor=new ExternalFileTypeEntryEditor(panel.frame(),newType);
editor.setVisible(true);
if (editor.okPressed()) {
java.util.List<ExternalFileType> fileTypes=new ArrayList<ExternalFileType>();
ExternalFileType[] oldTypes=Globals.prefs.getExternalFileTypeSelection();
for (int k=0; k < oldTypes.length; k++) {
  fileTypes.add(oldTypes[k]);
}
fileTypes.add(newType);
Collections.sort(fileTypes);
Globals.prefs.setExternalFileTypes(fileTypes);
panel.mainTable.repaint();
}
}
 else {
FileListEntryEditor editor=new FileListEntryEditor(panel.frame(),flEntry,false,true,panel.metaData());
editor.setVisible(true);
}
}
}
if (!tableModel.getStringRepresentation().equals(old)) {
String toSet=tableModel.getStringRepresentation();
if (toSet.length() == 0) toSet=null;
ce.addEdit(new UndoableFieldChange(sel[i],fieldName,old,toSet));
sel[i].setField(fieldName,toSet);
changedEntries.add(sel[i]);
}
}
}
}
entriesChangedCount=changedEntries.size();
if (entriesChangedCount > 0) {
ce.end();
panel.undoManager.addEdit(ce);
}
}
