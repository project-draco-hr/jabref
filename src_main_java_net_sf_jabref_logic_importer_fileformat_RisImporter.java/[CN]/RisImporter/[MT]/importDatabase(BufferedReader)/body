{
  List<BibEntry> bibitems=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  String line;
  while ((line=reader.readLine()) != null) {
    sb.append(line);
    sb.append('\n');
  }
  String[] entries=sb.toString().replace("\u2013","-").replace("\u2014","--").replace("\u2015","--").split("ER  -.*\\n");
  for (  String entry1 : entries) {
    String type="";
    String author="";
    String editor="";
    String startPage="";
    String endPage="";
    String comment="";
    Map<String,String> hm=new HashMap<>();
    String[] fields=entry1.split("\n");
    for (int j=0; j < fields.length; j++) {
      StringBuilder current=new StringBuilder(fields[j]);
      boolean done=false;
      while (!done && (j < (fields.length - 1))) {
        if ((fields[j + 1].length() >= 6) && !"  - ".equals(fields[j + 1].substring(2,6))) {
          if ((current.length() > 0) && !Character.isWhitespace(current.charAt(current.length() - 1)) && !Character.isWhitespace(fields[j + 1].charAt(0))) {
            current.append(' ');
          }
          current.append(fields[j + 1]);
          j++;
        }
 else {
          done=true;
        }
      }
      String entry=current.toString();
      if (entry.length() < 6) {
        continue;
      }
 else {
        String lab=entry.substring(0,2);
        String val=entry.substring(6).trim();
        if ("TY".equals(lab)) {
          if ("BOOK".equals(val)) {
            type="book";
          }
 else           if ("JOUR".equals(val) || "MGZN".equals(val)) {
            type="article";
          }
 else           if ("THES".equals(val)) {
            type="phdthesis";
          }
 else           if ("UNPB".equals(val)) {
            type="unpublished";
          }
 else           if ("RPRT".equals(val)) {
            type="techreport";
          }
 else           if ("CONF".equals(val)) {
            type="inproceedings";
          }
 else           if ("CHAP".equals(val)) {
            type="incollection";
          }
 else {
            type="other";
          }
        }
 else         if ("T1".equals(lab) || "TI".equals(lab)) {
          String oldVal=hm.get(FieldName.TITLE);
          if (oldVal == null) {
            hm.put(FieldName.TITLE,val);
          }
 else {
            if (oldVal.endsWith(":") || oldVal.endsWith(".") || oldVal.endsWith("?")) {
              hm.put(FieldName.TITLE,oldVal + " " + val);
            }
 else {
              hm.put(FieldName.TITLE,oldVal + ": " + val);
            }
          }
          hm.put(FieldName.TITLE,hm.get(FieldName.TITLE).replaceAll("\\s+"," "));
        }
 else         if ("T2".equals(lab) || "BT".equals(lab)) {
          hm.put(FieldName.BOOKTITLE,val);
        }
 else         if ("T3".equals(lab)) {
          hm.put(FieldName.SERIES,val);
        }
 else         if ("AU".equals(lab) || "A1".equals(lab)) {
          if ("".equals(author)) {
            author=val;
          }
 else {
            author+=" and " + val;
          }
        }
 else         if ("A2".equals(lab)) {
          if ("".equals(editor)) {
            editor=val;
          }
 else {
            editor+=" and " + val;
          }
        }
 else         if ("JA".equals(lab) || "JF".equals(lab) || "JO".equals(lab)) {
          if ("inproceedings".equals(type)) {
            hm.put(FieldName.BOOKTITLE,val);
          }
 else {
            hm.put(FieldName.JOURNAL,val);
          }
        }
 else         if ("SP".equals(lab)) {
          startPage=val;
        }
 else         if ("PB".equals(lab)) {
          if ("phdthesis".equals(type)) {
            hm.put(FieldName.SCHOOL,val);
          }
 else {
            hm.put(FieldName.PUBLISHER,val);
          }
        }
 else         if ("AD".equals(lab) || "CY".equals(lab)) {
          hm.put(FieldName.ADDRESS,val);
        }
 else         if ("EP".equals(lab)) {
          endPage=val;
          if (!endPage.isEmpty()) {
            endPage="--" + endPage;
          }
        }
 else         if ("SN".equals(lab)) {
          hm.put(FieldName.ISSN,val);
        }
 else         if ("VL".equals(lab)) {
          hm.put(FieldName.VOLUME,val);
        }
 else         if ("IS".equals(lab)) {
          hm.put(FieldName.NUMBER,val);
        }
 else         if ("N2".equals(lab) || "AB".equals(lab)) {
          String oldAb=hm.get(FieldName.ABSTRACT);
          if (oldAb == null) {
            hm.put(FieldName.ABSTRACT,val);
          }
 else {
            hm.put(FieldName.ABSTRACT,oldAb + OS.NEWLINE + val);
          }
        }
 else         if ("UR".equals(lab)) {
          hm.put(FieldName.URL,val);
        }
 else         if (("Y1".equals(lab) || "PY".equals(lab)) && (val.length() >= 4)) {
          String[] parts=val.split("/");
          hm.put(FieldName.YEAR,parts[0]);
          if ((parts.length > 1) && !parts[1].isEmpty()) {
            try {
              int monthNumber=Integer.parseInt(parts[1]);
              MonthUtil.Month month=MonthUtil.getMonthByNumber(monthNumber);
              if (month.isValid()) {
                hm.put(FieldName.MONTH,month.bibtexFormat);
              }
            }
 catch (            NumberFormatException ex) {
            }
          }
        }
 else         if ("KW".equals(lab)) {
          if (hm.containsKey(FieldName.KEYWORDS)) {
            String kw=hm.get(FieldName.KEYWORDS);
            hm.put(FieldName.KEYWORDS,kw + ", " + val);
          }
 else {
            hm.put(FieldName.KEYWORDS,val);
          }
        }
 else         if ("U1".equals(lab) || "U2".equals(lab) || "N1".equals(lab)) {
          if (!comment.isEmpty()) {
            comment=comment + " ";
          }
          comment=comment + val;
        }
 else         if ("ID".equals(lab)) {
          hm.put("refid",val);
        }
 else         if ("M3".equals(lab)) {
          String doi=val;
          if (doi.startsWith("doi:")) {
            doi=doi.replaceAll("(?i)doi:","").trim();
            hm.put(FieldName.DOI,doi);
          }
        }
      }
      if (!author.isEmpty()) {
        author=AuthorList.fixAuthorLastNameFirst(author);
        hm.put(FieldName.AUTHOR,author);
      }
      if (!editor.isEmpty()) {
        editor=AuthorList.fixAuthorLastNameFirst(editor);
        hm.put(FieldName.EDITOR,editor);
      }
      if (!comment.isEmpty()) {
        hm.put("comment",comment);
      }
      hm.put(FieldName.PAGES,startPage + endPage);
    }
    BibEntry b=new BibEntry(DEFAULT_BIBTEXENTRY_ID,type);
    List<String> toRemove=new ArrayList<>();
    for (    Map.Entry<String,String> key : hm.entrySet()) {
      String content=key.getValue();
      if ((content == null) || content.trim().isEmpty()) {
        toRemove.add(key.getKey());
      }
    }
    for (    String aToRemove : toRemove) {
      hm.remove(aToRemove);
    }
    b.setField(hm);
    bibitems.add(b);
  }
  return new ParserResult(bibitems);
}
