{
  try {
    if (isWebServiceAvailable() == false) {
      if (isInternetAvailable()) {
        return WebServiceStatus.WEBSERVICE_DOWN;
      }
 else {
        return WebServiceStatus.NO_INTERNET;
      }
    }
    if (isWebServiceOutDated()) {
      return WebServiceStatus.OUTDATED;
    }
    if (isMetaDataServiceAvailable() == false) {
      return WebServiceStatus.UNAVAILABLE;
    }
    FileInputStream fin=new FileInputStream(file);
    byte[] data=new byte[(int)file.length()];
    fin.read(data);
    FormDataMultiPart formDataMultiPart=new FormDataMultiPart();
    formDataMultiPart.field("file",data,MediaType.APPLICATION_OCTET_STREAM_TYPE);
    formDataMultiPart.field("source","jabref",MediaType.TEXT_PLAIN_TYPE);
    formDataMultiPart.field("filename",file.getName(),MediaType.TEXT_PLAIN_TYPE);
    ClientResponse response=WEBRESOURCE.path("documents").type(MediaType.MULTIPART_FORM_DATA_TYPE).post(ClientResponse.class,formDataMultiPart);
    if (response.getClientResponseStatus() == ClientResponse.Status.OK && response.hasEntity()) {
      String entity=response.getEntity(String.class);
      byte[] bytes=new byte[0];
      try {
        bytes=entity.getBytes("UTF-8");
      }
 catch (      UnsupportedEncodingException e) {
        return null;
      }
      InputStream is=new ByteArrayInputStream(bytes);
      if (is != null) {
        ObjectCreatorMapper resourceMapper=new ObjectCreatorMapper();
        ObjectCreator stringCreator=new DefaultStringCreator();
        resourceMapper.addCreator("documents",new DocumentsBeanCreator());
        resourceMapper.addCreator("authors",new AuthorsBeanCreator());
        resourceMapper.addCreator("document",new DocumentBeanCreator());
        resourceMapper.addCreator("title",new TitleBeanCreator());
        resourceMapper.addCreator("year",new YearBeanCreator());
        resourceMapper.addCreator("author",new AuthorBeanCreator());
        resourceMapper.addCreator("name_first",stringCreator);
        resourceMapper.addCreator("name_middle",stringCreator);
        resourceMapper.addCreator("name_last",stringCreator);
        resourceMapper.addCreator("name_last_prefix",stringCreator);
        resourceMapper.addCreator("name_last_suffix",stringCreator);
        XmlResourceReader<?> reader=new XmlResourceReader(resourceMapper);
        Document docs=(Document)reader.parse(is);
        for (        Bean author : docs.getAuthors().getCollection()) {
          Author temp=(Author)author;
          System.out.println(((SimpleTypeElementBean)temp.getName_Last()).getValue() + " " + temp.getRank());
        }
        SplWebClient.metadata=docs;
        return WebServiceStatus.OK;
      }
 else {
        return WebServiceStatus.NO_METADATA;
      }
    }
    if (response.getClientResponseStatus() == ClientResponse.Status.SERVICE_UNAVAILABLE) {
      return WebServiceStatus.UNAVAILABLE;
    }
  }
 catch (  Exception e) {
    System.out.println(Tools.getStackTraceAsString(e));
  }
  return WebServiceStatus.NO_METADATA;
}
