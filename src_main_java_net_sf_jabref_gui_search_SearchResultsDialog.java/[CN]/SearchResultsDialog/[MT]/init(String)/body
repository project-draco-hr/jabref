{
  diag=new JDialog(frame,title,false);
  int activePreview=Globals.prefs.getInt(JabRefPreferences.ACTIVE_PREVIEW);
  preview=new PreviewPanel(null,new MetaData(),activePreview == 0 ? Globals.prefs.get(JabRefPreferences.PREVIEW_0) : Globals.prefs.get(JabRefPreferences.PREVIEW_1));
  sortedEntries=new SortedList<>(entries,new EntryComparator(false,true,"author"));
  model=new EventTableModel<>(sortedEntries,new EntryTableFormat());
  entryTable=new JTable(model);
  GeneralRenderer renderer=new GeneralRenderer(Color.white);
  entryTable.setDefaultRenderer(JLabel.class,renderer);
  entryTable.setDefaultRenderer(String.class,renderer);
  setWidths();
  TableComparatorChooser<BibtexEntry> tableSorter=TableComparatorChooser.install(entryTable,sortedEntries,AbstractTableComparatorChooser.MULTIPLE_COLUMN_KEYBOARD);
  setupComparatorChooser(tableSorter);
  JScrollPane sp=new JScrollPane(entryTable);
  final EventSelectionModel<BibtexEntry> selectionModel=new EventSelectionModel<>(sortedEntries);
  entryTable.setSelectionModel(selectionModel);
  selectionModel.getSelected().addListEventListener(new EntrySelectionListener());
  entryTable.addMouseListener(new TableClickListener());
  contentPane.setTopComponent(sp);
  contentPane.setBottomComponent(preview);
  AbstractAction closeAction=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      diag.dispose();
    }
  }
;
  ActionMap am=contentPane.getActionMap();
  InputMap im=contentPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(Globals.prefs.getKey(KeyBinds.CLOSE_DIALOG),"close");
  am.put("close",closeAction);
  entryTable.getActionMap().put("copy",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      if (!selectionModel.getSelected().isEmpty()) {
        BibtexEntry[] bes=selectionModel.getSelected().toArray(new BibtexEntry[selectionModel.getSelected().size()]);
        TransferableBibtexEntry trbe=new TransferableBibtexEntry(bes);
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(trbe,frame.getCurrentBasePanel());
        frame.output(Localization.lang("Copied") + ' ' + (bes.length > 1 ? bes.length + " " + Localization.lang("entries") : "1 " + Localization.lang("entry") + '.'));
      }
    }
  }
);
  diag.addWindowListener(new WindowAdapter(){
    @Override public void windowOpened(    WindowEvent e){
      contentPane.setDividerLocation(0.5f);
    }
    @Override public void windowClosing(    WindowEvent event){
      Globals.prefs.putInt(JabRefPreferences.SEARCH_DIALOG_WIDTH,diag.getSize().width);
      Globals.prefs.putInt(JabRefPreferences.SEARCH_DIALOG_HEIGHT,diag.getSize().height);
    }
  }
);
  diag.getContentPane().add(contentPane,BorderLayout.CENTER);
  diag.setSize(new Dimension(Globals.prefs.getInt(JabRefPreferences.SEARCH_DIALOG_WIDTH),Globals.prefs.getInt(JabRefPreferences.SEARCH_DIALOG_HEIGHT)));
  diag.setLocationRelativeTo(frame);
}
