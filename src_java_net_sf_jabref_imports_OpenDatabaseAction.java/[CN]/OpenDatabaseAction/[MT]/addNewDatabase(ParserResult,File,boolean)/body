{
  String fileName=file.getPath();
  BibtexDatabase db=pr.getDatabase();
  HashMap meta=pr.getMetaData();
  if (pr.hasWarnings()) {
    final String[] wrns=pr.warnings();
    (new Thread(){
      public void run(){
        StringBuffer wrn=new StringBuffer();
        for (int i=0; i < wrns.length; i++)         wrn.append(i + 1).append(". ").append(wrns[i]).append("\n");
        if (wrn.length() > 0)         wrn.deleteCharAt(wrn.length() - 1);
        JOptionPane.showMessageDialog(frame,wrn.toString(),Globals.lang("Warnings"),JOptionPane.WARNING_MESSAGE);
      }
    }
).start();
  }
  BasePanel bp=new BasePanel(frame,db,file,meta,pr.getEncoding());
  SwingUtilities.invokeLater(new OpenItSwingHelper(bp,file,raisePanel));
  for (Iterator i=pr.getEntryTypes().keySet().iterator(); i.hasNext(); ) {
    String typeName=((String)i.next()).toLowerCase();
    if (BibtexEntryType.ALL_TYPES.get(typeName) != null)     i.remove();
  }
  if (pr.getEntryTypes().size() > 0) {
    StringBuffer sb=new StringBuffer(Globals.lang("Custom entry types found in file") + ": ");
    Object[] types=pr.getEntryTypes().keySet().toArray();
    Arrays.sort(types);
    for (int i=0; i < types.length; i++) {
      sb.append(types[i].toString()).append(", ");
    }
    String s=sb.toString();
    int answer=JOptionPane.showConfirmDialog(frame,s.substring(0,s.length() - 2) + ".\n" + Globals.lang("Remember these entry types?"),Globals.lang("Custom entry types"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
    if (answer == JOptionPane.YES_OPTION) {
      HashMap et=pr.getEntryTypes();
      for (Iterator i=et.keySet().iterator(); i.hasNext(); ) {
        BibtexEntryType typ=(BibtexEntryType)et.get(i.next());
        BibtexEntryType.ALL_TYPES.put(typ.getName().toLowerCase(),typ);
      }
    }
  }
  frame.output(Globals.lang("Opened database") + " '" + fileName+ "' "+ Globals.lang("with")+ " "+ db.getEntryCount()+ " "+ Globals.lang("entries")+ ".");
}
