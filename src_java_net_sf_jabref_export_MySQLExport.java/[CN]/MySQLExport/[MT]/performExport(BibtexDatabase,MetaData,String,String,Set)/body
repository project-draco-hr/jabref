{
  TreeMap<String,BibtexEntryType> ALL_TYPES=BibtexEntryType.ALL_TYPES;
  ArrayList<String> fields=new ArrayList();
  Set mappings=ALL_TYPES.entrySet();
  for (Iterator iter=mappings.iterator(); iter.hasNext(); ) {
    Map.Entry me=(Map.Entry)iter.next();
    BibtexEntryType val=(BibtexEntryType)me.getValue();
    fields=processFields(fields,val.getRequiredFields());
    fields=processFields(fields,val.getOptionalFields());
    fields=processFields(fields,val.getGeneralFields());
    fields=processFields(fields,val.getUtilityFields());
  }
  File outfile=new File(file);
  if (outfile.exists())   outfile.delete();
  PrintStream fout=new PrintStream(outfile);
  String sql1=sql_fieldColumns(fields,"\tVARCHAR(3)\t\tDEFAULT NULL");
  String sql2=sql_fieldColumns(fields,"\tTEXT\t\tDEFAULT NULL");
  String sql=sql_createTables(sql1,sql2);
  fout.println(sql);
  String fieldstr="";
  for (int i=0; i < fields.size(); i++) {
    if (i > 0)     fieldstr=fieldstr + ", ";
    fieldstr=fieldstr + fields.get(i);
  }
  List<BibtexEntry> entries=FileActions.getSortedEntries(database,keySet,false);
  sql_popTabET(mappings,fields,fieldstr,fout);
  sql_popTabFD(entries,fields,fieldstr,fout);
  fout.close();
}
