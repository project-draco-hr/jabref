{
  if (stream == null) {
    throw new IOException("No stream given.");
  }
  ArrayList<BibtexEntry> bibitems=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  BufferedReader in=new BufferedReader(ImportFormatReader.getReaderDefaultEncoding(stream));
  String str;
  while ((str=in.readLine()) != null) {
    if (str.length() < 3) {
      continue;
    }
    if (str.substring(0,3).equals("PT ")) {
      sb.append("::").append(str);
    }
 else {
      String beg=str.substring(0,3).trim();
      if (beg.length() == 2) {
        sb.append(" ## ");
        sb.append(str);
      }
 else {
        sb.append("EOLEOL");
        sb.append(str.trim());
      }
    }
  }
  String[] entries=sb.toString().split("::");
  HashMap<String,String> hm=new HashMap<>();
  for (  String entry : entries) {
    String[] fields=entry.split(" ## ");
    if (fields.length == 0) {
      fields=entry.split("\n");
    }
    String Type="";
    String PT="";
    String pages="";
    hm.clear();
    for (    String field : fields) {
      if (field.length() <= 2) {
        continue;
      }
      String beg=field.substring(0,2);
      String value=field.substring(3);
      if (value.startsWith(" - ")) {
        value=value.substring(3);
      }
      value=value.trim();
switch (beg) {
case "PT":
        if (value.startsWith("J")) {
          PT="article";
        }
 else {
          PT=value;
        }
      Type="article";
    break;
case "TY":
  if ("JOUR".equals(value)) {
    Type="article";
  }
 else   if ("CONF".equals(value)) {
    Type="inproceedings";
  }
break;
case "JO":
hm.put("booktitle",value);
break;
case "AU":
String author=IsiImporter.isiAuthorsConvert(value.replaceAll("EOLEOL"," and "));
if (hm.get("author") != null) {
author=hm.get("author") + " and " + author;
}
hm.put("author",author);
break;
case "TI":
hm.put("title",value.replaceAll("EOLEOL"," "));
break;
case "SO":
case "JA":
hm.put("journal",value.replaceAll("EOLEOL"," "));
break;
case "ID":
case "KW":
value=value.replaceAll("EOLEOL"," ");
String existingKeywords=hm.get("keywords");
if (existingKeywords != null && !existingKeywords.contains(value)) {
existingKeywords+=", " + value;
}
 else {
existingKeywords=value;
}
hm.put("keywords",existingKeywords);
break;
case "AB":
hm.put("abstract",value.replaceAll("EOLEOL"," "));
break;
case "BP":
case "BR":
case "SP":
pages=value;
break;
case "EP":
int detpos=value.indexOf(' ');
if (detpos != -1 && !value.substring(0,detpos).trim().isEmpty()) {
value=value.substring(0,detpos);
}
pages=pages + "--" + value;
break;
case "PS":
pages=IsiImporter.parsePages(value);
break;
case "AR":
pages=value;
break;
case "IS":
hm.put("number",value);
break;
case "PY":
hm.put("year",value);
break;
case "VL":
hm.put("volume",value);
break;
case "PU":
hm.put("publisher",value);
break;
case "DI":
hm.put("doi",value);
break;
case "PD":
String month=IsiImporter.parseMonth(value);
if (month != null) {
hm.put("month",month);
}
break;
case "DT":
Type=value;
if (Type.equals("Review")) {
Type="article";
}
 else if (Type.startsWith("Article") || Type.startsWith("Journal") || PT.equals("article")) {
Type="article";
}
 else {
Type="misc";
}
break;
case "CR":
hm.put("CitedReferences",value.replaceAll("EOLEOL"," ; ").trim());
break;
default :
if (beg.equals("ER") || beg.equals("EF") || beg.equals("VR")|| beg.equals("FN")) {
continue;
}
hm.put(beg,value);
break;
}
}
if (!"".equals(pages)) {
hm.put("pages",pages);
}
if (hm.isEmpty()) {
continue;
}
BibtexEntry b=new BibtexEntry(BibtexFields.DEFAULT_BIBTEXENTRY_ID,Globals.getEntryType(Type));
ArrayList<Object> toRemove=new ArrayList<>();
for (String key : hm.keySet()) {
String content=hm.get(key);
if (content == null || content.trim().isEmpty()) {
toRemove.add(key);
}
}
for (Object aToRemove : toRemove) {
hm.remove(aToRemove);
}
IsiImporter.processSubSup(hm);
IsiImporter.processCapitalization(hm);
b.setField(hm);
bibitems.add(b);
}
return bibitems;
}
