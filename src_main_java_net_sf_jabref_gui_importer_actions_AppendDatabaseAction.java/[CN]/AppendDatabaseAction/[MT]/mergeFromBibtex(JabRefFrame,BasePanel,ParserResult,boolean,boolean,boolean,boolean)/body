{
  BibDatabase fromDatabase=pr.getDatabase();
  List<BibEntry> appendedEntries=new ArrayList<>();
  List<BibEntry> originalEntries=new ArrayList<>();
  BibDatabase database=panel.getDatabase();
  NamedCompound ce=new NamedCompound(Localization.lang("Append database"));
  MetaData meta=pr.getMetaData();
  if (importEntries) {
    boolean overwriteOwner=Globals.prefs.getBoolean(JabRefPreferences.OVERWRITE_OWNER);
    boolean overwriteTimeStamp=Globals.prefs.getBoolean(JabRefPreferences.OVERWRITE_TIME_STAMP);
    for (    BibEntry originalEntry : fromDatabase.getEntries()) {
      BibEntry be=(BibEntry)originalEntry.clone();
      be.setId(IdGenerator.next());
      UpdateField.setAutomaticFields(be,overwriteOwner,overwriteTimeStamp,Globals.prefs.getUpdateFieldPreferences());
      database.insertEntry(be);
      appendedEntries.add(be);
      originalEntries.add(originalEntry);
      ce.addEdit(new UndoableInsertEntry(database,be,panel));
    }
  }
  if (importStrings) {
    for (    BibtexString bs : fromDatabase.getStringValues()) {
      if (!database.hasStringLabel(bs.getName())) {
        database.addString(bs);
        ce.addEdit(new UndoableInsertString(panel,database,bs));
      }
    }
  }
  if (importGroups) {
    GroupTreeNode newGroups=meta.getGroups();
    if (newGroups != null) {
      if (newGroups.getGroup() instanceof AllEntriesGroup) {
        try {
          ExplicitGroup group=new ExplicitGroup("Imported",GroupHierarchyType.INDEPENDENT,Globals.prefs);
          newGroups.setGroup(group);
          group.add(appendedEntries);
        }
 catch (        ParseException e) {
          LOGGER.error(e);
        }
      }
      frame.getGroupSelector().addGroups(newGroups,ce);
    }
  }
  if (importSelectorWords) {
    for (    String s : meta) {
      if (s.startsWith(MetaData.SELECTOR_META_PREFIX)) {
        panel.getBibDatabaseContext().getMetaData().putData(s,meta.getData(s));
      }
    }
  }
  ce.end();
  panel.getUndoManager().addEdit(ce);
  panel.markBaseChanged();
}
