{
  int nTmp=onTmp.getStringCount();
  int nDisk=onDisk.getStringCount();
  if ((nTmp == 0) && (nDisk == 0)) {
    return;
  }
  HashSet<Object> used=new HashSet<>();
  HashSet<Object> usedInMem=new HashSet<>();
  HashSet<String> notMatched=new HashSet<>(onTmp.getStringCount());
  mainLoop:   for (  String key : onTmp.getStringKeySet()) {
    BibtexString tmp=onTmp.getString(key);
    for (    String diskId : onDisk.getStringKeySet()) {
      if (!used.contains(diskId)) {
        BibtexString disk=onDisk.getString(diskId);
        if (disk.getName().equals(tmp.getName())) {
          if ((tmp.getContent() != null) && !tmp.getContent().equals(disk.getContent())) {
            Optional<BibtexString> mem=findString(inMem1,tmp.getName(),usedInMem);
            if (mem.isPresent()) {
              changes.add(new StringChange(mem.get(),tmp,tmp.getName(),mem.get().getContent(),disk.getContent()));
            }
 else {
              changes.add(new StringChange(null,tmp,tmp.getName(),null,disk.getContent()));
            }
          }
          used.add(diskId);
          continue mainLoop;
        }
      }
    }
    notMatched.add(tmp.getId());
  }
  if (!notMatched.isEmpty()) {
    for (Iterator<String> i=notMatched.iterator(); i.hasNext(); ) {
      BibtexString tmp=onTmp.getString(i.next());
      for (      String diskId : onDisk.getStringKeySet()) {
        if (!used.contains(diskId)) {
          BibtexString disk=onDisk.getString(diskId);
          if (disk.getContent().equals(tmp.getContent())) {
            BibtexString bsMem=null;
            for (            String memId : inMem1.getStringKeySet()) {
              BibtexString bsMem_cand=inMem1.getString(memId);
              if (bsMem_cand.getContent().equals(disk.getContent()) && !usedInMem.contains(memId)) {
                usedInMem.add(memId);
                bsMem=bsMem_cand;
                break;
              }
            }
            changes.add(new StringNameChange(bsMem,tmp,bsMem.getName(),tmp.getName(),disk.getName(),tmp.getContent()));
            i.remove();
            used.add(diskId);
          }
        }
      }
    }
  }
  if (!notMatched.isEmpty()) {
    for (    String nmId : notMatched) {
      BibtexString tmp=onTmp.getString(nmId);
      Optional<BibtexString> mem=findString(inMem1,tmp.getName(),usedInMem);
      if (mem.isPresent()) {
        changes.add(new StringRemoveChange(tmp,tmp,mem.get()));
      }
    }
  }
  for (  String diskId : onDisk.getStringKeySet()) {
    if (!used.contains(diskId)) {
      BibtexString disk=onDisk.getString(diskId);
      used.add(diskId);
      changes.add(new StringAddChange(disk));
    }
  }
}
