{
  function_return retval=new function_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal42=null;
  Token char_literal43=null;
  Token char_literal44=null;
  Token char_literal45=null;
  Token char_literal46=null;
  Token string_literal47=null;
  Token char_literal48=null;
  identifier_return identifier49=null;
  Object char_literal42_tree=null;
  Object char_literal43_tree=null;
  Object char_literal44_tree=null;
  Object char_literal45_tree=null;
  Object char_literal46_tree=null;
  Object string_literal47_tree=null;
  Object char_literal48_tree=null;
  try {
    int alt5=8;
switch (input.LA(1)) {
case 27:
      alt5=1;
    break;
case 28:
  alt5=2;
break;
case 29:
alt5=3;
break;
case 30:
alt5=4;
break;
case 31:
alt5=5;
break;
case 32:
alt5=6;
break;
case 33:
alt5=7;
break;
case IDENTIFIER:
alt5=8;
break;
default :
NoViableAltException nvae=new NoViableAltException("40:1: function : ( '<' | '>' | '=' | '+' | '-' | ':=' | '*' | identifier );",5,0,input);
throw nvae;
}
switch (alt5) {
case 1:
{
root_0=adaptor.nil();
char_literal42=input.LT(1);
match(input,27,FOLLOW_27_in_function254);
char_literal42_tree=adaptor.create(char_literal42);
adaptor.addChild(root_0,char_literal42_tree);
}
break;
case 2:
{
root_0=adaptor.nil();
char_literal43=input.LT(1);
match(input,28,FOLLOW_28_in_function258);
char_literal43_tree=adaptor.create(char_literal43);
adaptor.addChild(root_0,char_literal43_tree);
}
break;
case 3:
{
root_0=adaptor.nil();
char_literal44=input.LT(1);
match(input,29,FOLLOW_29_in_function262);
char_literal44_tree=adaptor.create(char_literal44);
adaptor.addChild(root_0,char_literal44_tree);
}
break;
case 4:
{
root_0=adaptor.nil();
char_literal45=input.LT(1);
match(input,30,FOLLOW_30_in_function266);
char_literal45_tree=adaptor.create(char_literal45);
adaptor.addChild(root_0,char_literal45_tree);
}
break;
case 5:
{
root_0=adaptor.nil();
char_literal46=input.LT(1);
match(input,31,FOLLOW_31_in_function270);
char_literal46_tree=adaptor.create(char_literal46);
adaptor.addChild(root_0,char_literal46_tree);
}
break;
case 6:
{
root_0=adaptor.nil();
string_literal47=input.LT(1);
match(input,32,FOLLOW_32_in_function274);
string_literal47_tree=adaptor.create(string_literal47);
adaptor.addChild(root_0,string_literal47_tree);
}
break;
case 7:
{
root_0=adaptor.nil();
char_literal48=input.LT(1);
match(input,33,FOLLOW_33_in_function278);
char_literal48_tree=adaptor.create(char_literal48);
adaptor.addChild(root_0,char_literal48_tree);
}
break;
case 8:
{
root_0=adaptor.nil();
pushFollow(FOLLOW_identifier_in_function282);
identifier49=identifier();
_fsp--;
adaptor.addChild(root_0,identifier49.tree);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
retval.stop=input.LT(-1);
retval.tree=adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
return retval;
}
