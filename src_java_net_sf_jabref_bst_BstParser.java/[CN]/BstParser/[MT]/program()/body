{
  BstParser.program_return retval=new BstParser.program_return();
  retval.start=input.LT(1);
  Object root_0=null;
  BstParser.commands_return commands1=null;
  RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
  try {
{
      int cnt1=0;
      loop1:       do {
        int alt1=2;
        int LA1_0=input.LA(1);
        if (((LA1_0 >= ENTRY && LA1_0 <= FUNCTION) || (LA1_0 >= INTEGERS && LA1_0 <= ITERATE) || LA1_0 == MACRO || (LA1_0 >= READ && LA1_0 <= SORT) || LA1_0 == STRINGS)) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            pushFollow(FOLLOW_commands_in_program62);
            commands1=commands();
            state._fsp--;
            stream_commands.add(commands1.getTree());
          }
        break;
default :
      if (cnt1 >= 1)       break loop1;
    EarlyExitException eee=new EarlyExitException(1,input);
  throw eee;
}
cnt1++;
}
 while (true);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(COMMANDS,"COMMANDS"),root_1);
if (!(stream_commands.hasNext())) {
  throw new RewriteEarlyExitException();
}
while (stream_commands.hasNext()) {
  adaptor.addChild(root_1,stream_commands.nextTree());
}
stream_commands.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
