{
  commands_return retval=new commands_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token STRINGS2=null;
  Token INTEGERS4=null;
  Token FUNCTION6=null;
  Token MACRO9=null;
  Token char_literal11=null;
  Token STRING12=null;
  Token char_literal13=null;
  Token READ14=null;
  Token EXECUTE15=null;
  Token char_literal16=null;
  Token char_literal18=null;
  Token ITERATE19=null;
  Token char_literal20=null;
  Token char_literal22=null;
  Token REVERSE23=null;
  Token char_literal24=null;
  Token char_literal26=null;
  Token ENTRY27=null;
  Token SORT31=null;
  idList_return idList3=null;
  idList_return idList5=null;
  id_return id7=null;
  stack_return stack8=null;
  id_return id10=null;
  function_return function17=null;
  function_return function21=null;
  function_return function25=null;
  idList0_return idList028=null;
  idList0_return idList029=null;
  idList0_return idList030=null;
  Object STRINGS2_tree=null;
  Object INTEGERS4_tree=null;
  Object FUNCTION6_tree=null;
  Object MACRO9_tree=null;
  Object char_literal11_tree=null;
  Object STRING12_tree=null;
  Object char_literal13_tree=null;
  Object READ14_tree=null;
  Object EXECUTE15_tree=null;
  Object char_literal16_tree=null;
  Object char_literal18_tree=null;
  Object ITERATE19_tree=null;
  Object char_literal20_tree=null;
  Object char_literal22_tree=null;
  Object REVERSE23_tree=null;
  Object char_literal24_tree=null;
  Object char_literal26_tree=null;
  Object ENTRY27_tree=null;
  Object SORT31_tree=null;
  try {
    int alt2=10;
switch (input.LA(1)) {
case STRINGS:
      alt2=1;
    break;
case INTEGERS:
  alt2=2;
break;
case FUNCTION:
alt2=3;
break;
case MACRO:
alt2=4;
break;
case READ:
alt2=5;
break;
case EXECUTE:
alt2=6;
break;
case ITERATE:
alt2=7;
break;
case REVERSE:
alt2=8;
break;
case ENTRY:
alt2=9;
break;
case SORT:
alt2=10;
break;
default :
NoViableAltException nvae=new NoViableAltException("16:1: commands : ( STRINGS^^ idList | INTEGERS^^ idList | FUNCTION^^ id stack | MACRO^^ id '{'! STRING '}'! | READ^^ | EXECUTE^^ '{'! function '}'! | ITERATE^^ '{'! function '}'! | REVERSE^^ '{'! function '}'! | ENTRY^^ idList0 idList0 idList0 | SORT^^ );",2,0,input);
throw nvae;
}
switch (alt2) {
case 1:
{
root_0=adaptor.nil();
STRINGS2=input.LT(1);
match(input,STRINGS,FOLLOW_STRINGS_in_commands65);
STRINGS2_tree=adaptor.create(STRINGS2);
root_0=adaptor.becomeRoot(STRINGS2_tree,root_0);
pushFollow(FOLLOW_idList_in_commands68);
idList3=idList();
_fsp--;
adaptor.addChild(root_0,idList3.tree);
}
break;
case 2:
{
root_0=adaptor.nil();
INTEGERS4=input.LT(1);
match(input,INTEGERS,FOLLOW_INTEGERS_in_commands73);
INTEGERS4_tree=adaptor.create(INTEGERS4);
root_0=adaptor.becomeRoot(INTEGERS4_tree,root_0);
pushFollow(FOLLOW_idList_in_commands76);
idList5=idList();
_fsp--;
adaptor.addChild(root_0,idList5.tree);
}
break;
case 3:
{
root_0=adaptor.nil();
FUNCTION6=input.LT(1);
match(input,FUNCTION,FOLLOW_FUNCTION_in_commands81);
FUNCTION6_tree=adaptor.create(FUNCTION6);
root_0=adaptor.becomeRoot(FUNCTION6_tree,root_0);
pushFollow(FOLLOW_id_in_commands84);
id7=id();
_fsp--;
adaptor.addChild(root_0,id7.tree);
pushFollow(FOLLOW_stack_in_commands86);
stack8=stack();
_fsp--;
adaptor.addChild(root_0,stack8.tree);
}
break;
case 4:
{
root_0=adaptor.nil();
MACRO9=input.LT(1);
match(input,MACRO,FOLLOW_MACRO_in_commands91);
MACRO9_tree=adaptor.create(MACRO9);
root_0=adaptor.becomeRoot(MACRO9_tree,root_0);
pushFollow(FOLLOW_id_in_commands94);
id10=id();
_fsp--;
adaptor.addChild(root_0,id10.tree);
char_literal11=input.LT(1);
match(input,25,FOLLOW_25_in_commands96);
STRING12=input.LT(1);
match(input,STRING,FOLLOW_STRING_in_commands99);
STRING12_tree=adaptor.create(STRING12);
adaptor.addChild(root_0,STRING12_tree);
char_literal13=input.LT(1);
match(input,26,FOLLOW_26_in_commands101);
}
break;
case 5:
{
root_0=adaptor.nil();
READ14=input.LT(1);
match(input,READ,FOLLOW_READ_in_commands107);
READ14_tree=adaptor.create(READ14);
root_0=adaptor.becomeRoot(READ14_tree,root_0);
}
break;
case 6:
{
root_0=adaptor.nil();
EXECUTE15=input.LT(1);
match(input,EXECUTE,FOLLOW_EXECUTE_in_commands113);
EXECUTE15_tree=adaptor.create(EXECUTE15);
root_0=adaptor.becomeRoot(EXECUTE15_tree,root_0);
char_literal16=input.LT(1);
match(input,25,FOLLOW_25_in_commands116);
pushFollow(FOLLOW_function_in_commands119);
function17=function();
_fsp--;
adaptor.addChild(root_0,function17.tree);
char_literal18=input.LT(1);
match(input,26,FOLLOW_26_in_commands121);
}
break;
case 7:
{
root_0=adaptor.nil();
ITERATE19=input.LT(1);
match(input,ITERATE,FOLLOW_ITERATE_in_commands127);
ITERATE19_tree=adaptor.create(ITERATE19);
root_0=adaptor.becomeRoot(ITERATE19_tree,root_0);
char_literal20=input.LT(1);
match(input,25,FOLLOW_25_in_commands130);
pushFollow(FOLLOW_function_in_commands133);
function21=function();
_fsp--;
adaptor.addChild(root_0,function21.tree);
char_literal22=input.LT(1);
match(input,26,FOLLOW_26_in_commands135);
}
break;
case 8:
{
root_0=adaptor.nil();
REVERSE23=input.LT(1);
match(input,REVERSE,FOLLOW_REVERSE_in_commands141);
REVERSE23_tree=adaptor.create(REVERSE23);
root_0=adaptor.becomeRoot(REVERSE23_tree,root_0);
char_literal24=input.LT(1);
match(input,25,FOLLOW_25_in_commands144);
pushFollow(FOLLOW_function_in_commands147);
function25=function();
_fsp--;
adaptor.addChild(root_0,function25.tree);
char_literal26=input.LT(1);
match(input,26,FOLLOW_26_in_commands149);
}
break;
case 9:
{
root_0=adaptor.nil();
ENTRY27=input.LT(1);
match(input,ENTRY,FOLLOW_ENTRY_in_commands155);
ENTRY27_tree=adaptor.create(ENTRY27);
root_0=adaptor.becomeRoot(ENTRY27_tree,root_0);
pushFollow(FOLLOW_idList0_in_commands158);
idList028=idList0();
_fsp--;
adaptor.addChild(root_0,idList028.tree);
pushFollow(FOLLOW_idList0_in_commands160);
idList029=idList0();
_fsp--;
adaptor.addChild(root_0,idList029.tree);
pushFollow(FOLLOW_idList0_in_commands162);
idList030=idList0();
_fsp--;
adaptor.addChild(root_0,idList030.tree);
}
break;
case 10:
{
root_0=adaptor.nil();
SORT31=input.LT(1);
match(input,SORT,FOLLOW_SORT_in_commands167);
SORT31_tree=adaptor.create(SORT31);
root_0=adaptor.becomeRoot(SORT31_tree,root_0);
}
break;
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
retval.stop=input.LT(-1);
retval.tree=adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
return retval;
}
