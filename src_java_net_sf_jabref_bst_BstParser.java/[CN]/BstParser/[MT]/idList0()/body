{
  BstParser.idList0_return retval=new BstParser.idList0_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal39=null;
  Token char_literal41=null;
  BstParser.identifier_return identifier40=null;
  Object char_literal39_tree=null;
  Object char_literal41_tree=null;
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleTokenStream stream_33=new RewriteRuleTokenStream(adaptor,"token 33");
  RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
  try {
{
      char_literal39=(Token)match(input,32,FOLLOW_32_in_idList0247);
      stream_32.add(char_literal39);
      loop4:       do {
        int alt4=2;
        int LA4_0=input.LA(1);
        if ((LA4_0 == IDENTIFIER)) {
          alt4=1;
        }
switch (alt4) {
case 1:
{
            pushFollow(FOLLOW_identifier_in_idList0249);
            identifier40=identifier();
            state._fsp--;
            stream_identifier.add(identifier40.getTree());
          }
        break;
default :
      break loop4;
  }
}
 while (true);
char_literal41=(Token)match(input,33,FOLLOW_33_in_idList0252);
stream_33.add(char_literal41);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
    Object root_1=(Object)adaptor.nil();
    root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(IDLIST,"IDLIST"),root_1);
    while (stream_identifier.hasNext()) {
      adaptor.addChild(root_1,stream_identifier.nextTree());
    }
    stream_identifier.reset();
    adaptor.addChild(root_0,root_1);
  }
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
