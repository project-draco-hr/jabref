{
  BstParser.idList_return retval=new BstParser.idList_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal36=null;
  Token char_literal38=null;
  BstParser.identifier_return identifier37=null;
  Object char_literal36_tree=null;
  Object char_literal38_tree=null;
  RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
  RewriteRuleTokenStream stream_33=new RewriteRuleTokenStream(adaptor,"token 33");
  RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
  try {
{
      char_literal36=(Token)match(input,32,FOLLOW_32_in_idList222);
      stream_32.add(char_literal36);
      int cnt3=0;
      loop3:       do {
        int alt3=2;
        int LA3_0=input.LA(1);
        if ((LA3_0 == IDENTIFIER)) {
          alt3=1;
        }
switch (alt3) {
case 1:
{
            pushFollow(FOLLOW_identifier_in_idList224);
            identifier37=identifier();
            state._fsp--;
            stream_identifier.add(identifier37.getTree());
          }
        break;
default :
      if (cnt3 >= 1)       break loop3;
    EarlyExitException eee=new EarlyExitException(3,input);
  throw eee;
}
cnt3++;
}
 while (true);
char_literal38=(Token)match(input,33,FOLLOW_33_in_idList227);
stream_33.add(char_literal38);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.tree : null);
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot((Object)adaptor.create(IDLIST,"IDLIST"),root_1);
if (!(stream_identifier.hasNext())) {
  throw new RewriteEarlyExitException();
}
while (stream_identifier.hasNext()) {
  adaptor.addChild(root_1,stream_identifier.nextTree());
}
stream_identifier.reset();
adaptor.addChild(root_0,root_1);
}
}
retval.tree=root_0;
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
