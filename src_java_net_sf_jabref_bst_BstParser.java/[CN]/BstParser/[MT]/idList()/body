{
  idList_return retval=new idList_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token char_literal36=null;
  Token char_literal38=null;
  identifier_return identifier37=null;
  List list_identifier=new ArrayList();
  List list_26=new ArrayList();
  List list_25=new ArrayList();
  Object char_literal36_tree=null;
  Object char_literal38_tree=null;
  try {
{
      char_literal36=(Token)input.LT(1);
      match(input,25,FOLLOW_25_in_idList205);
      list_25.add(char_literal36);
      int cnt3=0;
      loop3:       do {
        int alt3=2;
        int LA3_0=input.LA(1);
        if ((LA3_0 == IDENTIFIER)) {
          alt3=1;
        }
switch (alt3) {
case 1:
{
            pushFollow(FOLLOW_identifier_in_idList207);
            identifier37=identifier();
            _fsp--;
            list_identifier.add(identifier37.tree);
          }
        break;
default :
      if (cnt3 >= 1)       break loop3;
    EarlyExitException eee=new EarlyExitException(3,input);
  throw eee;
}
cnt3++;
}
 while (true);
char_literal38=(Token)input.LT(1);
match(input,26,FOLLOW_26_in_idList210);
list_26.add(char_literal38);
int i_0=0;
retval.tree=root_0;
root_0=(Object)adaptor.nil();
{
{
Object root_1=(Object)adaptor.nil();
root_1=(Object)adaptor.becomeRoot(adaptor.create(IDLIST,"IDLIST"),root_1);
{
  int n_1=list_identifier == null ? 0 : list_identifier.size();
  if (n_1 == 0)   throw new RuntimeException("Must have more than one element for (...)+ loops");
  for (int i_1=0; i_1 < n_1; i_1++) {
    adaptor.addChild(root_1,list_identifier.get(i_1));
  }
}
adaptor.addChild(root_0,root_1);
}
}
}
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
}
 finally {
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
return retval;
}
