{
  String name=raw;
  this.name=name;
  if (name.equals("bibtex:entry")) {
    String articleID=null;
    for (int i=0; i < atts.getLength(); i++) {
      if (atts.getQName(i).equals("bibtex:id") || atts.getQName(i).equals("id")) {
        articleID=atts.getValue(i);
      }
    }
    b=new BibtexEntry(Util.createNeutralId());
    b.setField(BibtexFields.KEY_FIELD,articleID);
  }
 else   if (name.equals("bibtex:article") || name.equals("bibtex:inbook") || name.equals("bibtex:book")|| name.equals("bibtex:booklet")|| name.equals("bibtex:incollection")|| name.equals("bibtex:inproceedings")|| name.equals("bibtex:proceedings")|| name.equals("bibtex:manual")|| name.equals("bibtex:mastersthesis")|| name.equals("bibtex:phdthesis")|| name.equals("bibtex:techreport")|| name.equals("bibtex:unpublished")|| name.equals("bibtex:misc")|| name.equals("bibtex:other")) {
    BibtexEntryType tp=BibtexEntryType.getType(local);
    b.setType(tp);
  }
  currentChars="";
}
