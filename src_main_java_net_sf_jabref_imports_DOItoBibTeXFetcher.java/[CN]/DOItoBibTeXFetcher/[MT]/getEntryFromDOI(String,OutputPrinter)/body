{
  String q;
  try {
    q=URLEncoder.encode(doi,"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    return null;
  }
  String urlString=String.format(DOItoBibTeXFetcher.URL_PATTERN,q);
  URL url;
  try {
    url=new URL(urlString);
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
    return null;
  }
  URLConnection conn;
  try {
    conn=url.openConnection();
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
  conn.setRequestProperty("Accept","application/x-bibtex");
  String bibtexString;
  try {
    bibtexString=Util.getResultsWithEncoding(conn,"UTF8");
  }
 catch (  FileNotFoundException e) {
    if (status != null) {
      status.showMessage(Globals.lang("Unknown DOI: '%0'.",doi),Globals.lang("Get BibTeX entry from DOI"),JOptionPane.INFORMATION_MESSAGE);
    }
    return null;
  }
catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
  bibtexString=bibtexString.replaceAll("(pages=\\{[0-9]+)\u2013([0-9]+\\})","$1--$2");
  BibtexEntry entry=BibtexParser.singleFromString(bibtexString);
  if (entry != null) {
    String title=entry.getField("title");
    if (title != null) {
      if (Globals.prefs.getBoolean(JabRefPreferences.USE_UNIT_FORMATTER_ON_SEARCH)) {
        title=unitFormatter.format(title);
      }
      if (Globals.prefs.getBoolean(JabRefPreferences.USE_CASE_KEEPER_ON_SEARCH)) {
        title=caseKeeper.format(title);
      }
      entry.setField("title",title);
    }
  }
  return entry;
}
