{
  super();
  Optional<String> key=tmpEntry.getCiteKeyOptional();
  if (key.isPresent()) {
    name=Localization.lang("Modified entry") + ": '" + key.get()+ '\'';
  }
 else {
    name=Localization.lang("Modified entry");
  }
  boolean isModifiedLocally=(DuplicateCheck.compareEntriesStrictly(memEntry,tmpEntry) <= 1);
  boolean modificationsAgree=(DuplicateCheck.compareEntriesStrictly(memEntry,diskEntry) > 1);
  LOGGER.debug("Modified entry: " + memEntry.getCiteKeyOptional().orElse("<no BibTeX key set>") + "\n Modified locally: "+ isModifiedLocally+ " Modifications agree: "+ modificationsAgree);
  Set<String> allFields=new TreeSet<>();
  allFields.addAll(memEntry.getFieldNames());
  allFields.addAll(tmpEntry.getFieldNames());
  allFields.addAll(diskEntry.getFieldNames());
  for (  String field : allFields) {
    Optional<String> mem=memEntry.getField(field);
    Optional<String> tmp=tmpEntry.getField(field);
    Optional<String> disk=diskEntry.getField(field);
    if ((tmp.isPresent()) && (disk.isPresent())) {
      if (!tmp.equals(disk)) {
        add(new FieldChange(field,memEntry,tmpEntry,mem.orElse(null),tmp.get(),disk.get()));
      }
    }
 else     if (((!tmp.isPresent()) && (disk.isPresent()) && !disk.get().isEmpty()) || ((!disk.isPresent()) && (tmp.isPresent()) && !tmp.get().isEmpty()&& (mem.isPresent())&& !mem.get().isEmpty())) {
      add(new FieldChange(field,memEntry,tmpEntry,mem.orElse(null),tmp.orElse(null),disk.orElse(null)));
    }
  }
}
