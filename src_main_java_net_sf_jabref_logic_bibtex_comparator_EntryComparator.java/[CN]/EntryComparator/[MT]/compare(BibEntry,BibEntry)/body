{
  if (Objects.equals(e1,e2)) {
    return 0;
  }
  Object f1=e1.getField(sortField).orElse(null);
  Object f2=e2.getField(sortField).orElse(null);
  if (binary) {
    if (f1 == null) {
      return f2 == null ? (next == null ? idCompare(e1,e2) : next.compare(e1,e2)) : 1;
    }
 else {
      return f2 == null ? -1 : (next == null ? idCompare(e1,e2) : next.compare(e1,e2));
    }
  }
  if (InternalBibtexFields.getFieldProperties(sortField).contains(FieldProperty.PERSON_NAMES)) {
    if (f1 != null) {
      f1=AuthorList.fixAuthorForAlphabetization((String)f1).toLowerCase();
    }
    if (f2 != null) {
      f2=AuthorList.fixAuthorForAlphabetization((String)f2).toLowerCase();
    }
  }
 else   if (sortField.equals(BibEntry.TYPE_HEADER)) {
    f1=e1.getType();
    f2=e2.getType();
  }
 else   if (numeric) {
    try {
      Integer i1=Integer.parseInt((String)f1);
      Integer i2=Integer.parseInt((String)f2);
      f1=i1;
      f2=i2;
    }
 catch (    NumberFormatException ex) {
    }
  }
  if (f2 == null) {
    if (f1 == null) {
      return next == null ? idCompare(e1,e2) : next.compare(e1,e2);
    }
 else {
      return -1;
    }
  }
  if (f1 == null) {
    return 1;
  }
  int result;
  if ((f1 instanceof Integer) && (f2 instanceof Integer)) {
    result=-((Integer)f1).compareTo((Integer)f2);
  }
 else   if (f2 instanceof Integer) {
    Integer f1AsInteger=Integer.valueOf(f1.toString());
    result=-f1AsInteger.compareTo((Integer)f2);
  }
 else   if (f1 instanceof Integer) {
    Integer f2AsInteger=Integer.valueOf(f2.toString());
    result=-((Integer)f1).compareTo(f2AsInteger);
  }
 else {
    String ours=((String)f1).toLowerCase();
    String theirs=((String)f2).toLowerCase();
    int comp=ours.compareTo(theirs);
    result=-comp;
  }
  if (result != 0) {
    return descending ? result : -result;
  }
  if (next == null) {
    return idCompare(e1,e2);
  }
 else {
    return next.compare(e1,e2);
  }
}
