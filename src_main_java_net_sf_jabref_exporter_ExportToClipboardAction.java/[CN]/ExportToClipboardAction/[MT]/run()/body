{
  BasePanel panel=frame.basePanel();
  if (panel == null) {
    return;
  }
  if (panel.getSelectedEntries().length == 0) {
    message=Localization.lang("No entries selected.");
    getCallBack().update();
    return;
  }
  Map<String,IExportFormat> m=ExportFormats.getExportFormats();
  IExportFormat[] formats=new ExportFormat[m.size()];
  String[] array=new String[formats.length];
  int piv=0;
  for (  IExportFormat format : m.values()) {
    formats[piv]=format;
    array[piv]=format.getDisplayName();
    piv++;
  }
  JList<String> list=new JList<>(array);
  list.setBorder(BorderFactory.createEtchedBorder());
  list.setSelectionInterval(0,0);
  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  int answer=JOptionPane.showOptionDialog(frame,list,Localization.lang("Select format"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,new String[]{Localization.lang("Ok"),Localization.lang("Cancel")},Localization.lang("Ok"));
  if (answer == JOptionPane.NO_OPTION) {
    return;
  }
  IExportFormat format=formats[list.getSelectedIndex()];
  Globals.prefs.fileDirForDatabase=frame.basePanel().metaData().getFileDirectory(GUIGlobals.FILE_FIELD);
  Globals.prefs.databaseFile=frame.basePanel().metaData().getFile();
  File tmp=null;
  Reader reader=null;
  try {
    tmp=File.createTempFile("jabrefCb",".tmp");
    tmp.deleteOnExit();
    BibtexEntry[] bes=panel.getSelectedEntries();
    HashSet<String> entries=new HashSet<String>(bes.length);
    for (    BibtexEntry be : bes) {
      entries.add(be.getId());
    }
    format.performExport(database,panel.metaData(),tmp.getPath(),panel.getEncoding(),entries);
    StringBuilder sb=new StringBuilder();
    reader=new InputStreamReader(new FileInputStream(tmp),panel.getEncoding());
    int s;
    while ((s=reader.read()) != -1) {
      sb.append((char)s);
    }
    ClipboardOwner owner=new ClipboardOwner(){
      @Override public void lostOwnership(      Clipboard clipboard,      Transferable content){
      }
    }
;
    RtfSelection rs=new RtfSelection(sb.toString());
    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(rs,owner);
    message=Localization.lang("Entries exported to clipboard") + ": " + bes.length;
  }
 catch (  Exception e) {
    e.printStackTrace();
    message=Localization.lang("Error exporting to clipboard");
  }
 finally {
    if (tmp != null) {
      tmp.delete();
    }
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException ex) {
        ex.printStackTrace();
      }
    }
  }
}
