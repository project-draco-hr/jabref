{
  ArrayList<BibEntry> bibitems=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  BufferedReader in=new BufferedReader(ImportFormatReader.getReaderDefaultEncoding(stream));
  String line;
  while ((line=in.readLine()) != null) {
    if (!line.isEmpty() && (line.charAt(0) != ' ')) {
      sb.append("__NEWFIELD__");
    }
    sb.append(line);
    sb.append('\n');
  }
  String[] items=sb.toString().split("<[0-9]+>");
  for (int i=1; i < items.length; i++) {
    HashMap<String,String> h=new HashMap<>();
    String[] fields=items[i].split("__NEWFIELD__");
    for (    String field : fields) {
      int linebreak=field.indexOf('\n');
      String fieldName=field.substring(0,linebreak).trim();
      String content=field.substring(linebreak).trim();
      boolean isAuthor=(fieldName.indexOf("Author") == 0) && !fieldName.contains("Author Keywords") && !fieldName.contains("Author e-mail");
      if (!isAuthor && content.endsWith(".")) {
        content=content.substring(0,content.length() - 1);
      }
      if (isAuthor) {
        h.put("author",content);
      }
 else       if (fieldName.indexOf("Title") == 0) {
        content=content.replaceAll("\\[.+\\]","").trim();
        if (content.endsWith(".")) {
          content=content.substring(0,content.length() - 1);
        }
        h.put("title",content);
      }
 else       if (fieldName.indexOf("Chapter Title") == 0) {
        h.put("chaptertitle",content);
      }
 else       if (fieldName.indexOf("Source") == 0) {
        Matcher matcher;
        if ((matcher=OvidImporter.ovid_src_pat.matcher(content)).find()) {
          h.put("journal",matcher.group(1));
          h.put("volume",matcher.group(2));
          h.put("issue",matcher.group(3));
          h.put("pages",matcher.group(4));
          h.put("year",matcher.group(5));
        }
 else         if ((matcher=OvidImporter.ovid_src_pat_no_issue.matcher(content)).find()) {
          h.put("journal",matcher.group(1));
          h.put("volume",matcher.group(2));
          h.put("pages",matcher.group(3));
          h.put("year",matcher.group(4));
        }
 else         if ((matcher=OvidImporter.ovid_src_pat_2.matcher(content)).find()) {
          h.put("journal",matcher.group(1));
          h.put("volume",matcher.group(2));
          h.put("issue",matcher.group(3));
          h.put("month",matcher.group(4));
          h.put("year",matcher.group(5));
          h.put("pages",matcher.group(6));
        }
 else         if ((matcher=OvidImporter.incollection_pat.matcher(content)).find()) {
          h.put("editor",matcher.group(1).replaceAll(" \\(Ed\\)",""));
          h.put("year",matcher.group(2));
          h.put("booktitle",matcher.group(3));
          h.put("pages",matcher.group(4));
          h.put("address",matcher.group(5));
          h.put("publisher",matcher.group(6));
        }
 else         if ((matcher=OvidImporter.book_pat.matcher(content)).find()) {
          h.put("year",matcher.group(1));
          h.put("pages",matcher.group(2));
          h.put("address",matcher.group(3));
          h.put("publisher",matcher.group(4));
        }
        if (h.get("pages") != null) {
          h.put("pages",h.get("pages").replaceAll("-","--"));
        }
      }
 else       if ("Abstract".equals(fieldName)) {
        h.put("abstract",content);
      }
 else       if ("Publication Type".equals(fieldName)) {
        if (content.contains("Book")) {
          h.put("entrytype","book");
        }
 else         if (content.contains("Journal")) {
          h.put("entrytype","article");
        }
 else         if (content.contains("Conference Paper")) {
          h.put("entrytype","inproceedings");
        }
      }
    }
    String auth=h.get("author");
    if ((auth != null) && auth.contains(" [Ed]")) {
      h.remove("author");
      h.put("editor",auth.replaceAll(" \\[Ed\\]",""));
    }
    auth=h.get("author");
    if (auth != null) {
      h.put("author",fixNames(auth));
    }
    auth=h.get("editor");
    if (auth != null) {
      h.put("editor",fixNames(auth));
    }
    String entryType=h.containsKey("entrytype") ? h.get("entrytype") : "other";
    h.remove("entrytype");
    if ("book".equals(entryType)) {
      if (h.containsKey("chaptertitle")) {
        entryType="incollection";
        h.put("title",h.remove("chaptertitle"));
      }
    }
    BibEntry b=new BibEntry(IdGenerator.next(),EntryTypes.getTypeOrDefault(entryType));
    b.setField(h);
    bibitems.add(b);
  }
  return bibitems;
}
