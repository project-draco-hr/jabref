{
  if (grammar instanceof LexerGrammar) {
    if (autoGenType == GrammarElement.AUTO_GEN_CARET) {
      tool.error("AST specification ^ not allowed in lexer",grammar.getFilename(),t.getLine(),t.getColumn());
    }
    if (inverted) {
      tool.error("~TOKEN is not allowed in lexer",grammar.getFilename(),t.getLine(),t.getColumn());
    }
    refRule(idAssign,t,label,args,autoGenType);
    String ignore=ruleBlock.getIgnoreRule();
    if (!lastInRule && ignore != null) {
      addElementToCurrentAlt(createOptionalRuleRef(ignore,t));
    }
  }
 else {
    if (idAssign != null) {
      tool.error("Assignment from token reference only allowed in lexer",grammar.getFilename(),idAssign.getLine(),idAssign.getColumn());
    }
    if (args != null) {
      tool.error("Token reference arguments only allowed in lexer",grammar.getFilename(),args.getLine(),args.getColumn());
    }
    super.refToken(idAssign,t,label,args,inverted,autoGenType,lastInRule);
    TokenRefElement te=new TokenRefElement(grammar,t,inverted,autoGenType);
    addElementToCurrentAlt(te);
    labelElement(te,label);
  }
}
