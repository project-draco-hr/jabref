{
  RuleBlock rb=(RuleBlock)end.block;
  String rule;
  if (lexicalAnalysis) {
    rule=CodeGenerator.encodeLexerRuleName(rb.getRuleName());
  }
 else {
    rule=rb.getRuleName();
  }
  if (DEBUG_ANALYZER)   System.out.println("FOLLOW(" + k + ","+ rule+ ")");
  if (end.lock[k]) {
    if (DEBUG_ANALYZER)     System.out.println("FOLLOW cycle to " + rule);
    return new Lookahead(rule);
  }
  if (end.cache[k] != null) {
    if (DEBUG_ANALYZER) {
      System.out.println("cache entry FOLLOW(" + k + ") for "+ rule+ ": "+ end.cache[k].toString(",",charFormatter,grammar));
    }
    if (end.cache[k].cycle == null) {
      return (Lookahead)end.cache[k].clone();
    }
    RuleSymbol rs=(RuleSymbol)grammar.getSymbol(end.cache[k].cycle);
    RuleEndElement re=rs.getBlock().endNode;
    if (re.cache[k] == null) {
      return (Lookahead)end.cache[k].clone();
    }
 else {
      if (DEBUG_ANALYZER) {
        System.out.println("combining FOLLOW(" + k + ") for "+ rule+ ": from "+ end.cache[k].toString(",",charFormatter,grammar)+ " with FOLLOW for "+ ((RuleBlock)re.block).getRuleName()+ ": "+ re.cache[k].toString(",",charFormatter,grammar));
      }
      if (re.cache[k].cycle == null) {
        end.cache[k].combineWith(re.cache[k]);
        end.cache[k].cycle=null;
      }
 else {
        Lookahead refFOLLOW=FOLLOW(k,re);
        end.cache[k].combineWith(refFOLLOW);
        end.cache[k].cycle=refFOLLOW.cycle;
      }
      if (DEBUG_ANALYZER) {
        System.out.println("saving FOLLOW(" + k + ") for "+ rule+ ": from "+ end.cache[k].toString(",",charFormatter,grammar));
      }
      return (Lookahead)end.cache[k].clone();
    }
  }
  end.lock[k]=true;
  Lookahead p=new Lookahead();
  RuleSymbol rs=(RuleSymbol)grammar.getSymbol(rule);
  for (int i=0; i < rs.numReferences(); i++) {
    RuleRefElement rr=rs.getReference(i);
    if (DEBUG_ANALYZER)     System.out.println("next[" + rule + "] is "+ rr.next.toString());
    Lookahead q=rr.next.look(k);
    if (DEBUG_ANALYZER)     System.out.println("FIRST of next[" + rule + "] ptr is "+ q.toString());
    if (q.cycle != null && q.cycle.equals(rule)) {
      q.cycle=null;
    }
    p.combineWith(q);
    if (DEBUG_ANALYZER)     System.out.println("combined FOLLOW[" + rule + "] is "+ p.toString());
  }
  end.lock[k]=false;
  if (p.fset.nil() && p.cycle == null) {
    if (grammar instanceof TreeWalkerGrammar) {
      p.fset.add(Token.NULL_TREE_LOOKAHEAD);
    }
 else     if (grammar instanceof LexerGrammar) {
      p.setEpsilon();
    }
 else {
      p.fset.add(Token.EOF_TYPE);
    }
  }
  if (DEBUG_ANALYZER) {
    System.out.println("saving FOLLOW(" + k + ") for "+ rule+ ": "+ p.toString(",",charFormatter,grammar));
  }
  end.cache[k]=(Lookahead)p.clone();
  return p;
}
