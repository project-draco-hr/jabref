{
  super(jabrefFrame,Localization.lang("Automatically create groups"),true);
  frame=jabrefFrame;
  panel=basePanel;
  m_groupsRoot=groupsRoot;
  field.setText(defaultField);
  remove.setText(defaultRemove);
  deliminator.setText(defaultDeliminator);
  nd.setSelected(true);
  ActionListener okListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      dispose();
      try {
        GroupTreeNode autoGroupsRoot=new GroupTreeNode(new ExplicitGroup(Localization.lang("Automatically created groups"),GroupHierarchyType.INCLUDING));
        Set<String> hs;
        String fieldText=field.getText();
        if (keywords.isSelected()) {
          if (nd.isSelected()) {
            hs=GroupsUtil.findDeliminatedWordsInField(panel.getDatabase(),field.getText().toLowerCase().trim(),deliminator.getText());
          }
 else {
            hs=GroupsUtil.findAllWordsInField(panel.getDatabase(),field.getText().toLowerCase().trim(),remove.getText());
          }
        }
 else         if (authors.isSelected()) {
          List<String> fields=new ArrayList<>(2);
          fields.add("author");
          hs=GroupsUtil.findAuthorLastNames(panel.getDatabase(),fields);
          fieldText="author";
        }
 else {
          List<String> fields=new ArrayList<>(2);
          fields.add("editor");
          hs=GroupsUtil.findAuthorLastNames(panel.getDatabase(),fields);
          fieldText="editor";
        }
        for (        String keyword : hs) {
          KeywordGroup group=new KeywordGroup(keyword,fieldText,keyword,false,false,GroupHierarchyType.INDEPENDENT);
          autoGroupsRoot.addChild(new GroupTreeNode(group));
        }
        autoGroupsRoot.moveTo(m_groupsRoot.getNode());
        NamedCompound ce=new NamedCompound(Localization.lang("Automatically create groups"));
        UndoableAddOrRemoveGroup undo=new UndoableAddOrRemoveGroup(m_groupsRoot,new GroupTreeNodeViewModel(autoGroupsRoot),UndoableAddOrRemoveGroup.ADD_NODE);
        ce.addEdit(undo);
        panel.markBaseChanged();
        frame.output(Localization.lang("Created groups."));
        ce.end();
        panel.getUndoManager().addEdit(ce);
      }
 catch (      ParseException exception) {
        frame.showMessage(exception.getLocalizedMessage());
      }
    }
  }
;
  remove.addActionListener(okListener);
  field.addActionListener(okListener);
  field.addCaretListener(this);
  AbstractAction cancelAction=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      dispose();
    }
  }
;
  JButton cancel=new JButton(Localization.lang("Cancel"));
  cancel.addActionListener(cancelAction);
  ok.addActionListener(okListener);
  JPanel main=new JPanel();
  ActionMap am=main.getActionMap();
  InputMap im=main.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(Globals.getKeyPrefs().getKey(KeyBinding.CLOSE_DIALOG),"close");
  am.put("close",cancelAction);
  ButtonGroup bg=new ButtonGroup();
  bg.add(keywords);
  bg.add(authors);
  bg.add(editors);
  keywords.setSelected(true);
  FormBuilder b=FormBuilder.create();
  b.layout(new FormLayout("left:20dlu, 4dlu, left:pref, 4dlu, fill:60dlu","p, 2dlu, p, 2dlu, p, 2dlu, p, 2dlu, p, 2dlu, p"));
  b.add(keywords).xyw(1,1,5);
  b.add(Localization.lang("Field to group by") + ":").xy(3,3);
  b.add(field).xy(5,3);
  b.add(Localization.lang("Characters to ignore") + ":").xy(3,5);
  b.add(remove).xy(5,5);
  b.add(nd).xy(3,7);
  b.add(deliminator).xy(5,7);
  b.add(authors).xyw(1,9,5);
  b.add(editors).xyw(1,11,5);
  b.build();
  b.border(BorderFactory.createEmptyBorder(5,5,5,5));
  JPanel opt=new JPanel();
  ButtonBarBuilder bb=new ButtonBarBuilder(opt);
  bb.addGlue();
  bb.addButton(ok);
  bb.addButton(cancel);
  bb.addGlue();
  main.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  opt.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  getContentPane().add(main,BorderLayout.CENTER);
  getContentPane().add(b.getPanel(),BorderLayout.CENTER);
  getContentPane().add(opt,BorderLayout.SOUTH);
  updateComponents();
  pack();
  setLocationRelativeTo(frame);
}
