{
  antlr.preprocessor.Tool preTool=new antlr.preprocessor.Tool(this,args);
  if (!preTool.preprocess()) {
    System.exit(1);
  }
  String[] modifiedArgs=preTool.preprocessedArgList();
  processArguments(modifiedArgs);
  f=getGrammarReader();
  TokenBuffer tokenBuf=new TokenBuffer(new ANTLRLexer(f));
  LLkAnalyzer analyzer=new LLkAnalyzer(this);
  MakeGrammar behavior=new MakeGrammar(this,args,analyzer);
  try {
    ANTLRParser p=new ANTLRParser(tokenBuf,behavior,this);
    p.setFilename(grammarFile);
    p.grammar();
    if (hasError) {
      System.err.println("Exiting due to errors.");
      System.exit(1);
    }
    checkForInvalidArguments(modifiedArgs,cmdLineArgValid);
    CodeGenerator codeGen;
    String codeGenClassName="antlr." + getLanguage(behavior) + "CodeGenerator";
    try {
      Class codeGenClass=Class.forName(codeGenClassName);
      codeGen=(CodeGenerator)codeGenClass.newInstance();
      codeGen.setBehavior(behavior);
      codeGen.setAnalyzer(analyzer);
      codeGen.setTool(this);
      codeGen.gen();
    }
 catch (    ClassNotFoundException cnfe) {
      panic("Cannot instantiate code-generator: " + codeGenClassName);
    }
catch (    InstantiationException ie) {
      panic("Cannot instantiate code-generator: " + codeGenClassName);
    }
catch (    IllegalArgumentException ie) {
      panic("Cannot instantiate code-generator: " + codeGenClassName);
    }
catch (    IllegalAccessException iae) {
      panic("code-generator class '" + codeGenClassName + "' is not accessible");
    }
  }
 catch (  RecognitionException pe) {
    System.err.println("Unhandled parser error: " + pe.getMessage());
    System.exit(1);
  }
catch (  TokenStreamException io) {
    System.err.println("TokenStreamException: " + io.getMessage());
    System.exit(1);
  }
  System.exit(0);
}
