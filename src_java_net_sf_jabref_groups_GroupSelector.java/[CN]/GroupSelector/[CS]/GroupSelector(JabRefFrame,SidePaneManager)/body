{
  super(manager,GUIGlobals.getIconUrl("toggleGroups"),Globals.lang("Groups"));
  this.groupsRoot=new GroupTreeNode(new AllEntriesGroup());
  this.manager=manager;
  this.frame=frame;
  hideNonHits=new JRadioButtonMenuItem(Globals.lang("Hide non-hits"),!Globals.prefs.getBoolean("grayOutNonHits"));
  grayOut=new JRadioButtonMenuItem(Globals.lang("Gray out non-hits"),Globals.prefs.getBoolean("grayOutNonHits"));
  nonHits.add(hideNonHits);
  nonHits.add(grayOut);
  floatCb.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      Globals.prefs.putBoolean("groupFloatSelections",floatCb.isSelected());
    }
  }
);
  andCb.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      Globals.prefs.putBoolean("groupIntersectSelections",andCb.isSelected());
    }
  }
);
  invCb.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      Globals.prefs.putBoolean("groupInvertSelections",invCb.isSelected());
    }
  }
);
  showOverlappingGroups.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      Globals.prefs.putBoolean("groupShowOverlapping",showOverlappingGroups.isSelected());
      if (!showOverlappingGroups.isSelected())       groupsTree.setHighlight2Cells(null);
    }
  }
);
  select.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      Globals.prefs.putBoolean("groupSelectMatches",select.isSelected());
    }
  }
);
  grayOut.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      Globals.prefs.putBoolean("grayOutNonHits",grayOut.isSelected());
    }
  }
);
  if (Globals.prefs.getBoolean("groupFloatSelections")) {
    floatCb.setSelected(true);
    highlCb.setSelected(false);
  }
 else {
    highlCb.setSelected(true);
    floatCb.setSelected(false);
  }
  if (Globals.prefs.getBoolean("groupIntersectSelections")) {
    andCb.setSelected(true);
    orCb.setSelected(false);
  }
 else {
    orCb.setSelected(true);
    andCb.setSelected(false);
  }
  invCb.setSelected(Globals.prefs.getBoolean("groupInvertSelections"));
  showOverlappingGroups.setSelected(Globals.prefs.getBoolean("groupShowOverlapping"));
  select.setSelected(Globals.prefs.getBoolean("groupSelectMatches"));
  openset.setMargin(new Insets(0,0,0,0));
  settings.add(andCb);
  settings.add(orCb);
  settings.addSeparator();
  settings.add(invCb);
  settings.addSeparator();
  settings.add(select);
  settings.addSeparator();
  settings.add(grayOut);
  settings.add(hideNonHits);
  settings.addSeparator();
  settings.add(showOverlappingGroups);
  openset.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (settings.isVisible()) {
      }
 else {
        JButton src=(JButton)e.getSource();
        settings.show(src,0,openset.getHeight());
      }
    }
  }
);
  expand.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int i=Globals.prefs.getInt("groupsVisibleRows") + 1;
      groupsTree.setVisibleRowCount(i);
      groupsTree.revalidate();
      groupsTree.repaint();
      GroupSelector.this.revalidate();
      GroupSelector.this.repaint();
      Globals.prefs.putInt("groupsVisibleRows",i);
    }
  }
);
  reduce.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int i=Globals.prefs.getInt("groupsVisibleRows") - 1;
      if (i < 1)       i=1;
      groupsTree.setVisibleRowCount(i);
      groupsTree.revalidate();
      groupsTree.repaint();
      GroupSelector.this.revalidate();
      GroupSelector.this.repaint();
      Globals.prefs.putInt("groupsVisibleRows",i);
    }
  }
);
  int butSize=newButton.getIcon().getIconHeight() + 5;
  Dimension butDim=new Dimension(butSize,butSize);
  newButton.setPreferredSize(butDim);
  newButton.setMinimumSize(butDim);
  refresh.setPreferredSize(butDim);
  refresh.setMinimumSize(butDim);
  helpButton.setPreferredSize(butDim);
  helpButton.setMinimumSize(butDim);
  autoGroup.setPreferredSize(butDim);
  autoGroup.setMinimumSize(butDim);
  openset.setPreferredSize(butDim);
  openset.setMinimumSize(butDim);
  expand.setPreferredSize(butDim);
  expand.setMinimumSize(butDim);
  reduce.setPreferredSize(butDim);
  reduce.setMinimumSize(butDim);
  Insets butIns=new Insets(0,0,0,0);
  helpButton.setMargin(butIns);
  reduce.setMargin(butIns);
  expand.setMargin(butIns);
  openset.setMargin(butIns);
  newButton.addActionListener(this);
  refresh.addActionListener(this);
  andCb.addActionListener(this);
  orCb.addActionListener(this);
  invCb.addActionListener(this);
  showOverlappingGroups.addActionListener(this);
  autoGroup.addActionListener(this);
  floatCb.addActionListener(this);
  highlCb.addActionListener(this);
  select.addActionListener(this);
  hideNonHits.addActionListener(this);
  grayOut.addActionListener(this);
  newButton.setToolTipText(Globals.lang("New group"));
  refresh.setToolTipText(Globals.lang("Refresh view"));
  andCb.setToolTipText(Globals.lang("Display only entries belonging to all selected" + " groups."));
  orCb.setToolTipText(Globals.lang("Display all entries belonging to one or more " + "of the selected groups."));
  autoGroup.setToolTipText(Globals.lang("Automatically create groups for database."));
  invCb.setToolTipText(Globals.lang("Show entries *not* in group selection"));
  showOverlappingGroups.setToolTipText("Highlight groups that contain entries contained in any currently selected group");
  floatCb.setToolTipText(Globals.lang("Move entries in group selection to the top"));
  highlCb.setToolTipText(Globals.lang("Gray out entries not in group selection"));
  select.setToolTipText(Globals.lang("Select entries in group selection"));
  expand.setToolTipText(Globals.lang("Show one more row"));
  reduce.setToolTipText(Globals.lang("Show one less rows"));
  bgr.add(andCb);
  bgr.add(orCb);
  visMode.add(floatCb);
  visMode.add(highlCb);
  JPanel main=new JPanel();
  main.setLayout(gbl);
  con.fill=GridBagConstraints.BOTH;
  con.weightx=1;
  con.gridwidth=1;
  gbl.setConstraints(newButton,con);
  main.add(newButton);
  gbl.setConstraints(refresh,con);
  main.add(refresh);
  gbl.setConstraints(autoGroup,con);
  main.add(autoGroup);
  con.gridwidth=GridBagConstraints.REMAINDER;
  HelpAction helpAction=new HelpAction(frame.helpDiag,GUIGlobals.groupsHelp,"Help on groups");
  helpButton.addActionListener(helpAction);
  helpButton.setToolTipText(Globals.lang("Help on groups"));
  gbl.setConstraints(helpButton,con);
  main.add(helpButton);
  groupsTree=new GroupsTree(this);
  groupsTree.addTreeSelectionListener(this);
  groupsTree.setModel(groupsTreeModel=new DefaultTreeModel(groupsRoot));
  sp=new JScrollPane(groupsTree,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  revalidateGroups();
  con.gridwidth=GridBagConstraints.REMAINDER;
  con.weighty=1;
  gbl.setConstraints(sp,con);
  main.add(sp);
  JPanel pan=new JPanel();
  GridBagLayout gb=new GridBagLayout();
  con.weighty=0;
  gbl.setConstraints(pan,con);
  pan.setLayout(gb);
  con.weightx=1;
  con.gridwidth=1;
  gb.setConstraints(openset,con);
  pan.add(openset);
  con.weightx=0;
  gb.setConstraints(expand,con);
  pan.add(expand);
  con.gridwidth=GridBagConstraints.REMAINDER;
  gb.setConstraints(reduce,con);
  pan.add(reduce);
  main.add(pan);
  main.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));
  add(main,BorderLayout.CENTER);
  definePopup();
  moveNodeUpAction.putValue(Action.ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_UP,KeyEvent.CTRL_MASK));
  moveNodeDownAction.putValue(Action.ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,KeyEvent.CTRL_MASK));
  moveNodeLeftAction.putValue(Action.ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,KeyEvent.CTRL_MASK));
  moveNodeRightAction.putValue(Action.ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,KeyEvent.CTRL_MASK));
}
