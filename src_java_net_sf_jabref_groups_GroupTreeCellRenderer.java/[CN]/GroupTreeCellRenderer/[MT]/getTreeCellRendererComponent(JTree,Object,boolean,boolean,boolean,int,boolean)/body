{
  if (value == highlight1Cell)   selected=true;
  Component c=super.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
  if (!(value instanceof GroupTreeNode))   return c;
  AbstractGroup group=((GroupTreeNode)value).getGroup();
  if (group == null || !(c instanceof JLabel))   return c;
  JLabel label=(JLabel)c;
  if (highlightBorderCell != null && highlightBorderCell == value)   label.setBorder(BorderFactory.createLineBorder(Color.BLACK));
 else   label.setBorder(BorderFactory.createEmptyBorder());
  boolean italics=Globals.prefs.getBoolean("groupShowDynamic") && group.isDynamic();
  boolean red=false;
  if (highlight2Cells != null) {
    for (int i=0; i < highlight2Cells.length; ++i) {
      if (highlight2Cells[i] == value) {
        red=true;
        break;
      }
    }
  }
  boolean underline=false;
  if (highlight3Cells != null) {
    for (int i=0; i < highlight3Cells.length; ++i) {
      if (highlight3Cells[i] == value) {
        underline=true;
        break;
      }
    }
  }
  String name=group.getName();
  if (name.length() > MAX_DISPLAYED_LETTERS)   name=name.substring(0,MAX_DISPLAYED_LETTERS - 2) + "...";
  StringBuffer sb=new StringBuffer();
  sb.append("<html>");
  if (red)   sb.append("<font color=\"#FF0000\">");
  if (underline)   sb.append("<u>");
  if (italics)   sb.append("<i>");
  sb.append(Util.quoteForHTML(name));
  if (Globals.prefs.getBoolean(JabRefPreferences.GROUP_SHOW_NUMBER_OF_ELEMENTS)) {
    if (group instanceof ExplicitGroup) {
      sb.append(" [").append(((ExplicitGroup)group).getNumEntries()).append("]");
    }
 else     if ((group instanceof KeywordGroup) || (group instanceof SearchGroup)) {
      int hits=0;
      for (      BibtexEntry entry : JabRef.jrf.basePanel().getDatabase().getEntries()) {
        if (group.contains(entry))         hits++;
      }
      sb.append(" [").append(hits).append("]");
    }
  }
  if (italics)   sb.append("</i>");
  if (underline)   sb.append("</u>");
  if (red)   sb.append("</font>");
  sb.append("</html>");
  final String text=sb.toString();
  if (!label.getText().equals(text))   label.setText(text);
  label.setToolTipText("<html>" + group.getShortDescription() + "</html>");
  if (Globals.prefs.getBoolean("groupShowIcons")) {
switch (group.getHierarchicalContext()) {
case AbstractGroup.REFINING:
      if (label.getIcon() != groupRefiningIcon)       label.setIcon(groupRefiningIcon);
    break;
case AbstractGroup.INCLUDING:
  if (label.getIcon() != groupIncludingIcon)   label.setIcon(groupIncludingIcon);
break;
default :
if (label.getIcon() != groupRegularIcon) label.setIcon(groupRegularIcon);
break;
}
}
 else {
label.setIcon(null);
}
return c;
}
