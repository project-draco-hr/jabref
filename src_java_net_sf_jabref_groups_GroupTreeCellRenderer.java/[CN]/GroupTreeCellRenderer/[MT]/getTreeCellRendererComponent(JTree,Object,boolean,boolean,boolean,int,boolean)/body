{
  if (value == highlight1Cell)   selected=true;
  Component c=super.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
  AbstractGroup group=((GroupTreeNode)value).getGroup();
  if (group == null || !(c instanceof JLabel))   return c;
  JLabel label=(JLabel)c;
  boolean italics=Globals.prefs.getBoolean("groupShowDynamic") && group.isDynamic();
  boolean red=false;
  if (highlight2Cells != null) {
    for (int i=0; i < highlight2Cells.length; ++i) {
      if (highlight2Cells[i] == value) {
        red=true;
        break;
      }
    }
  }
  boolean underline=false;
  if (highlight3Cells != null) {
    for (int i=0; i < highlight3Cells.length; ++i) {
      if (highlight3Cells[i] == value) {
        underline=true;
        break;
      }
    }
  }
  StringBuffer sb=new StringBuffer();
  sb.append("<html>");
  if (red)   sb.append("<font color=\"#FF0000\">");
  if (underline)   sb.append("<u>");
  if (italics)   sb.append("<i>");
  sb.append(group.getName());
  if (italics)   sb.append("</i>");
  if (underline)   sb.append("</u>");
  if (red)   sb.append("</font>");
  sb.append("</html>");
  final String text=sb.toString();
  if (!label.getText().equals(text))   label.setText(text);
  label.setToolTipText("<html>" + group.getShortDescription() + "</html>");
  if (Globals.prefs.getBoolean("groupShowIcons")) {
switch (group.getHierarchicalContext()) {
case AbstractGroup.REFINING:
      if (label.getIcon() != GUIGlobals.groupRefiningIcon)       label.setIcon(GUIGlobals.groupRefiningIcon);
    break;
case AbstractGroup.INCLUDING:
  if (label.getIcon() != GUIGlobals.groupIncludingIcon)   label.setIcon(GUIGlobals.groupIncludingIcon);
break;
default :
if (label.getIcon() != GUIGlobals.groupRegularIcon) label.setIcon(GUIGlobals.groupRegularIcon);
break;
}
}
 else {
label.setIcon(null);
}
return c;
}
