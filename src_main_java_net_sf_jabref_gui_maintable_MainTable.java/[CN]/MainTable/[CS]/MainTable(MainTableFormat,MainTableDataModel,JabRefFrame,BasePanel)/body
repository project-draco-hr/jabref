{
  super();
  this.model=model;
  addFocusListener(Globals.getFocusListener());
  setAutoResizeMode(Globals.prefs.getInt(JabRefPreferences.AUTO_RESIZE_MODE));
  this.tableFormat=tableFormat;
  this.panel=panel;
  setModel(GlazedListsSwing.eventTableModelWithThreadProxyList(model.getTableRows(),tableFormat));
  tableColorCodes=Globals.prefs.getBoolean(JabRefPreferences.TABLE_COLOR_CODES_ON);
  tableResolvedColorCodes=Globals.prefs.getBoolean(JabRefPreferences.TABLE_RESOLVED_COLOR_CODES_ON);
  localSelectionModel=(DefaultEventSelectionModel<BibEntry>)GlazedListsSwing.eventSelectionModelWithThreadProxyList(model.getTableRows());
  setSelectionModel(localSelectionModel);
  pane=new JScrollPane(this);
  pane.setBorder(BorderFactory.createEmptyBorder());
  pane.getViewport().setBackground(Globals.prefs.getColor(JabRefPreferences.TABLE_BACKGROUND));
  setGridColor(Globals.prefs.getColor(JabRefPreferences.GRID_COLOR));
  if (Globals.prefs.getBoolean(JabRefPreferences.TABLE_SHOW_GRID)) {
    setShowGrid(true);
  }
 else {
    setShowGrid(false);
    setIntercellSpacing(new Dimension(0,0));
  }
  this.setTableHeader(new PreventDraggingJTableHeader(this,tableFormat));
  comparatorChooser=this.createTableComparatorChooser(this,model.getSortedForUserDefinedTableColumnSorting(),TableComparatorChooser.MULTIPLE_COLUMN_KEYBOARD);
  this.tableColumnListener=new PersistenceTableColumnListener(this);
  this.getTableHeader().setDefaultRenderer(new MainTableHeaderRenderer(this.getTableHeader().getDefaultRenderer()));
  getSelected();
  setDragEnabled(true);
  TransferHandler xfer=new EntryTableTransferHandler(this,frame,panel);
  setTransferHandler(xfer);
  pane.setTransferHandler(xfer);
  setupComparatorChooser();
  model.updateMarkingState(Globals.prefs.getBoolean(JabRefPreferences.FLOAT_MARKED_ENTRIES));
  setWidths();
  ActionMap am=getActionMap();
  am.put("selectNextColumnCell",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      panel.selectNextEntry();
    }
  }
);
  am.put("selectPreviousColumnCell",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      panel.selectPreviousEntry();
    }
  }
);
}
