{
  if (!one.getType().equals(two.getType())) {
    return false;
  }
  EntryType type=EntryTypes.getType(one.getType(),bibDatabaseType);
  java.util.List<String> var=type.getRequiredFieldsFlat();
  String[] fields=var.toArray(new String[var.size()]);
  double[] req;
  if (fields == null) {
    req=new double[]{0.,0.};
  }
 else {
    req=DuplicateCheck.compareFieldSet(fields,one,two);
  }
  if (Math.abs(req[0] - DuplicateCheck.duplicateThreshold) > DuplicateCheck.DOUBT_RANGE) {
    return req[0] >= DuplicateCheck.duplicateThreshold;
  }
  java.util.List<String> optionalFields=type.getOptionalFields();
  fields=optionalFields.toArray(new String[optionalFields.size()]);
  if (fields != null) {
    double[] opt=DuplicateCheck.compareFieldSet(fields,one,two);
    double totValue=((DuplicateCheck.REQUIRED_WEIGHT * req[0] * req[1]) + (opt[0] * opt[1])) / ((req[1] * DuplicateCheck.REQUIRED_WEIGHT) + opt[1]);
    return totValue >= DuplicateCheck.duplicateThreshold;
  }
  return req[0] >= DuplicateCheck.duplicateThreshold;
}
