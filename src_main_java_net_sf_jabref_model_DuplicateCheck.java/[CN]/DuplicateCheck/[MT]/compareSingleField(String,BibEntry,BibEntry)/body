{
  Optional<String> optionalStringOne=one.getField(field);
  Optional<String> optionalStringTwo=two.getField(field);
  if (!optionalStringOne.isPresent()) {
    if (!optionalStringTwo.isPresent()) {
      return EMPTY_IN_BOTH;
    }
    return EMPTY_IN_ONE;
  }
 else   if (!optionalStringTwo.isPresent()) {
    return EMPTY_IN_TWO;
  }
  String stringOne=optionalStringOne.get();
  String stringTwo=optionalStringTwo.get();
  if (InternalBibtexFields.getFieldProperties(field).contains(FieldProperty.PERSON_NAMES)) {
    String authorOne=AuthorList.fixAuthorLastNameOnlyCommas(stringOne,false).replace(" and "," ").toLowerCase();
    String authorTwo=AuthorList.fixAuthorLastNameOnlyCommas(stringTwo,false).replace(" and "," ").toLowerCase();
    double similarity=DuplicateCheck.correlateByWords(authorOne,authorTwo);
    if (similarity > 0.8) {
      return EQUAL;
    }
    return NOT_EQUAL;
  }
 else   if (FieldName.PAGES.equals(field)) {
    stringOne=stringOne.replaceAll("[- ]+","-");
    stringTwo=stringTwo.replaceAll("[- ]+","-");
    if (stringOne.equals(stringTwo)) {
      return EQUAL;
    }
    return NOT_EQUAL;
  }
 else   if (FieldName.JOURNAL.equals(field)) {
    stringOne=stringOne.replace(".","").toLowerCase();
    stringTwo=stringTwo.replace(".","").toLowerCase();
    double similarity=DuplicateCheck.correlateByWords(stringOne,stringTwo);
    if (similarity > 0.8) {
      return EQUAL;
    }
    return NOT_EQUAL;
  }
 else {
    stringOne=stringOne.toLowerCase();
    stringTwo=stringTwo.toLowerCase();
    double similarity=DuplicateCheck.correlateByWords(stringOne,stringTwo);
    if (similarity > 0.8) {
      return EQUAL;
    }
    return NOT_EQUAL;
  }
}
