{
  frame.output(Localization.lang("External viewer called") + ".");
  try {
    Optional<ExternalFileType> type=fileType;
    if (!this.fileType.isPresent()) {
      if (this.fieldName == null) {
        File file=new File(link);
        String name=file.getName();
        int pos=name.indexOf('.');
        String extension=(pos >= 0) && (pos < (name.length() - 1)) ? name.substring(pos + 1).trim().toLowerCase() : null;
        type=ExternalFileTypes.getInstance().getExternalFileTypeByExt(extension);
        fileType=type;
      }
 else {
        JabRefDesktop.openExternalViewer(frame.getCurrentBasePanel().getBibDatabaseContext().getMetaData(),link,fieldName);
        return true;
      }
    }
    if (type.isPresent() && (type.get() instanceof UnknownExternalFileType)) {
      return JabRefDesktop.openExternalFileUnknown(frame,entry,metaData,link,(UnknownExternalFileType)type.get());
    }
 else {
      return JabRefDesktop.openExternalFileAnyFormat(metaData,link,type);
    }
  }
 catch (  IOException e1) {
    if ((fileType.isPresent()) && (!fileType.get().getOpenWithApplication().isEmpty()) && e1.getMessage().contains(fileType.get().getOpenWithApplication())) {
      JOptionPane.showMessageDialog(frame,Localization.lang("Unable to open link. " + "The application '%0' associated with the file type '%1' could not be called.",fileType.get().getOpenWithApplication(),fileType.get().getName()),Localization.lang("Could not open link"),JOptionPane.ERROR_MESSAGE);
      return false;
    }
    LOGGER.warn("Unable to open link",e1);
  }
  return false;
}
