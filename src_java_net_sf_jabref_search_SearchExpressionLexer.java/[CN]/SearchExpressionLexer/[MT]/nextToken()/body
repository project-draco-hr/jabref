{
  Token theRetToken=null;
  tryAgain:   for (; ; ) {
    Token _token=null;
    int _ttype=Token.INVALID_TYPE;
    resetText();
    try {
      try {
switch (LA(1)) {
case '\t':
case ' ':
{
            mWS(true);
            theRetToken=_returnToken;
            break;
          }
case '(':
{
          mLPAREN(true);
          theRetToken=_returnToken;
          break;
        }
case ')':
{
        mRPAREN(true);
        theRetToken=_returnToken;
        break;
      }
case '!':
{
      mNEQUAL(true);
      theRetToken=_returnToken;
      break;
    }
default :
  if ((LA(1) == '=') && (LA(2) == '=')) {
    mEEQUAL(true);
    theRetToken=_returnToken;
  }
 else   if ((LA(1) == '"') && ((LA(2) >= '\u0003' && LA(2) <= '\u00ff'))) {
    mSTRING(true);
    theRetToken=_returnToken;
  }
 else   if ((LA(1) == '=')) {
    mEQUAL(true);
    theRetToken=_returnToken;
  }
 else   if ((LA(1) == '"')) {
    mQUOTE(true);
    theRetToken=_returnToken;
  }
 else   if ((_tokenSet_0.member(LA(1)))) {
    mFIELDTYPE(true);
    theRetToken=_returnToken;
  }
 else {
    if (LA(1) == EOF_CHAR) {
      uponEOF();
      _returnToken=makeToken(Token.EOF_TYPE);
    }
 else {
      throw new NoViableAltForCharException(LA(1),getFilename(),getLine(),getColumn());
    }
  }
}
if (_returnToken == null) continue tryAgain;
_ttype=_returnToken.getType();
_returnToken.setType(_ttype);
return _returnToken;
}
 catch (RecognitionException e) {
throw new TokenStreamRecognitionException(e);
}
}
 catch (CharStreamException cse) {
if (cse instanceof CharStreamIOException) {
throw new TokenStreamIOException(((CharStreamIOException)cse).io);
}
 else {
throw new TokenStreamException(cse.getMessage());
}
}
}
}
