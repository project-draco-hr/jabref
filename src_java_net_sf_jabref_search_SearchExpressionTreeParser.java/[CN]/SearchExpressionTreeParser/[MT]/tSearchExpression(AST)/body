{
  boolean ret=false;
  ;
  AST tSearchExpression_AST_in=(_t == ASTNULL) ? null : (AST)_t;
  boolean a=false, b=false;
  try {
    if (_t == null)     _t=ASTNULL;
switch (_t.getType()) {
case And:
{
        AST __t2=_t;
        AST tmp1_AST_in=(AST)_t;
        match(_t,And);
        _t=_t.getFirstChild();
        a=tSearchExpression(_t);
        _t=_retTree;
{
          if (_t == null)           _t=ASTNULL;
          if ((((_t.getType() >= And && _t.getType() <= ExpressionSearch))) && (a)) {
            b=tSearchExpression(_t);
            _t=_retTree;
          }
 else           if (((_t.getType() >= LITERAL_and && _t.getType() <= ExpressionSearch))) {
            AST tmp2_AST_in=(AST)_t;
            if (_t == null)             throw new MismatchedTokenException();
            _t=_t.getNextSibling();
          }
 else {
            throw new NoViableAltException(_t);
          }
        }
        _t=__t2;
        _t=_t.getNextSibling();
        ret=a && b;
        break;
      }
case Or:
{
      AST __t4=_t;
      AST tmp3_AST_in=(AST)_t;
      match(_t,Or);
      _t=_t.getFirstChild();
      a=tSearchExpression(_t);
      _t=_retTree;
{
        if (_t == null)         _t=ASTNULL;
        if ((((_t.getType() >= And && _t.getType() <= ExpressionSearch))) && (!a)) {
          b=tSearchExpression(_t);
          _t=_retTree;
        }
 else         if (((_t.getType() >= LITERAL_and && _t.getType() <= ExpressionSearch))) {
          AST tmp4_AST_in=(AST)_t;
          if (_t == null)           throw new MismatchedTokenException();
          _t=_t.getNextSibling();
        }
 else {
          throw new NoViableAltException(_t);
        }
      }
      _t=__t4;
      _t=_t.getNextSibling();
      ret=a || b;
      break;
    }
case Not:
{
    AST __t6=_t;
    AST tmp5_AST_in=(AST)_t;
    match(_t,Not);
    _t=_t.getFirstChild();
    a=tSearchExpression(_t);
    _t=_retTree;
    _t=__t6;
    _t=_t.getNextSibling();
    ret=!a;
    break;
  }
case ExpressionSearch:
{
  ret=tExpressionSearch(_t);
  _t=_retTree;
  break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
 catch (RecognitionException ex) {
reportError(ex);
if (_t != null) {
_t=_t.getNextSibling();
}
}
_retTree=_t;
return ret;
}
