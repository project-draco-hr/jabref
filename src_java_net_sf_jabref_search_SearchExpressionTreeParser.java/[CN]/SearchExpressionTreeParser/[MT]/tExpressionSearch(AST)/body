{
  boolean ret=false;
  ;
  AST tExpressionSearch_AST_in=(_t == ASTNULL) ? null : (AST)_t;
  AST var_f=null;
  AST var_v=null;
  int matchType=0;
  try {
    AST __t94=_t;
    AST tmp6_AST_in=(AST)_t;
    match(_t,ExpressionSearch);
    _t=_t.getFirstChild();
    var_f=(AST)_t;
    match(_t,RegularExpression);
    _t=_t.getNextSibling();
    matchType=tSearchType(_t);
    _t=_retTree;
    var_v=(AST)_t;
    match(_t,RegularExpression);
    _t=_t.getNextSibling();
    Pattern fieldSpec=((RegExNode)var_f).getPattern();
    Pattern valueSpec=((RegExNode)var_v).getPattern();
    int pseudoField=0;
    boolean noSuchField=true;
    for (int i=0; i < searchKeys.length + PSEUDOFIELD_TYPE && !ret; ++i) {
      String content;
switch (i - searchKeys.length + 1) {
case PSEUDOFIELD_TYPE:
        if (!fieldSpec.matcher("entrytype").matches())         continue;
      content=bibtexEntry.getType().getName();
    break;
default :
  if (!fieldSpec.matcher(searchKeys[i].toString()).matches())   continue;
content=(String)bibtexEntry.getField(searchKeys[i].toString());
}
noSuchField=false;
if (content == null) continue;
Matcher matcher=valueSpec.matcher(content);
switch (matchType) {
case MATCH_CONTAINS:
ret=matcher.find();
break;
case MATCH_EXACT:
ret=matcher.matches();
break;
case MATCH_DOES_NOT_CONTAIN:
ret=!matcher.find();
break;
}
}
if (noSuchField && matchType == MATCH_DOES_NOT_CONTAIN) ret=true;
_t=__t94;
_t=_t.getNextSibling();
}
 catch (RecognitionException ex) {
reportError(ex);
if (_t != null) {
_t=_t.getNextSibling();
}
}
_retTree=_t;
return ret;
}
