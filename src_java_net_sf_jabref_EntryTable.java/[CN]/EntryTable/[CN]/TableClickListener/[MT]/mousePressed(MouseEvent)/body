{
  final int col=columnAtPoint(e.getPoint()), row=rowAtPoint(e.getPoint());
  if (!isCellEditable(row,col) && (e.getClickCount() == 2)) {
    try {
      panel.runCommand("edit");
      return;
    }
 catch (    Throwable ex) {
      ex.printStackTrace();
    }
  }
  if (e.isPopupTrigger()) {
    processPopupTrigger(e,row,col);
    return;
  }
  if (tableModel.getCellStatus(0,col) == EntryTableModel.ICON_COL) {
    Object value=getValueAt(row,col);
    if (value == null)     return;
    final String[] iconType=tableModel.getIconTypeForColumn(col);
    int hasField=-1;
    for (int i=iconType.length - 1; i >= 0; i--)     if (tableModel.hasField(row,iconType[i]))     hasField=i;
    if (hasField == -1)     return;
    final String fieldName=iconType[hasField];
    (new Thread(){
      public void run(){
        panel.output(Globals.lang("External viewer called") + ".");
        BibtexEntry be=panel.database().getEntryById(tableModel.getIdForRow(row));
        if (be == null) {
          Globals.logger("Error: could not find entry.");
          return;
        }
        Object link=be.getField(fieldName);
        if (iconType == null) {
          Globals.logger("Error: no link to " + fieldName + ".");
          return;
        }
        try {
          Util.openExternalViewer((String)link,fieldName,prefs);
        }
 catch (        IOException ex) {
          panel.output(Globals.lang("Error") + ": " + ex.getMessage());
        }
      }
    }
).start();
  }
}
