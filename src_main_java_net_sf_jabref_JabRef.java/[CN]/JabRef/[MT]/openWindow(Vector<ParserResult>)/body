{
  PreferencesMigrations.replaceAbstractField();
  PreferencesMigrations.upgradeSortOrder();
  PreferencesMigrations.upgradeFaultyEncodingStrings();
  System.setProperty("apple.laf.useScreenMenuBar","true");
  System.setProperty("swing.aatext","true");
  System.setProperty("awt.useSystemAAFontSettings","lcd");
  try {
    setLookAndFeel();
  }
 catch (  Throwable e) {
    LOGGER.error("Swing look and feel could not be loaded.",e);
  }
  if (!cli.isBlank() && Globals.prefs.getBoolean(JabRefPreferences.OPEN_LAST_EDITED) && (Globals.prefs.get(JabRefPreferences.LAST_EDITED) != null)) {
    List<String> names=Globals.prefs.getStringList(JabRefPreferences.LAST_EDITED);
    lastEdLoop:     for (    String name : names) {
      File fileToOpen=new File(name);
      for (int j=0; j < loaded.size(); j++) {
        ParserResult pr=loaded.elementAt(j);
        if ((pr.getFile() != null) && pr.getFile().equals(fileToOpen)) {
          continue lastEdLoop;
        }
      }
      if (fileToOpen.exists()) {
        ParserResult pr=JabRef.openBibFile(name,false);
        if (pr != null) {
          if (pr == ParserResult.INVALID_FORMAT) {
            System.out.println(Localization.lang("Error opening file") + " '" + fileToOpen.getPath()+ "'");
          }
 else           if (pr != ParserResult.FILE_LOCKED) {
            loaded.add(pr);
          }
        }
      }
    }
  }
  GUIGlobals.init();
  GUIGlobals.CURRENTFONT=new Font(Globals.prefs.get(JabRefPreferences.FONT_FAMILY),Globals.prefs.getInt(JabRefPreferences.FONT_STYLE),Globals.prefs.getInt(JabRefPreferences.FONT_SIZE));
  LOGGER.debug("Initializing frame");
  JabRef.jrf=new JabRefFrame(this);
  boolean first=true;
  List<File> postponed=new ArrayList<>();
  List<ParserResult> failed=new ArrayList<>();
  List<ParserResult> toOpenTab=new ArrayList<>();
  if (!loaded.isEmpty()) {
    for (Iterator<ParserResult> i=loaded.iterator(); i.hasNext(); ) {
      ParserResult pr=i.next();
      if (new LastFocusedTabPreferences(Globals.prefs).hadLastFocus(pr.getFile())) {
        first=true;
      }
      if (pr.isInvalid()) {
        failed.add(pr);
        i.remove();
      }
 else       if (!pr.isPostponedAutosaveFound()) {
        if (pr.toOpenTab()) {
          toOpenTab.add(pr);
        }
 else {
          JabRef.jrf.addParserResult(pr,first);
          first=false;
        }
      }
 else {
        i.remove();
        postponed.add(pr.getFile());
      }
    }
  }
  for (  ParserResult pr : toOpenTab) {
    JabRef.jrf.addParserResult(pr,first);
    first=false;
  }
  if (Globals.prefs.getBoolean(JabRefPreferences.AUTO_SAVE)) {
    Globals.startAutoSaveManager(JabRef.jrf);
  }
  if (Globals.prefs.getBoolean(JabRefPreferences.WINDOW_MAXIMISED)) {
    JabRef.jrf.setExtendedState(JFrame.MAXIMIZED_BOTH);
  }
  JabRef.jrf.setVisible(true);
  if (Globals.prefs.getBoolean(JabRefPreferences.WINDOW_MAXIMISED)) {
    JabRef.jrf.setExtendedState(JFrame.MAXIMIZED_BOTH);
  }
  for (  ParserResult pr : failed) {
    String message="<html>" + Localization.lang("Error opening file '%0'.",pr.getFile().getName()) + "<p>"+ pr.getErrorMessage()+ "</html>";
    JOptionPane.showMessageDialog(JabRef.jrf,message,Localization.lang("Error opening file"),JOptionPane.ERROR_MESSAGE);
  }
  for (int i=0; i < loaded.size(); i++) {
    if (Globals.prefs.getBoolean(JabRefPreferences.DISPLAY_KEY_WARNING_DIALOG_AT_STARTUP)) {
      ParserResultWarningDialog.showParserResultWarningDialog(loaded.elementAt(i),JabRef.jrf,i);
    }
  }
  for (int i=0; (i < loaded.size()) && (i < JabRef.jrf.getBasePanelCount()); i++) {
    ParserResult pr=loaded.elementAt(i);
    BasePanel panel=JabRef.jrf.getBasePanelAt(i);
    OpenDatabaseAction.performPostOpenActions(panel,pr,true);
  }
  LOGGER.debug("Finished adding panels");
  if (!postponed.isEmpty()) {
    AutosaveStartupPrompter asp=new AutosaveStartupPrompter(JabRef.jrf,postponed);
    SwingUtilities.invokeLater(asp);
  }
  if (!loaded.isEmpty()) {
    new FocusRequester(JabRef.jrf.getCurrentBasePanel().mainTable);
  }
}
