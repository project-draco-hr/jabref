{
  try {
    String lookFeel;
    String systemLnF=UIManager.getSystemLookAndFeelClassName();
    if (Globals.prefs.getBoolean(JabRefPreferences.USE_DEFAULT_LOOK_AND_FEEL)) {
      lookFeel=systemLnF;
    }
 else {
      lookFeel=Globals.prefs.get(JabRefPreferences.WIN_LOOK_AND_FEEL);
    }
    if ("javax.swing.plaf.metal.MetalLookAndFeel".equals(lookFeel)) {
      Plastic3DLookAndFeel lnf=new Plastic3DLookAndFeel();
      Plastic3DLookAndFeel.setCurrentTheme(new SkyBluer());
      com.jgoodies.looks.Options.setPopupDropShadowEnabled(true);
      UIManager.setLookAndFeel(lnf);
    }
 else {
      try {
        UIManager.setLookAndFeel(lookFeel);
      }
 catch (      ClassNotFoundException|InstantiationException|IllegalAccessException|UnsupportedLookAndFeelException e) {
        UIManager.setLookAndFeel(systemLnF);
        Globals.prefs.put(JabRefPreferences.WIN_LOOK_AND_FEEL,systemLnF);
        JOptionPane.showMessageDialog(JabRef.jrf,Localization.lang("Unable to find the requested Look & Feel and thus the default one is used."),Localization.lang("Warning"),JOptionPane.WARNING_MESSAGE);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  boolean overrideDefaultFonts=Globals.prefs.getBoolean(JabRefPreferences.OVERRIDE_DEFAULT_FONTS);
  if (overrideDefaultFonts) {
    int fontSize=Globals.prefs.getInt(JabRefPreferences.MENU_FONT_SIZE);
    UIDefaults defaults=UIManager.getDefaults();
    Enumeration<Object> keys=defaults.keys();
    Double zoomLevel=null;
    for (    Object key : Collections.list(keys)) {
      if ((key instanceof String) && ((String)key).endsWith(".font")) {
        FontUIResource font=(FontUIResource)UIManager.get(key);
        if (zoomLevel == null) {
          zoomLevel=(double)fontSize / (double)font.getSize();
        }
        font=new FontUIResource(font.getName(),font.getStyle(),fontSize);
        defaults.put(key,font);
      }
    }
    if (zoomLevel != null) {
      GUIGlobals.zoomLevel=zoomLevel;
    }
  }
}
