{
  cli=new JabRefCLI(args);
  if (initialStartup && cli.isShowVersion()) {
    cli.options.displayVersion();
    cli.disableGui.setInvoked(true);
  }
  if (initialStartup && cli.isHelp()) {
    System.out.println("jabref [options] [bibtex-file]\n");
    System.out.println(cli.getHelp());
    String importFormats=Globals.importFormatReader.getImportFormatList();
    System.out.println(Globals.lang("Available import formats") + ":\n" + importFormats);
    String outFormats=ExportFormats.getConsoleExportList(70,20,"\t");
    System.out.println(Globals.lang("Available export formats") + ": " + outFormats+ ".");
    System.exit(0);
  }
  boolean commandmode=cli.isDisableGui() || cli.fetcherEngine.isInvoked();
  if (initialStartup && !commandmode && !cli.isDisableSplash()) {
    try {
      splashScreen=SplashScreen.splash();
    }
 catch (    Throwable ex) {
      graphicFailure=true;
      System.err.println(Globals.lang("Unable to create graphical interface") + ".");
    }
  }
  if (cli.defPrefs.isInvoked()) {
    String value=cli.defPrefs.getStringValue();
    if (value.trim().equals("all")) {
      try {
        System.out.println(Globals.lang("Setting all preferences to default values."));
        Globals.prefs.clear();
      }
 catch (      BackingStoreException e) {
        System.err.println(Globals.lang("Unable to clear preferences."));
        e.printStackTrace();
      }
    }
 else {
      String[] keys=value.split(",");
      for (      String key : keys) {
        if (Globals.prefs.hasKey(key.trim())) {
          System.out.println(Globals.lang("Resetting preference key '%0'",key.trim()));
          Globals.prefs.clear(key.trim());
        }
 else {
          System.out.println(Globals.lang("Unknown preference key '%0'",key.trim()));
        }
      }
    }
  }
  if (cli.importPrefs.isInvoked()) {
    try {
      Globals.prefs.importPreferences(cli.importPrefs.getStringValue());
      BibtexEntryType.loadCustomEntryTypes(Globals.prefs);
      ExportFormats.initAllExports();
    }
 catch (    IOException ex) {
      Util.pr(ex.getMessage());
    }
  }
  Vector<ParserResult> loaded=new Vector<ParserResult>();
  Vector<String> toImport=new Vector<String>();
  if (!cli.isBlank() && (cli.getLeftOver().length > 0)) {
    for (    String aLeftOver : cli.getLeftOver()) {
      boolean bibExtension=aLeftOver.toLowerCase().endsWith("bib");
      ParserResult pr=null;
      if (bibExtension)       pr=openBibFile(aLeftOver,false);
      if ((pr == null) || (pr == ParserResult.INVALID_FORMAT)) {
        if (initialStartup) {
          toImport.add(aLeftOver);
        }
 else {
          ParserResult res=importToOpenBase(aLeftOver);
          if (res != null)           loaded.add(res);
 else           loaded.add(ParserResult.INVALID_FORMAT);
        }
      }
 else       if (pr != ParserResult.FILE_LOCKED)       loaded.add(pr);
    }
  }
  if (!cli.isBlank() && cli.importFile.isInvoked()) {
    toImport.add(cli.importFile.getStringValue());
  }
  for (  String filenameString : toImport) {
    ParserResult pr=importFile(filenameString);
    if (pr != null)     loaded.add(pr);
  }
  if (!cli.isBlank() && cli.importToOpenBase.isInvoked()) {
    ParserResult res=importToOpenBase(cli.importToOpenBase.getStringValue());
    if (res != null)     loaded.add(res);
  }
  if (!cli.isBlank() && cli.fetcherEngine.isInvoked()) {
    ParserResult res=fetch(cli.fetcherEngine.getStringValue());
    if (res != null)     loaded.add(res);
  }
  if (cli.exportMatches.isInvoked()) {
    if (loaded.size() > 0) {
      String[] data=cli.exportMatches.getStringValue().split(",");
      String searchTerm=data[0].replace("\\$"," ");
      ParserResult pr=loaded.elementAt(loaded.size() - 1);
      BibtexDatabase dataBase=pr.getDatabase();
      SearchManagerNoGUI smng=new SearchManagerNoGUI(searchTerm,dataBase);
      BibtexDatabase newBase=smng.getDBfromMatches();
      if (newBase != null && newBase.getEntryCount() > 0) {
        String formatName=null;
        IExportFormat format=null;
switch (data.length) {
case (3):
{
            formatName=data[2];
            break;
          }
case (2):
{
          formatName="tablerefsabsbib";
          break;
        }
default :
{
        System.err.println(Globals.lang("Output file missing").concat(". \n \t ").concat("Usage").concat(": ") + JabRefCLI.exportMatchesSyntax);
        System.exit(0);
      }
  }
  format=ExportFormats.getExportFormat(formatName);
  if (format != null) {
    try {
      System.out.println(Globals.lang("Exporting") + ": " + data[1]);
      format.performExport(newBase,pr.getMetaData(),data[1],pr.getEncoding(),null);
    }
 catch (    Exception ex) {
      System.err.println(Globals.lang("Could not export file") + " '" + data[1]+ "': "+ ex.getMessage());
    }
  }
 else   System.err.println(Globals.lang("Unknown export format") + ": " + formatName);
}
 else {
  System.err.println(Globals.lang("No search matches."));
}
}
 else {
System.err.println(Globals.lang("The output option depends on a valid input option."));
}
}
if (cli.exportFile.isInvoked()) {
if (loaded.size() > 0) {
String[] data=cli.exportFile.getStringValue().split(",");
if (data.length == 1) {
  if (loaded.size() > 0) {
    ParserResult pr=loaded.elementAt(loaded.size() - 1);
    if (!pr.isInvalid()) {
      try {
        System.out.println(Globals.lang("Saving") + ": " + data[0]);
        SaveSession session=FileActions.saveDatabase(pr.getDatabase(),pr.getMetaData(),new File(data[0]),Globals.prefs,false,false,Globals.prefs.get("defaultEncoding"),false);
        if (!session.getWriter().couldEncodeAll())         System.err.println(Globals.lang("Warning") + ": " + Globals.lang("The chosen encoding '%0' could not encode the following characters: ",session.getEncoding())+ session.getWriter().getProblemCharacters());
        session.commit();
      }
 catch (      SaveException ex) {
        System.err.println(Globals.lang("Could not save file") + " '" + data[0]+ "': "+ ex.getMessage());
      }
    }
  }
 else   System.err.println(Globals.lang("The output option depends on a valid import option."));
}
 else if (data.length == 2) {
  ParserResult pr=loaded.elementAt(loaded.size() - 1);
  File theFile=pr.getFile();
  if (!theFile.isAbsolute())   theFile=theFile.getAbsoluteFile();
  MetaData metaData=pr.getMetaData();
  metaData.setFile(theFile);
  Globals.prefs.fileDirForDatabase=metaData.getFileDirectory(GUIGlobals.FILE_FIELD);
  Globals.prefs.databaseFile=metaData.getFile();
  System.out.println(Globals.lang("Exporting") + ": " + data[0]);
  IExportFormat format=ExportFormats.getExportFormat(data[1]);
  if (format != null) {
    try {
      format.performExport(pr.getDatabase(),pr.getMetaData(),data[0],pr.getEncoding(),null);
    }
 catch (    Exception ex) {
      System.err.println(Globals.lang("Could not export file") + " '" + data[0]+ "': "+ ex.getMessage());
    }
  }
 else   System.err.println(Globals.lang("Unknown export format") + ": " + data[1]);
}
}
 else System.err.println(Globals.lang("The output option depends on a valid import option."));
}
if (cli.exportPrefs.isInvoked()) {
try {
Globals.prefs.exportPreferences(cli.exportPrefs.getStringValue());
}
 catch (IOException ex) {
Util.pr(ex.getMessage());
}
}
if (!cli.isBlank() && cli.auxImExport.isInvoked()) {
boolean usageMsg=false;
if (loaded.size() > 0) {
String[] data=cli.auxImExport.getStringValue().split(",");
if (data.length == 2) {
  ParserResult pr=loaded.firstElement();
  AuxCommandLine acl=new AuxCommandLine(data[0],pr.getDatabase());
  BibtexDatabase newBase=acl.perform();
  boolean notSavedMsg=false;
  if (newBase != null) {
    if (newBase.getEntryCount() > 0) {
      String subName=Util.getCorrectFileName(data[1],"bib");
      try {
        System.out.println(Globals.lang("Saving") + ": " + subName);
        SaveSession session=FileActions.saveDatabase(newBase,new MetaData(),new File(subName),Globals.prefs,false,false,Globals.prefs.get("defaultEncoding"),false);
        if (!session.getWriter().couldEncodeAll())         System.err.println(Globals.lang("Warning") + ": " + Globals.lang("The chosen encoding '%0' could not encode the following characters: ",session.getEncoding())+ session.getWriter().getProblemCharacters());
        session.commit();
      }
 catch (      SaveException ex) {
        System.err.println(Globals.lang("Could not save file") + " '" + subName+ "': "+ ex.getMessage());
      }
      notSavedMsg=true;
    }
  }
  if (!notSavedMsg)   System.out.println(Globals.lang("no database generated"));
}
 else usageMsg=true;
}
 else usageMsg=true;
if (usageMsg) {
System.out.println(Globals.lang("no base-bibtex-file specified"));
System.out.println(Globals.lang("usage") + " :");
System.out.println("jabref --aux infile[.aux],outfile[.bib] base-bibtex-file");
}
}
return loaded;
}
