{
  cli=new JabRefCLI(args);
  if (initialStartup && cli.isShowVersion()) {
    cli.displayVersion();
  }
  if (initialStartup && cli.isHelp()) {
    cli.printUsage();
    return null;
  }
  boolean commandMode=cli.isDisableGui() || cli.isFetcherEngine();
  if (cli.isPreferencesReset()) {
    String value=cli.getPreferencesReset();
    if (value.trim().equals("all")) {
      try {
        System.out.println(Localization.lang("Setting all preferences to default values."));
        Globals.prefs.clear();
      }
 catch (      BackingStoreException e) {
        System.err.println(Localization.lang("Unable to clear preferences."));
        e.printStackTrace();
      }
    }
 else {
      String[] keys=value.split(",");
      for (      String key : keys) {
        if (Globals.prefs.hasKey(key.trim())) {
          System.out.println(Localization.lang("Resetting preference key '%0'",key.trim()));
          Globals.prefs.clear(key.trim());
        }
 else {
          System.out.println(Localization.lang("Unknown preference key '%0'",key.trim()));
        }
      }
    }
  }
  if (cli.isPreferencesImport()) {
    try {
      Globals.prefs.importPreferences(cli.getPreferencesImport());
      BibtexEntryType.loadCustomEntryTypes(Globals.prefs);
      ExportFormats.initAllExports();
    }
 catch (    IOException ex) {
      LOGGER.error("Cannot import preferences",ex);
    }
  }
  GUIGlobals.setUpIconTheme();
  Vector<ParserResult> loaded=new Vector<ParserResult>();
  Vector<String> toImport=new Vector<String>();
  if (!cli.isBlank() && cli.getLeftOver().length > 0) {
    for (    String aLeftOver : cli.getLeftOver()) {
      boolean bibExtension=aLeftOver.toLowerCase().endsWith("bib");
      ParserResult pr=null;
      if (bibExtension) {
        pr=JabRef.openBibFile(aLeftOver,false);
      }
      if (pr == null || pr == ParserResult.INVALID_FORMAT) {
        if (initialStartup) {
          toImport.add(aLeftOver);
        }
 else {
          ParserResult res=JabRef.importToOpenBase(aLeftOver);
          if (res != null) {
            loaded.add(res);
          }
 else {
            loaded.add(ParserResult.INVALID_FORMAT);
          }
        }
      }
 else       if (pr != ParserResult.FILE_LOCKED) {
        loaded.add(pr);
      }
    }
  }
  if (!cli.isBlank() && cli.isFileImport()) {
    toImport.add(cli.getFileImport());
  }
  for (  String filenameString : toImport) {
    ParserResult pr=JabRef.importFile(filenameString);
    if (pr != null) {
      loaded.add(pr);
    }
  }
  if (!cli.isBlank() && cli.isImportToOpenBase()) {
    ParserResult res=JabRef.importToOpenBase(cli.getImportToOpenBase());
    if (res != null) {
      loaded.add(res);
    }
  }
  if (!cli.isBlank() && cli.isFetcherEngine()) {
    ParserResult res=fetch(cli.getFetcherEngine());
    if (res != null) {
      loaded.add(res);
    }
  }
  if (cli.isExportMatches()) {
    if (!loaded.isEmpty()) {
      String[] data=cli.getExportMatches().split(",");
      String searchTerm=data[0].replace("\\$"," ");
      ParserResult pr=loaded.elementAt(loaded.size() - 1);
      BibtexDatabase dataBase=pr.getDatabase();
      SearchManagerNoGUI smng=new SearchManagerNoGUI(searchTerm,dataBase);
      BibtexDatabase newBase=smng.getDBfromMatches();
      if (newBase != null && newBase.getEntryCount() > 0) {
        String formatName=null;
        IExportFormat format;
switch (data.length) {
case 3:
          formatName=data[2];
        break;
case 2:
      formatName="tablerefsabsbib";
    break;
default :
  System.err.println(Localization.lang("Output file missing").concat(". \n \t ").concat("Usage").concat(": ") + JabRefCLI.getExportMatchesSyntax());
return null;
}
format=ExportFormats.getExportFormat(formatName);
if (format != null) {
try {
System.out.println(Localization.lang("Exporting") + ": " + data[1]);
format.performExport(newBase,pr.getMetaData(),data[1],pr.getEncoding(),null);
}
 catch (Exception ex) {
System.err.println(Localization.lang("Could not export file") + " '" + data[1]+ "': "+ ex.getMessage());
}
}
 else {
System.err.println(Localization.lang("Unknown export format") + ": " + formatName);
}
}
 else {
System.err.println(Localization.lang("No search matches."));
}
}
 else {
System.err.println(Localization.lang("The output option depends on a valid input option."));
}
}
if (cli.isFileExport()) {
if (!loaded.isEmpty()) {
String[] data=cli.getFileExport().split(",");
if (data.length == 1) {
if (!loaded.isEmpty()) {
ParserResult pr=loaded.elementAt(loaded.size() - 1);
if (!pr.isInvalid()) {
try {
  System.out.println(Localization.lang("Saving") + ": " + data[0]);
  SaveSession session=FileActions.saveDatabase(pr.getDatabase(),pr.getMetaData(),new File(data[0]),Globals.prefs,false,false,Globals.prefs.get(JabRefPreferences.DEFAULT_ENCODING),false);
  if (!session.getWriter().couldEncodeAll()) {
    System.err.println(Localization.lang("Warning") + ": " + Localization.lang("The chosen encoding '%0' could not encode the following characters: ",session.getEncoding())+ session.getWriter().getProblemCharacters());
  }
  session.commit();
}
 catch (SaveException ex) {
  System.err.println(Localization.lang("Could not save file") + " '" + data[0]+ "': "+ ex.getMessage());
}
}
}
 else {
System.err.println(Localization.lang("The output option depends on a valid import option."));
}
}
 else if (data.length == 2) {
ParserResult pr=loaded.elementAt(loaded.size() - 1);
File theFile=pr.getFile();
if (!theFile.isAbsolute()) {
theFile=theFile.getAbsoluteFile();
}
MetaData metaData=pr.getMetaData();
metaData.setFile(theFile);
Globals.prefs.fileDirForDatabase=metaData.getFileDirectory(GUIGlobals.FILE_FIELD);
Globals.prefs.databaseFile=metaData.getFile();
System.out.println(Localization.lang("Exporting") + ": " + data[0]);
IExportFormat format=ExportFormats.getExportFormat(data[1]);
if (format != null) {
try {
format.performExport(pr.getDatabase(),pr.getMetaData(),data[0],pr.getEncoding(),null);
}
 catch (Exception ex) {
System.err.println(Localization.lang("Could not export file") + " '" + data[0]+ "': "+ ex.getMessage());
}
}
 else {
System.err.println(Localization.lang("Unknown export format") + ": " + data[1]);
}
}
}
 else {
System.err.println(Localization.lang("The output option depends on a valid import option."));
}
}
if (cli.isPreferencesExport()) {
try {
Globals.prefs.exportPreferences(cli.getPreferencesExport());
}
 catch (IOException ex) {
LOGGER.error("Cannot export preferences",ex);
}
}
if (!cli.isBlank() && cli.isAuxImport()) {
boolean usageMsg=false;
if (!loaded.isEmpty()) {
String[] data=cli.getAuxImport().split(",");
if (data.length == 2) {
ParserResult pr=loaded.firstElement();
AuxCommandLine acl=new AuxCommandLine(data[0],pr.getDatabase());
BibtexDatabase newBase=acl.perform();
boolean notSavedMsg=false;
if (newBase != null) {
if (newBase.getEntryCount() > 0) {
String subName=StringUtil.getCorrectFileName(data[1],"bib");
try {
  System.out.println(Localization.lang("Saving") + ": " + subName);
  SaveSession session=FileActions.saveDatabase(newBase,new MetaData(),new File(subName),Globals.prefs,false,false,Globals.prefs.get(JabRefPreferences.DEFAULT_ENCODING),false);
  if (!session.getWriter().couldEncodeAll()) {
    System.err.println(Localization.lang("Warning") + ": " + Localization.lang("The chosen encoding '%0' could not encode the following characters: ",session.getEncoding())+ session.getWriter().getProblemCharacters());
  }
  session.commit();
}
 catch (SaveException ex) {
  System.err.println(Localization.lang("Could not save file") + " '" + subName+ "': "+ ex.getMessage());
}
notSavedMsg=true;
}
}
if (!notSavedMsg) {
System.out.println(Localization.lang("no database generated"));
}
}
 else {
usageMsg=true;
}
}
 else {
usageMsg=true;
}
if (usageMsg) {
System.out.println(Localization.lang("no base-bibtex-file specified"));
System.out.println(Localization.lang("usage") + " :");
System.out.println("jabref --aux infile[.aux],outfile[.bib] base-bibtex-file");
}
}
return loaded;
}
