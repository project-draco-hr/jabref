{
  if (e.getValueIsAdjusting()) {
    return;
  }
  if (lastSelected != null) {
    reqLists.put(lastSelected,reqComp.getFields());
    optLists.put(lastSelected,optComp.getFields());
    if (biblatexMode) {
      opt2Lists.put(lastSelected,optComp2.getFields());
    }
  }
  String s=typeComp.getFirstSelected();
  if (s == null) {
    return;
  }
  List<String> rl=reqLists.get(s);
  if (rl == null) {
    BibtexEntryType type=BibtexEntryType.getType(s);
    if (type != null) {
      String[] rf=type.getRequiredFieldsForCustomization();
      List<String> req;
      if (rf != null) {
        req=java.util.Arrays.asList(rf);
      }
 else {
        req=new ArrayList<String>();
      }
      List<String> opt;
      if (!biblatexMode) {
        String[] of=type.getOptionalFields();
        if (of != null) {
          opt=java.util.Arrays.asList(of);
        }
 else {
          opt=new ArrayList<String>();
        }
      }
 else {
        String[] priOf=type.getPrimaryOptionalFields();
        if (priOf != null) {
          opt=java.util.Arrays.asList(priOf);
        }
 else {
          opt=new ArrayList<String>();
        }
        String[] secOpt=type.getSecondaryOptionalFields();
        List<String> opt2;
        if (secOpt != null) {
          opt2=java.util.Arrays.asList(secOpt);
        }
 else {
          opt2=new ArrayList<String>();
        }
        optComp2.setFields(opt2);
        optComp2.setEnabled(true);
      }
      reqComp.setFields(req);
      reqComp.setEnabled(true);
      optComp.setFields(opt);
      optComp.setEnabled(true);
    }
 else {
      reqComp.setFields(new ArrayList<String>());
      reqComp.setEnabled(true);
      optComp.setFields(new ArrayList<String>());
      optComp.setEnabled(true);
      if (biblatexMode) {
        optComp2.setFields(new ArrayList<String>());
        optComp2.setEnabled(true);
      }
      new FocusRequester(reqComp);
    }
  }
 else {
    reqComp.setFields(rl);
    optComp.setFields(optLists.get(s));
    if (biblatexMode) {
      optComp2.setFields(opt2Lists.get(s));
    }
  }
  lastSelected=s;
  typeComp.enable(s,changed.contains(lastSelected) && !defaulted.contains(lastSelected));
}
