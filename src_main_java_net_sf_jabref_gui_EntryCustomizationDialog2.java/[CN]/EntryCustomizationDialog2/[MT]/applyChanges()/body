{
  valueChanged(new ListSelectionEvent(new JList(),0,0,false));
  List<String> types=typeComp.getFields();
  for (  Map.Entry<String,List<String>> stringListEntry : reqLists.entrySet()) {
    if (!types.contains(stringListEntry.getKey())) {
      continue;
    }
    List<String> reqFields=stringListEntry.getValue();
    List<String> optFields=optLists.get(stringListEntry.getKey());
    List<String> opt2Fields=opt2Lists.get(stringListEntry.getKey());
    String[] reqStr=new String[reqFields.size()];
    reqStr=reqFields.toArray(reqStr);
    String[] optStr=new String[optFields.size()];
    optStr=optFields.toArray(optStr);
    String[] opt2Str;
    if (opt2Fields != null) {
      opt2Str=opt2Fields.toArray(new String[opt2Fields.size()]);
    }
 else {
      opt2Str=new String[0];
    }
    boolean changesMade=true;
    if (defaulted.contains(stringListEntry.getKey())) {
      String nm=StringUtil.nCase(stringListEntry.getKey());
      BibtexEntryType.removeType(nm);
      updateTypesForEntries(nm);
      continue;
    }
    BibtexEntryType oldType=BibtexEntryType.getType(stringListEntry.getKey());
    if (oldType != null) {
      String[] oldReq=oldType.getRequiredFields();
      String[] oldOpt=oldType.getOptionalFields();
      if (biblatexMode) {
        String[] priOpt=oldType.getPrimaryOptionalFields();
        String[] secOpt=Util.getRemainder(oldOpt,priOpt);
        if (equalArrays(oldReq,reqStr) && equalArrays(oldOpt,optStr) && equalArrays(secOpt,opt2Str)) {
          changesMade=false;
        }
      }
 else       if (equalArrays(oldReq,reqStr) && equalArrays(oldOpt,optStr)) {
        changesMade=false;
      }
    }
    if (changesMade) {
      CustomEntryType typ=biblatexMode ? new CustomEntryType(StringUtil.nCase(stringListEntry.getKey()),reqStr,optStr,opt2Str) : new CustomEntryType(StringUtil.nCase(stringListEntry.getKey()),reqStr,optStr);
      BibtexEntryType.ALL_TYPES.put(stringListEntry.getKey().toLowerCase(),typ);
      updateTypesForEntries(typ.getName());
    }
  }
  Set<Object> toRemove=new HashSet<Object>();
  for (  String o : BibtexEntryType.ALL_TYPES.keySet()) {
    if (!types.contains(o)) {
      toRemove.add(o);
    }
  }
  if (!toRemove.isEmpty()) {
    for (    Object aToRemove : toRemove) {
      typeDeletion((String)aToRemove);
    }
  }
  updateTables();
}
