{
  exportFormats.clear();
  putFormat(new ExportFormat(Globals.lang("HTML"),"html","html",null,".html"));
  putFormat(new ExportFormat(Globals.lang("Simple HTML"),"simplehtml","simplehtml",null,".html"));
  putFormat(new ExportFormat(Globals.lang("Docbook"),"docbook","docbook",null,".xml"));
  putFormat(new ExportFormat(Globals.lang("BibTeXML"),"bibtexml","bibtexml",null,".xml"));
  putFormat(new ModsExportFormat());
  putFormat(new ExportFormat(Globals.lang("HTML table"),"tablerefs","tablerefs","tablerefs",".html"));
  putFormat(new ExportFormat(Globals.lang("HTML table (with Abstract & BibTeX)"),"tablerefsabsbib","tablerefsabsbib","tablerefsabsbib",".html"));
  putFormat(new ExportFormat(Globals.lang("Harvard RTF"),"harvard","harvard","harvard",".rtf"));
  putFormat(new ExportFormat(Globals.lang("Endnote"),"endnote","EndNote","endnote",".txt"));
  putFormat(new OpenOfficeDocumentCreator());
  putFormat(new OpenDocumentSpreadsheetCreator());
  putFormat(new MSBibExportFormat());
  putFormat(new MySqlExport());
  JabRefPlugin plugin=JabRefPlugin.getInstance(PluginCore.getManager());
  if (plugin != null) {
    for (    ExportFormatTemplateExtension e : plugin.getExportFormatTemplateExtensions()) {
      ExportFormat format=PluginBasedExportFormat.getFormat(e);
      if (format != null) {
        putFormat(format);
      }
    }
    for (    final ExportFormatExtension e : plugin.getExportFormatExtensions()) {
      putFormat(new IExportFormat(){
        public String getConsoleName(){
          return e.getConsoleName();
        }
        public String getDisplayName(){
          return e.getDisplayName();
        }
        public FileFilter getFileFilter(){
          return new ExportFileFilter(this,e.getExtension());
        }
        IExportFormat wrapped;
        public void performExport(        BibtexDatabase database,        MetaData metaData,        String file,        String encoding,        Set<String> entryIds) throws Exception {
          if (wrapped == null)           wrapped=e.getExportFormat();
          wrapped.performExport(database,metaData,file,encoding,entryIds);
        }
      }
);
    }
    for (    ExportFormatProviderExtension e : plugin.getExportFormatProviderExtensions()) {
      IExportFormatProvider formatProvider=e.getFormatProvider();
      for (      IExportFormat exportFormat : formatProvider.getExportFormats()) {
        putFormat(exportFormat);
      }
    }
  }
  for (  IExportFormat format : Globals.prefs.customExports.getCustomExportFormats().values()) {
    putFormat(format);
  }
}
