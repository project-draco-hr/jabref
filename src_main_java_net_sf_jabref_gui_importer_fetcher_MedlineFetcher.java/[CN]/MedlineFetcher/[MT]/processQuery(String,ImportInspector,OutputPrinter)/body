{
  try {
    shouldContinue=true;
    String cleanQuery=query.trim().replace(';',',');
    if (NUMBER_PATTERN.matcher(cleanQuery).find()) {
      status.setStatus(Localization.lang("Fetching Medline by id..."));
      List<BibEntry> bibs=fetchMedline(cleanQuery,status);
      if (bibs.isEmpty()) {
        status.showMessage(Localization.lang("No references found"),Localization.lang("Search %0",getTitle()),JOptionPane.INFORMATION_MESSAGE);
        return false;
      }
      for (      BibEntry entry : bibs) {
        dialog.addEntry(entry);
      }
      return true;
    }
    if (!query.isEmpty()) {
      status.setStatus(Localization.lang("Fetching Medline by term..."));
      String searchTerm=toSearchTerm(query);
      SearchResult result=getIds(searchTerm,0,1);
      if (result.count == 0) {
        status.showMessage(Localization.lang("No references found"),Localization.lang("Search %0",getTitle()),JOptionPane.INFORMATION_MESSAGE);
        return false;
      }
      int numberToFetch=result.count;
      if (numberToFetch > MedlineFetcher.PACING) {
        boolean numberEntered=false;
        do {
          String strCount=JOptionPane.showInputDialog(Localization.lang("%0 references found. Number of references to fetch?",String.valueOf(numberToFetch)));
          if (strCount == null) {
            status.setStatus(Localization.lang("%0 import canceled",getTitle()));
            return false;
          }
          try {
            numberToFetch=Integer.parseInt(strCount.trim());
            numberEntered=true;
          }
 catch (          NumberFormatException ex) {
            status.showMessage(Localization.lang("Please enter a valid number"));
          }
        }
 while (!numberEntered);
      }
      for (int i=0; i < numberToFetch && shouldContinue; i+=MedlineFetcher.PACING) {
        int noToFetch=Math.min(MedlineFetcher.PACING,numberToFetch - i);
        result=getIds(searchTerm,i,noToFetch);
        List<BibEntry> bibs=fetchMedline(result.ids,status);
        for (        BibEntry entry : bibs) {
          dialog.addEntry(entry);
        }
        dialog.setProgress(i + noToFetch,numberToFetch);
      }
      return true;
    }
 else {
      status.showMessage(Localization.lang("Please enter a comma separated list of Medline IDs (numbers) or search terms."),Localization.lang("Search %0",getTitle()) + ": " + Localization.lang("Input error"),JOptionPane.ERROR_MESSAGE);
      return false;
    }
  }
 catch (  IOException e) {
    LOGGER.error("Error while fetching from " + getTitle(),e);
    status.showMessage(e.getLocalizedMessage());
    ((ImportInspectionDialog)dialog).showErrorMessage(this.getTitle(),e.getLocalizedMessage());
  }
  return false;
}
