{
  if (!fileType.extension.equals("pdf")) {
    return false;
  }
  List<BibtexEntry> xmpEntriesInFile;
  try {
    xmpEntriesInFile=XMPUtil.readXMP(fileName);
  }
 catch (  Exception e) {
    return false;
  }
  if ((xmpEntriesInFile == null) || (xmpEntriesInFile.size() == 0)) {
    return false;
  }
  JLabel confirmationMessage=new JLabel(Globals.lang("The PDF contains one or several bibtex-records.\nDo you want to import these as new entries into the current database?"));
  int reply=JOptionPane.showConfirmDialog(frame,confirmationMessage,Globals.lang("XMP metadata found in PDF: %0",fileName),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
  if (reply == JOptionPane.CANCEL_OPTION) {
    return true;
  }
  if (reply == JOptionPane.NO_OPTION) {
    return false;
  }
  boolean isSingle=xmpEntriesInFile.size() == 1;
  BibtexEntry single=(isSingle ? xmpEntriesInFile.get(0) : null);
  boolean success=true;
  String destFilename;
  if (linkInPlace.isSelected()) {
    destFilename=Util.shortenFileName(new File(fileName),panel.metaData().getFileDirectory(GUIGlobals.FILE_FIELD)).toString();
  }
 else {
    if (renameCheckBox.isSelected()) {
      destFilename=fileName;
    }
 else {
      destFilename=single.getCiteKey() + "." + fileType.extension;
    }
    if (copyRadioButton.isSelected()) {
      success=doCopy(fileName,fileType,destFilename,edits);
    }
 else     if (moveRadioButton.isSelected()) {
      success=doMove(fileName,fileType,destFilename,edits);
    }
  }
  if (success) {
    for (    BibtexEntry aXmpEntriesInFile : xmpEntriesInFile) {
      try {
        aXmpEntriesInFile.setId(Util.createNeutralId());
        edits.addEdit(new UndoableInsertEntry(panel.getDatabase(),aXmpEntriesInFile,panel));
        panel.getDatabase().insertEntry(aXmpEntriesInFile);
        doLink(aXmpEntriesInFile,fileType,destFilename,true,edits);
      }
 catch (      KeyCollisionException ignored) {
      }
    }
    panel.markBaseChanged();
    panel.updateEntryEditorIfShowing();
  }
  return true;
}
