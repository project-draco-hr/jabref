{
{
    BibtexEntry e=t1BibtexEntry();
    prefs.putBoolean("useXmpPrivacyFilter",true);
    prefs.putStringArray(JabRefPreferences.XMP_PRIVACY_FILTERS,new String[]{"author","title","note"});
    XMPUtil.writeXMP(pdfFile,e,null);
    List<BibtexEntry> l=XMPUtil.readXMP(pdfFile.getAbsoluteFile());
    Assert.assertEquals(1,l.size());
    BibtexEntry x=l.get(0);
    Set<String> expectedFields=new HashSet<String>(Arrays.asList("bibtexkey","booktitle","owner","timestamp","url","year"));
    Assert.assertEquals(expectedFields,x.getFieldNames());
  }
  prefs.putBoolean("useXmpPrivacyFilter",true);
  prefs.putStringArray(JabRefPreferences.XMP_PRIVACY_FILTERS,new String[]{"author;title;note;booktitle;year;owner;timestamp"});
  BibtexEntry e=t1BibtexEntry();
  XMPUtil.writeXMP(pdfFile,e,null);
  List<BibtexEntry> l=XMPUtil.readXMP(pdfFile.getAbsoluteFile());
  Assert.assertEquals(1,l.size());
  BibtexEntry x=l.get(0);
  Set<String> ts=x.getFieldNames();
  Assert.assertEquals(8,ts.size());
  ts.contains("bibtextype");
  ts.contains("bibtexkey");
  ts.contains("year");
  ts.contains("url");
}
