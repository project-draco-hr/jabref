{
  String bracketBefore=(String)citProperties.get("BracketBefore");
  if (inList && (citProperties.get("BracketBeforeInList") != null)) {
    bracketBefore=(String)citProperties.get("BracketBeforeInList");
  }
  String bracketAfter=(String)citProperties.get("BracketAfter");
  if (inList && (citProperties.get("BracketAfterInList") != null)) {
    bracketAfter=(String)citProperties.get("BracketAfterInList");
  }
  int[] lNum=new int[number.length];
  for (int i=0; i < lNum.length; i++) {
    lNum[i]=number[i];
  }
  Arrays.sort(lNum);
  StringBuilder sb=new StringBuilder(bracketBefore);
  int combineFrom=-1, written=0;
  for (int i=0; i < lNum.length; i++) {
    int i1=lNum[i];
    if (combineFrom < 0) {
      if ((i < lNum.length - 1) && (lNum[i + 1] == i1 + 1))       combineFrom=i1;
 else {
        if (i > 0)         sb.append((String)citProperties.get("CitationSeparator"));
        sb.append(lNum[i] > 0 ? String.valueOf(lNum[i]) : UNDEFINED_CITATION_MARKER);
        written++;
      }
    }
 else {
      if ((i == lNum.length - 1) || (lNum[i + 1] != i1 + 1)) {
        if (written > 0)         sb.append((String)citProperties.get("CitationSeparator"));
        if ((minGroupingCount > 0) && (i1 + 1 - combineFrom >= minGroupingCount)) {
          sb.append(combineFrom);
          sb.append((String)citProperties.get("GroupedNumbersSeparator"));
          sb.append(i1);
          written++;
        }
 else {
          for (int jj=combineFrom; jj <= i1; jj++) {
            sb.append(jj);
            if (jj < i1)             sb.append((String)citProperties.get("CitationSeparator"));
            written++;
          }
        }
        combineFrom=-1;
      }
    }
  }
  sb.append(bracketAfter);
  return sb.toString();
}
