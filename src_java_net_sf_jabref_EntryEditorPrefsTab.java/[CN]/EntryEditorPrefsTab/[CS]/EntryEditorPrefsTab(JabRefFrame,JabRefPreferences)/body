{
  _prefs=prefs;
  _frame=frame;
  setLayout(new BorderLayout());
  autoOpenForm=new JCheckBox(Globals.lang("Open editor when a new entry is created"));
  defSource=new JCheckBox(Globals.lang("Show BibTeX source by default"));
  showSource=new JCheckBox(Globals.lang("Show BibTeX source panel"));
  emacsMode=new JCheckBox(Globals.lang("Use Emacs key bindings"));
  emacsRebindCtrlA=new JCheckBox(Globals.lang("Rebind C-a, too"));
  disableOnMultiple=new JCheckBox(Globals.lang("Disable entry editor when multiple entries are selected"));
  autoComplete=new JCheckBox(Globals.lang("Enable word/name autocompletion"));
  shortestToComplete=new JSpinner(new SpinnerNumberModel(prefs.getInt(JabRefPreferences.SHORTEST_TO_COMPLETE),1,5,1));
  autoCompFF=new JRadioButton(Globals.lang("Autocomplete names in 'Firstname Lastname' format only"));
  autoCompLF=new JRadioButton(Globals.lang("Autocomplete names in 'Lastname, Firstname' format only"));
  autoCompBoth=new JRadioButton(Globals.lang("Autocomplete names in both formats"));
  ButtonGroup bg=new ButtonGroup();
  bg.add(autoCompLF);
  bg.add(autoCompFF);
  bg.add(autoCompBoth);
  autoCompFirstNameMode_Full=new JRadioButton(Globals.lang("Use full firstname whenever possible"));
  autoCompFirstNameMode_Abbr=new JRadioButton(Globals.lang("Use abbreviated firstname whenever possible"));
  autoCompFirstNameMode_Both=new JRadioButton(Globals.lang("Use abbreviated and full firstname"));
  ButtonGroup bg_firstNameMode=new ButtonGroup();
  bg_firstNameMode.add(autoCompFirstNameMode_Full);
  bg_firstNameMode.add(autoCompFirstNameMode_Abbr);
  bg_firstNameMode.add(autoCompFirstNameMode_Both);
  Insets marg=new Insets(0,20,3,0);
  defSource.setMargin(marg);
  showSource.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      defSource.setEnabled(showSource.isSelected());
    }
  }
);
  emacsRebindCtrlA.setMargin(marg);
  emacsMode.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      emacsRebindCtrlA.setEnabled(emacsMode.isSelected());
    }
  }
);
  autoCompFields=new JTextField(40);
  autoComplete.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      setAutoCompleteElementsEnabled(autoComplete.isSelected());
    }
  }
);
  FormLayout layout=new FormLayout("8dlu, left:pref, 8dlu, fill:150dlu, 4dlu, fill:pref","pref, 6dlu, pref, 6dlu, pref, 6dlu, pref, 6dlu, pref, 6dlu, " + "pref, 6dlu, pref, 6dlu, pref, 6dlu, pref, 6dlu, pref, 6dlu, " + "pref, pref, pref, pref, 6dlu, pref, pref, pref, pref");
  DefaultFormBuilder builder=new DefaultFormBuilder(layout);
  CellConstraints cc=new CellConstraints();
  builder.addSeparator(Globals.lang("Editor options"),cc.xyw(1,1,5));
  builder.add(autoOpenForm,cc.xy(2,3));
  builder.add(disableOnMultiple,cc.xy(2,5));
  builder.add(showSource,cc.xy(2,7));
  builder.add(defSource,cc.xy(2,9));
  builder.add(emacsMode,cc.xy(2,11));
  builder.add(emacsRebindCtrlA,cc.xy(2,13));
  builder.addSeparator(Globals.lang("Autocompletion options"),cc.xyw(1,15,5));
  builder.add(autoComplete,cc.xy(2,17));
  DefaultFormBuilder builder3=new DefaultFormBuilder(new FormLayout("left:pref, 4dlu, fill:150dlu",""));
  JLabel label=new JLabel(Globals.lang("Use autocompletion for the following fields") + ":");
  builder3.append(label);
  builder3.append(autoCompFields);
  JLabel label2=new JLabel(Globals.lang("Autocomplete after following number of characters") + ":");
  builder3.append(label2);
  builder3.append(shortestToComplete);
  builder.add(builder3.getPanel(),cc.xyw(2,19,3));
  builder.addSeparator(Globals.lang("Name format used for autocompletion"),cc.xyw(2,21,4));
  builder.add(autoCompFF,cc.xy(2,22));
  builder.add(autoCompLF,cc.xy(2,23));
  builder.add(autoCompBoth,cc.xy(2,24));
  builder.addSeparator(Globals.lang("Treatment of first names"),cc.xyw(2,26,4));
  builder.add(autoCompFirstNameMode_Abbr,cc.xy(2,27));
  builder.add(autoCompFirstNameMode_Full,cc.xy(2,28));
  builder.add(autoCompFirstNameMode_Both,cc.xy(2,29));
  JPanel pan=builder.getPanel();
  pan.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  add(pan,BorderLayout.CENTER);
}
