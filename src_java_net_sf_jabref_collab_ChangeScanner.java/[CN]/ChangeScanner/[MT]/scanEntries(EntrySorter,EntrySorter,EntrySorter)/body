{
  int piv1=0, piv2=0;
  HashSet used=new HashSet(disk.getEntryCount());
  HashSet notMatched=new HashSet(tmp.getEntryCount());
  mainLoop:   for (piv1=0; piv1 < tmp.getEntryCount(); piv1++) {
    double comp=-1;
    if (!used.contains("" + piv2)) {
      comp=Util.compareEntriesStrictly(tmp.getEntryAt(piv1),disk.getEntryAt(piv2));
    }
    if (comp > 1) {
      used.add("" + piv2);
      piv2++;
      continue mainLoop;
    }
    if (piv2 < disk.getEntryCount() - 1) {
      for (int i=piv2 + 1; i < disk.getEntryCount(); i++) {
        if (!used.contains("" + i))         comp=Util.compareEntriesStrictly(tmp.getEntryAt(piv1),disk.getEntryAt(i));
 else         comp=-1;
        if (comp > 1) {
          used.add("" + i);
          continue mainLoop;
        }
      }
    }
    notMatched.add(new Integer(piv1));
  }
  if (notMatched.size() > 0) {
    fuzzyLoop:     for (Iterator it=notMatched.iterator(); it.hasNext(); ) {
      Integer integ=(Integer)it.next();
      piv1=integ.intValue();
      int bestMatchI=-1;
      double bestMatch=0;
      double comp=-1;
      if (piv2 < disk.getEntryCount() - 1) {
        for (int i=piv2; i < disk.getEntryCount(); i++) {
          if (!used.contains("" + i)) {
            comp=Util.compareEntriesStrictly(tmp.getEntryAt(piv1),disk.getEntryAt(i));
          }
 else           comp=-1;
          if (comp > bestMatch) {
            bestMatch=comp;
            bestMatchI=i;
          }
        }
      }
      if (bestMatch > MATCH_THRESHOLD) {
        used.add("" + bestMatchI);
        it.remove();
        EntryChange ec=new EntryChange(bestFit(tmp,mem,piv1),tmp.getEntryAt(piv1),disk.getEntryAt(bestMatchI));
        changes.add(ec);
      }
 else {
        EntryDeleteChange ec=new EntryDeleteChange(bestFit(tmp,mem,piv1),tmp.getEntryAt(piv1));
        changes.add(ec);
      }
    }
  }
  if (used.size() < disk.getEntryCount()) {
    for (int i=0; i < disk.getEntryCount(); i++) {
      if (!used.contains("" + i)) {
        EntryAddChange ec=new EntryAddChange(disk.getEntryAt(i));
        changes.add(ec);
      }
    }
  }
}
