{
  int nTmp=onTmp.getStringCount(), nDisk=onDisk.getStringCount();
  if ((nTmp == 0) && (nDisk == 0))   return;
  HashSet used=new HashSet();
  HashSet usedInMem=new HashSet();
  HashSet notMatched=new HashSet(onTmp.getStringCount());
  mainLoop:   for (Iterator i=onTmp.getStringKeySet().iterator(); i.hasNext(); ) {
    Object tmpId=i.next();
    BibtexString tmp=onTmp.getString(tmpId);
    for (Iterator j=onDisk.getStringKeySet().iterator(); j.hasNext(); ) {
      Object diskId=j.next();
      if (!used.contains(diskId)) {
        BibtexString disk=onDisk.getString(diskId);
        if (disk.getName().equals(tmp.getName())) {
          if ((tmp.getContent() != null) && !tmp.getContent().equals(disk.getContent())) {
            BibtexString mem=findString(inMem,tmp.getName(),usedInMem);
            if (mem != null)             changes.add(new StringChange(mem,tmp.getName(),mem.getContent(),tmp.getContent(),disk.getContent()));
 else             changes.add(new StringChange(null,tmp.getName(),null,tmp.getContent(),disk.getContent()));
          }
          used.add(diskId);
          continue mainLoop;
        }
      }
    }
    notMatched.add(tmp.getId());
  }
  if (notMatched.size() > 0) {
    for (Iterator i=notMatched.iterator(); i.hasNext(); ) {
      Object nmId=i.next();
      BibtexString tmp=onTmp.getString(nmId);
      String tmpContent=tmp.getContent();
      for (Iterator j=onDisk.getStringKeySet().iterator(); j.hasNext(); ) {
        Object diskId=j.next();
        if (!used.contains(diskId)) {
          BibtexString disk=onDisk.getString(diskId);
          if (disk.getContent().equals(tmp.getContent())) {
            BibtexString bsMem=null;
            findInMem:             for (Iterator k=inMem.getStringKeySet().iterator(); k.hasNext(); ) {
              Object memId=k.next();
              BibtexString bsMem_cand=inMem.getString(memId);
              if (bsMem_cand.getContent().equals(disk.getContent()) && !usedInMem.contains(memId)) {
                usedInMem.add(memId);
                bsMem=bsMem_cand;
                break findInMem;
              }
            }
            changes.add(new StringNameChange(bsMem,bsMem.getName(),tmp.getName(),disk.getName(),tmp.getContent()));
            i.remove();
            used.add(diskId);
            System.out.println(onDisk.getString(diskId).getName());
          }
        }
      }
    }
  }
  if (notMatched.size() > 0) {
    for (Iterator i=notMatched.iterator(); i.hasNext(); ) {
      Object nmId=i.next();
      BibtexString tmp=onTmp.getString(nmId);
      BibtexString mem=findString(inMem,tmp.getName(),usedInMem);
      if (mem != null) {
        changes.add(new StringRemoveChange(tmp,mem));
      }
    }
  }
  System.out.println(used.size());
  for (Iterator i=onDisk.getStringKeySet().iterator(); i.hasNext(); ) {
    Object diskId=i.next();
    if (!used.contains(diskId)) {
      BibtexString disk=onDisk.getString(diskId);
      used.add(diskId);
      changes.add(new StringAddChange(disk));
    }
  }
}
