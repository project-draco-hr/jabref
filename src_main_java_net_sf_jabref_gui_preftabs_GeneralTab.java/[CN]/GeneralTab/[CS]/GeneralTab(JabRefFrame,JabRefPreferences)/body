{
  this.prefs=prefs;
  setLayout(new BorderLayout());
  allowEditing=new JCheckBox(Localization.lang("Allow editing in table cells"));
  memoryStick=new JCheckBox(Localization.lang("Load and Save preferences from/to jabref.xml on start-up (memory stick mode)"));
  defSort=new JCheckBox(Localization.lang("Sort Automatically"));
  ctrlClick=new JCheckBox(Localization.lang("Open right-click menu with Ctrl+left button"));
  useOwner=new JCheckBox(Localization.lang("Mark new entries with owner name") + ':');
  useTimeStamp=new JCheckBox(Localization.lang("Mark new entries with addition date") + ". " + Localization.lang("Date format")+ ':');
  useTimeStamp.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent arg0){
      updateTimeStamp.setEnabled(useTimeStamp.isSelected());
    }
  }
);
  updateTimeStamp=new JCheckBox(Localization.lang("Update timestamp on modification"));
  overwriteOwner=new JCheckBox(Localization.lang("Overwrite"));
  overwriteTimeStamp=new JCheckBox(Localization.lang("Overwrite"));
  overwriteOwner.setToolTipText(Localization.lang("If a pasted or imported entry already has " + "the field set, overwrite."));
  overwriteTimeStamp.setToolTipText(Localization.lang("If a pasted or imported entry already has " + "the field set, overwrite."));
  keyDuplicateWarningDialog=new JCheckBox(Localization.lang("Show warning dialog when a duplicate BibTeX key is entered"));
  keyEmptyWarningDialog=new JCheckBox(Localization.lang("Show warning dialog when an empty BibTeX key is entered"));
  enforceLegalKeys=new JCheckBox(Localization.lang("Enforce legal characters in BibTeX keys"));
  confirmDelete=new JCheckBox(Localization.lang("Show confirmation dialog when deleting entries"));
  useImportInspector=new JCheckBox(Localization.lang("Display imported entries in an inspection window before they are added."));
  useImportInspectorForSingle=new JCheckBox(Localization.lang("Use inspection window also when a single entry is imported."));
  markImportedEntries=new JCheckBox(Localization.lang("Mark entries imported into an existing database"));
  unmarkAllEntriesBeforeImporting=new JCheckBox(Localization.lang("Unmark all entries before importing new entries into an existing database"));
  defOwnerField=new JTextField();
  timeStampFormat=new JTextField();
  timeStampField=new JTextField();
  HelpAction ownerHelp=new HelpAction(frame.helpDiag,GUIGlobals.ownerHelp,Localization.lang("Help"),IconTheme.getImage("helpSmall"));
  HelpAction timeStampHelp=new HelpAction(frame.helpDiag,GUIGlobals.timeStampHelp,Localization.lang("Help"),IconTheme.getImage("helpSmall"));
  inspectionWarnDupli=new JCheckBox(Localization.lang("Warn about unresolved duplicates when closing inspection window"));
  Insets marg=new Insets(0,12,3,0);
  useImportInspectorForSingle.setMargin(marg);
  inspectionWarnDupli.setMargin(marg);
  useImportInspector.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent event){
      useImportInspectorForSingle.setEnabled(useImportInspector.isSelected());
      inspectionWarnDupli.setEnabled(useImportInspector.isSelected());
    }
  }
);
  FormLayout layout=new FormLayout("8dlu, 1dlu, left:170dlu, 4dlu, fill:pref, 4dlu, fill:pref, 4dlu, left:pref, 4dlu, left:pref, 4dlu, left:pref","");
  DefaultFormBuilder builder=new DefaultFormBuilder(layout);
  builder.appendSeparator(Localization.lang("General"));
  builder.nextLine();
  builder.append(useImportInspector,13);
  builder.nextLine();
  builder.append(new JPanel());
  builder.append(useImportInspectorForSingle,11);
  builder.nextLine();
  builder.append(new JPanel());
  builder.append(inspectionWarnDupli,11);
  builder.nextLine();
  builder.append(ctrlClick,13);
  builder.nextLine();
  builder.append(confirmDelete,13);
  builder.nextLine();
  builder.append(keyDuplicateWarningDialog,13);
  builder.nextLine();
  builder.append(keyEmptyWarningDialog,13);
  builder.nextLine();
  builder.append(enforceLegalKeys,13);
  builder.nextLine();
  builder.append(memoryStick,13);
  builder.append(useOwner,3);
  builder.append(defOwnerField);
  builder.append(overwriteOwner);
  builder.append(new JPanel(),3);
  JButton help=new JButton(ownerHelp);
  help.setText(null);
  help.setPreferredSize(new Dimension(24,24));
  builder.append(help);
  builder.nextLine();
  builder.append(useTimeStamp,3);
  builder.append(timeStampFormat);
  builder.append(overwriteTimeStamp);
  builder.append(Localization.lang("Field name") + ':');
  builder.append(timeStampField);
  help=new JButton(timeStampHelp);
  help.setText(null);
  help.setPreferredSize(new Dimension(24,24));
  builder.append(help);
  builder.nextLine();
  builder.append(new JPanel());
  builder.append(updateTimeStamp,2);
  builder.nextLine();
  builder.append(markImportedEntries,13);
  builder.nextLine();
  builder.append(unmarkAllEntriesBeforeImporting,13);
  builder.nextLine();
  JLabel lab;
  lab=new JLabel(Localization.lang("Language") + ':');
  builder.append(lab,3);
  builder.append(language);
  builder.nextLine();
  lab=new JLabel(Localization.lang("Default encoding") + ':');
  builder.append(lab,3);
  builder.append(encodings);
  JPanel pan=builder.getPanel();
  pan.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  add(pan,BorderLayout.CENTER);
}
