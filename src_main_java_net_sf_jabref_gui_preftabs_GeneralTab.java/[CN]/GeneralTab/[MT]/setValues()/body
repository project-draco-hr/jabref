{
  useOwner.setSelected(prefs.getBoolean(JabRefPreferences.USE_OWNER));
  overwriteOwner.setSelected(prefs.getBoolean(JabRefPreferences.OVERWRITE_OWNER));
  useTimeStamp.setSelected(prefs.getBoolean(JabRefPreferences.USE_TIME_STAMP));
  overwriteTimeStamp.setSelected(prefs.getBoolean(JabRefPreferences.OVERWRITE_TIME_STAMP));
  updateTimeStamp.setSelected(prefs.getBoolean(JabRefPreferences.UPDATE_TIMESTAMP));
  updateTimeStamp.setEnabled(useTimeStamp.isSelected());
  enforceLegalKeys.setSelected(prefs.getBoolean(JabRefPreferences.ENFORCE_LEGAL_BIBTEX_KEY));
  memoryStick.setSelected(prefs.getBoolean(JabRefPreferences.MEMORY_STICK_MODE));
  confirmDelete.setSelected(prefs.getBoolean(JabRefPreferences.CONFIRM_DELETE));
  defOwnerField.setText(prefs.get(JabRefPreferences.DEFAULT_OWNER));
  timeStampFormat.setText(prefs.get(JabRefPreferences.TIME_STAMP_FORMAT));
  timeStampField.setText(prefs.get(JabRefPreferences.TIME_STAMP_FIELD));
  inspectionWarnDupli.setSelected(prefs.getBoolean(JabRefPreferences.WARN_ABOUT_DUPLICATES_IN_INSPECTION));
  markImportedEntries.setSelected(prefs.getBoolean(JabRefPreferences.MARK_IMPORTED_ENTRIES));
  unmarkAllEntriesBeforeImporting.setSelected(prefs.getBoolean(JabRefPreferences.UNMARK_ALL_ENTRIES_BEFORE_IMPORTING));
  if (Globals.prefs.getBoolean(JabRefPreferences.BIBLATEX_DEFAULT_MODE)) {
    biblatexMode.setSelectedItem(BibDatabaseMode.BIBLATEX);
  }
 else {
    biblatexMode.setSelectedItem(BibDatabaseMode.BIBTEX);
  }
  Charset enc=Globals.prefs.getDefaultEncoding();
  encodings.setSelectedItem(enc);
  String oldLan=prefs.get(JabRefPreferences.LANGUAGE);
  int ilk=0;
  for (  String lan : LANGUAGES.values()) {
    if (lan.equals(oldLan)) {
      language.setSelectedIndex(ilk);
    }
    ilk++;
  }
}
