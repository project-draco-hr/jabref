{
  boolean groupsTreePresent=false;
  Vector flatGroupsData=null;
  Vector treeGroupsData=null;
  int groupsVersionOnDisk=0;
  if (inData != null)   for (Iterator i=inData.keySet().iterator(); i.hasNext(); ) {
    String key=(String)i.next();
    data=new StringReader((String)inData.get(key));
    String unit;
    Vector orderedData=new Vector();
    try {
      while ((unit=getNextUnit(data)) != null) {
        orderedData.add(unit);
      }
    }
 catch (    IOException ex) {
      System.err.println("Weird error while parsing meta data.");
    }
    if (key.equals("groupsversion")) {
      if (orderedData.size() >= 1)       groupsVersionOnDisk=Integer.parseInt(orderedData.firstElement().toString());
    }
 else     if (key.equals("groupstree")) {
      groupsTreePresent=true;
      treeGroupsData=orderedData;
    }
 else     if (key.equals("groups")) {
      flatGroupsData=orderedData;
    }
 else {
      putData(key,orderedData);
    }
  }
  if (groupsTreePresent)   putGroups(treeGroupsData,db,groupsVersionOnDisk);
  if (!groupsTreePresent && flatGroupsData != null) {
    groupsRoot=VersionHandling.importFlatGroups(flatGroupsData);
  }
}
