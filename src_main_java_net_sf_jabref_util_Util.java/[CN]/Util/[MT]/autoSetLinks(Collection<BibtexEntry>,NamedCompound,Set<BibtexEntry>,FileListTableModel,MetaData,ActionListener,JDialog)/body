{
  final ExternalFileType[] types=Globals.prefs.getExternalFileTypeSelection();
  if (diag != null) {
    final JProgressBar prog=new JProgressBar(JProgressBar.HORIZONTAL,0,types.length - 1);
    final JLabel label=new JLabel(Globals.lang("Searching for files"));
    prog.setIndeterminate(true);
    prog.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
    diag.setTitle(Globals.lang("Autosetting links"));
    diag.getContentPane().add(prog,BorderLayout.CENTER);
    diag.getContentPane().add(label,BorderLayout.SOUTH);
    diag.pack();
    diag.setLocationRelativeTo(diag.getParent());
  }
  Runnable r=new Runnable(){
    @Override public void run(){
      ArrayList<File> dirs=new ArrayList<File>();
      String[] dirsS=metaData.getFileDirectory(GUIGlobals.FILE_FIELD);
      for (      String dirs1 : dirsS) {
        dirs.add(new File(dirs1));
      }
      Collection<String> extensions=new ArrayList<String>();
      for (      final ExternalFileType type : types) {
        extensions.add(type.getExtension());
      }
      Map<BibtexEntry,java.util.List<File>> result;
      if (Globals.prefs.getBoolean(JabRefPreferences.USE_REG_EXP_SEARCH_KEY)) {
        String regExp=Globals.prefs.get(JabRefPreferences.REG_EXP_SEARCH_EXPRESSION_KEY);
        result=RegExpFileSearch.findFilesForSet(entries,extensions,dirs,regExp);
      }
 else {
        result=Util.findAssociatedFiles(entries,extensions,dirs);
      }
      boolean foundAny=false;
      for (      BibtexEntry anEntry : result.keySet()) {
        FileListTableModel tableModel;
        String oldVal=anEntry.getField(GUIGlobals.FILE_FIELD);
        if (singleTableModel == null) {
          tableModel=new FileListTableModel();
          if (oldVal != null) {
            tableModel.setContent(oldVal);
          }
        }
 else {
          assert(entries.size() == 1);
          tableModel=singleTableModel;
        }
        List<File> files=result.get(anEntry);
        for (        File f : files) {
          f=FileUtil.shortenFileName(f,dirsS);
          boolean alreadyHas=false;
          for (int j=0; j < tableModel.getRowCount(); j++) {
            FileListEntry existingEntry=tableModel.getEntry(j);
            if (new File(existingEntry.getLink()).equals(f)) {
              alreadyHas=true;
              break;
            }
          }
          if (!alreadyHas) {
            foundAny=true;
            ExternalFileType type;
            int index=f.getPath().lastIndexOf('.');
            if ((index >= 0) && (index < (f.getPath().length() - 1))) {
              type=Globals.prefs.getExternalFileTypeByExt(f.getPath().substring(index + 1).toLowerCase());
            }
 else {
              type=new UnknownExternalFileType("");
            }
            FileListEntry flEntry=new FileListEntry(f.getName(),f.getPath(),type);
            tableModel.addEntry(tableModel.getRowCount(),flEntry);
            String newVal=tableModel.getStringRepresentation();
            if (newVal.length() == 0) {
              newVal=null;
            }
            if (ce != null) {
              UndoableFieldChange change=new UndoableFieldChange(anEntry,GUIGlobals.FILE_FIELD,oldVal,newVal);
              ce.addEdit(change);
            }
            if (singleTableModel == null) {
              anEntry.setField(GUIGlobals.FILE_FIELD,newVal);
            }
            if (changedEntries != null) {
              changedEntries.add(anEntry);
            }
          }
        }
      }
      final int id=foundAny ? 1 : 0;
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          if (diag != null) {
            diag.dispose();
          }
          if (callback != null) {
            callback.actionPerformed(new ActionEvent(this,id,""));
          }
        }
      }
);
    }
  }
;
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (diag != null) {
        diag.setVisible(true);
      }
    }
  }
);
  return r;
}
