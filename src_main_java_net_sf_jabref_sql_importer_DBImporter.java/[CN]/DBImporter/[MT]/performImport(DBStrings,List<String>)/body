{
  ArrayList<Object[]> result=new ArrayList<>();
  try (Connection conn=this.connectToDB(dbs)){
    Iterator<String> itLista=listOfDBs.iterator();
    String jabrefDBs="(";
    while (itLista.hasNext()) {
      jabrefDBs+='\'' + itLista.next() + "',";
    }
    jabrefDBs=jabrefDBs.substring(0,jabrefDBs.length() - 1) + ')';
    try (ResultSet rsDatabase=SQLUtil.queryAllFromTable(conn,"jabref_database WHERE database_name IN " + jabrefDBs)){
      while (rsDatabase.next()) {
        BibtexDatabase database=new BibtexDatabase();
        HashMap<String,EntryType> types=new HashMap<>();
        try (ResultSet rsEntryType=SQLUtil.queryAllFromTable(conn,"entry_types")){
          while (rsEntryType.next()) {
            types.put(rsEntryType.getString("entry_types_id"),EntryTypes.getType(rsEntryType.getString("label")));
          }
          rsEntryType.getStatement().close();
        }
         try (ResultSet rsColumns=this.readColumnNames(conn)){
          ArrayList<String> colNames=new ArrayList<>();
          while (rsColumns.next()) {
            if (!columnsNotConsideredForEntries.contains(rsColumns.getString(1))) {
              colNames.add(rsColumns.getString(1));
            }
          }
          rsColumns.getStatement().close();
          String database_id=rsDatabase.getString("database_id");
          HashMap<String,BibtexEntry> entries=new HashMap<>();
          try (ResultSet rsEntries=SQLUtil.queryAllFromTable(conn,"entries WHERE database_id= '" + database_id + "';")){
            while (rsEntries.next()) {
              String id=rsEntries.getString("entries_id");
              BibtexEntry entry=new BibtexEntry(IdGenerator.next(),types.get(rsEntries.getString("entry_types_id")));
              entry.setField(BibtexEntry.KEY_FIELD,rsEntries.getString("cite_key"));
              for (              String col : colNames) {
                String value=rsEntries.getString(col);
                if (value != null) {
                  col=col.charAt(col.length() - 1) == '_' ? col.substring(0,col.length() - 1) : col;
                  entry.setField(col,value);
                }
              }
              entries.put(id,entry);
              database.insertEntry(entry);
            }
            rsEntries.getStatement().close();
          }
           try (ResultSet rsStrings=SQLUtil.queryAllFromTable(conn,"strings WHERE database_id='" + database_id + '\'')){
            while (rsStrings.next()) {
              String label=rsStrings.getString("label");
              String content=rsStrings.getString("content");
              if (label.equals("@PREAMBLE")) {
                database.setPreamble(content);
              }
 else {
                BibtexString string=new BibtexString(IdGenerator.next(),label,content);
                database.addString(string);
              }
            }
            rsStrings.getStatement().close();
          }
           MetaData metaData=new MetaData();
          metaData.initializeNewDatabase();
          importGroupsTree(metaData,entries,conn,database_id);
          result.add(new Object[]{database,metaData,rsDatabase.getString("database_name")});
        }
       }
      rsDatabase.close();
    }
     conn.close();
    return result;
  }
 }
