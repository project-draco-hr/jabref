{
  Map<String,GroupTreeNode> groups=new HashMap<>();
  LinkedHashMap<GroupTreeNode,String> parentIds=new LinkedHashMap<>();
  GroupTreeNode rootNode=new GroupTreeNode(new AllEntriesGroup());
  try (Statement statement=SQLUtil.queryAllFromTable(conn,"groups WHERE database_id='" + database_id + "' ORDER BY groups_id");ResultSet rsGroups=statement.getResultSet()){
    while (rsGroups.next()) {
      AbstractGroup group=null;
      String typeId=findGroupTypeName(rsGroups.getString("group_types_id"),conn);
      if (typeId.equals(AllEntriesGroup.ID)) {
        groups.put(rsGroups.getString("groups_id"),rootNode);
      }
 else       if (typeId.equals(ExplicitGroup.ID)) {
        group=new ExplicitGroup(rsGroups.getString("label"),GroupHierarchyType.getByNumber(rsGroups.getInt("hierarchical_context")));
      }
 else       if (typeId.equals(KeywordGroup.ID)) {
        LOGGER.debug("Keyw: " + rsGroups.getBoolean("case_sensitive"));
        group=new KeywordGroup(rsGroups.getString("label"),StringUtil.unquote(rsGroups.getString("search_field"),'\\'),StringUtil.unquote(rsGroups.getString("search_expression"),'\\'),rsGroups.getBoolean("case_sensitive"),rsGroups.getBoolean("reg_exp"),GroupHierarchyType.getByNumber(rsGroups.getInt("hierarchical_context")));
      }
 else       if (typeId.equals(SearchGroup.ID)) {
        LOGGER.debug("Search: " + rsGroups.getBoolean("case_sensitive"));
        group=new SearchGroup(rsGroups.getString("label"),StringUtil.unquote(rsGroups.getString("search_expression"),'\\'),rsGroups.getBoolean("case_sensitive"),rsGroups.getBoolean("reg_exp"),GroupHierarchyType.getByNumber(rsGroups.getInt("hierarchical_context")));
      }
      if (group != null) {
        GroupTreeNode node=new GroupTreeNode(group);
        parentIds.put(node,rsGroups.getString("parent_id"));
        groups.put(rsGroups.getString("groups_id"),node);
      }
      for (      Map.Entry<GroupTreeNode,String> groupTreeNodeStringEntry : parentIds.entrySet()) {
        String parentId=groupTreeNodeStringEntry.getValue();
        GroupTreeNode parent=groups.get(parentId);
        if (parent == null) {
        }
 else {
          parent.add(groupTreeNodeStringEntry.getKey());
        }
      }
      try (Statement entryGroup=SQLUtil.queryAllFromTable(conn,"entry_group");ResultSet rsEntryGroup=entryGroup.getResultSet()){
        while (rsEntryGroup.next()) {
          String entryId=rsEntryGroup.getString("entries_id");
          String groupId=rsEntryGroup.getString("groups_id");
          GroupTreeNode node=groups.get(groupId);
          if ((node != null) && (node.getGroup() instanceof ExplicitGroup)) {
            ExplicitGroup expGroup=(ExplicitGroup)node.getGroup();
            expGroup.addEntry(entries.get(entryId));
          }
        }
        rsEntryGroup.getStatement().close();
      }
       metaData.setGroups(rootNode);
    }
    rsGroups.getStatement().close();
  }
 }
