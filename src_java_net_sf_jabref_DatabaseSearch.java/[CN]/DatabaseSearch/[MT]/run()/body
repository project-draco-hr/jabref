{
  int searchScore=0;
  matches.clear();
  BibtexEntry bes=null;
  int hits=0;
  for (Iterator i=thisDatabase.getKeySet().iterator(); i.hasNext(); ) {
    bes=thisDatabase.getEntryById((String)i.next());
    if (bes == null)     continue;
    try {
      searchScore=thisRuleSet.applyRule(thisSearchOptions,bes);
    }
 catch (    PatternSyntaxException ex) {
      errorDisplay.reportError("Malformed regular expression",ex);
      return;
    }
    if (searchScore > 0)     searchScore=1;
    bes.setField(searchValueField,String.valueOf(searchScore));
    if (searchScore > 0) {
      hits++;
      matches.add(bes);
    }
  }
  final int outputHits=hits;
  SwingUtilities.invokeLater(new Thread(){
    public void run(){
      panel.output(Globals.lang("Searched database. Global number of hits") + ": " + outputHits);
    }
  }
);
}
