{
  int initSelIndex=-1;
  iconKeys=new ArrayList<>();
  Map<String,String> icns=IconTheme.getAllIcons();
  HashSet<Icon> iconSet=new LinkedHashSet<>();
  for (  String key : icns.keySet()) {
    Icon icon=IconTheme.getImage(key);
    if (!iconSet.contains(icon)) {
      iconKeys.add(key);
      if (key.equals(initialSelection)) {
        initSelIndex=iconKeys.size() - 1;
      }
    }
    iconSet.add(icon);
  }
  DefaultListModel<JLabel> listModel=new DefaultListModel();
  icons=new JList(listModel);
  for (  Icon anIconSet : iconSet) {
    listModel.addElement(new JLabel(anIconSet));
  }
class MyRenderer implements ListCellRenderer {
    final JLabel comp=new JLabel();
    public MyRenderer(){
      comp.setOpaque(true);
      comp.setIconTextGap(0);
      comp.setHorizontalAlignment(JLabel.CENTER);
    }
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int i,    boolean isSelected,    boolean hasFocus){
      comp.setText(null);
      comp.setIcon(((JLabel)value).getIcon());
      if (isSelected) {
        comp.setBackground(list.getSelectionBackground());
        comp.setForeground(list.getSelectionForeground());
        comp.setBorder(BorderFactory.createEtchedBorder());
      }
 else {
        comp.setBackground(list.getBackground());
        comp.setForeground(list.getForeground());
        comp.setBorder(null);
      }
      return comp;
    }
  }
  if (initSelIndex >= 0) {
    icons.setSelectedIndex(initSelIndex);
  }
  icons.setCellRenderer(new MyRenderer());
  icons.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  icons.setLayoutOrientation(JList.HORIZONTAL_WRAP);
  ButtonBarBuilder bb=new ButtonBarBuilder();
  bb.addGlue();
  bb.addButton(ok);
  bb.addButton(cancel);
  bb.addGlue();
  bb.getPanel().setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  ok.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      okPressed=true;
      if (icons.getSelectedValue() != null) {
        selected=icons.getSelectedIndex();
      }
      dispose();
    }
  }
);
  cancel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      okPressed=false;
      dispose();
    }
  }
);
  getContentPane().add(new JScrollPane(icons),BorderLayout.CENTER);
  getContentPane().add(bb.getPanel(),BorderLayout.SOUTH);
  pack();
  setLocationRelativeTo(parent);
}
