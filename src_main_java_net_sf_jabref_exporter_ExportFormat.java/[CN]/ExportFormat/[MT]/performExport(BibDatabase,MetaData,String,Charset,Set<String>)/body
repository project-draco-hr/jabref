{
  File outFile=new File(file);
  SaveSession ss=null;
  if (this.encoding != null) {
    try {
      ss=new SaveSession(this.encoding,false);
    }
 catch (    IOException ex) {
      LOGGER.warn("Can not get save session.",ex);
    }
  }
  if (ss == null) {
    ss=new SaveSession(encoding,false);
  }
  try (VerifyingWriter ps=ss.getWriter()){
    Layout beginLayout=null;
    Globals.prefs.customExportNameFormatters=readFormatterFile(lfFileName);
    List<String> missingFormatters=new ArrayList<>(1);
    try (Reader reader=getReader(lfFileName + ".begin.layout")){
      LayoutHelper layoutHelper=new LayoutHelper(reader);
      beginLayout=layoutHelper.getLayoutFromText(Globals.journalAbbreviationLoader.getRepository());
    }
 catch (    IOException ex) {
    }
    if (beginLayout != null) {
      ps.write(beginLayout.doLayout(database,encoding));
      missingFormatters.addAll(beginLayout.getMissingFormatters());
    }
    Defaults defaults=new Defaults(BibDatabaseMode.fromPreference(Globals.prefs.getBoolean(JabRefPreferences.BIBLATEX_DEFAULT_MODE)));
    SavePreferences savePrefs=SavePreferences.loadForExportFromPreferences(Globals.prefs);
    List<BibEntry> sorted=BibDatabaseWriter.getSortedEntries(new BibDatabaseContext(database,metaData,defaults),entryIds,savePrefs);
    Layout defLayout;
    LayoutHelper layoutHelper;
    try (Reader reader=getReader(lfFileName + ".layout")){
      layoutHelper=new LayoutHelper(reader);
      defLayout=layoutHelper.getLayoutFromText(Globals.journalAbbreviationLoader.getRepository());
    }
     if (defLayout != null) {
      missingFormatters.addAll(defLayout.getMissingFormatters());
      if (!missingFormatters.isEmpty()) {
        LOGGER.warn(missingFormatters);
      }
    }
    HashMap<String,Layout> layouts=new HashMap<>();
    Layout layout;
    ExportFormats.entryNumber=0;
    for (    BibEntry entry : sorted) {
      ExportFormats.entryNumber++;
      String type=entry.getType();
      if (layouts.containsKey(type)) {
        layout=layouts.get(type);
      }
 else {
        try (Reader reader=getReader(lfFileName + '.' + type+ ".layout")){
          layoutHelper=new LayoutHelper(reader);
          layout=layoutHelper.getLayoutFromText(Globals.journalAbbreviationLoader.getRepository());
          layouts.put(type,layout);
          if (layout != null) {
            missingFormatters.addAll(layout.getMissingFormatters());
          }
        }
 catch (        IOException ex) {
          layout=defLayout;
        }
      }
      ps.write(layout.doLayout(entry,database));
    }
    Layout endLayout=null;
    try (Reader reader=getReader(lfFileName + ".end.layout")){
      layoutHelper=new LayoutHelper(reader);
      endLayout=layoutHelper.getLayoutFromText(Globals.journalAbbreviationLoader.getRepository());
    }
 catch (    IOException ex) {
    }
    if ((endLayout != null) && (this.encoding != null)) {
      ps.write(endLayout.doLayout(database,this.encoding));
      missingFormatters.addAll(endLayout.getMissingFormatters());
    }
    Globals.prefs.customExportNameFormatters=null;
    if (!missingFormatters.isEmpty()) {
      StringBuilder sb=new StringBuilder("The following formatters could not be found: ");
      sb.append(String.join(", ",missingFormatters));
      LOGGER.warn(sb);
    }
    finalizeSaveSession(ss,outFile);
  }
 }
