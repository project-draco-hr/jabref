{
  StringBuilder sb=new StringBuilder();
  FileListTableModel tableModel=new FileListTableModel();
  if (field == null) {
    return "";
  }
  tableModel.setContent(field);
  int piv=1;
  for (int i=0; i < tableModel.getRowCount(); i++) {
    FileListEntry flEntry=tableModel.getEntry(i);
    if ((fileType == null) || flEntry.getType().getName().toLowerCase().equals(fileType)) {
      for (      FormatEntry entry : format) {
switch (entry.getType()) {
case STRING:
          sb.append(entry.getString());
        break;
case ITERATION_COUNT:
      sb.append(piv);
    break;
case FILE_PATH:
  if (flEntry.getLink() == null) {
    break;
  }
String[] dirs;
if (Globals.prefs.fileDirForDatabase != null) {
dirs=Globals.prefs.fileDirForDatabase;
}
 else {
dirs=new String[]{Globals.prefs.get(Globals.FILE_FIELD + Globals.DIR_SUFFIX)};
}
File f=FileUtil.expandFilename(flEntry.getLink(),dirs);
if (f != null) {
try {
sb.append(replaceStrings(f.getCanonicalPath()));
}
 catch (IOException ex) {
ex.printStackTrace();
sb.append(replaceStrings(f.getPath()));
}
}
 else {
sb.append(replaceStrings(flEntry.getLink()));
}
break;
case RELATIVE_FILE_PATH:
if (flEntry.getLink() == null) {
break;
}
sb.append(replaceStrings(flEntry.getLink()));
break;
case FILE_EXTENSION:
if (flEntry.getLink() == null) {
break;
}
int index=flEntry.getLink().lastIndexOf('.');
if ((index >= 0) && (index < (flEntry.getLink().length() - 1))) {
sb.append(replaceStrings(flEntry.getLink().substring(index + 1)));
}
break;
case FILE_TYPE:
sb.append(replaceStrings(flEntry.getType().getName()));
break;
case FILE_DESCRIPTION:
sb.append(replaceStrings(flEntry.getDescription()));
break;
}
}
piv++;
}
}
return sb.toString();
}
