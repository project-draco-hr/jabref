def handleJavaCode(filename, lines, keyList):
    regex_only_key = '"((\\\\"|[^"])*)"[^"]*'
    pattern_single_line = re.compile(('Localization\\s*\\.\\s*lang\\s*\\(\\s*' + regex_only_key))
    pattern_only_key = re.compile(regex_only_key)
    pattern_multi_line = re.compile('Localization\\s*\\.\\s*lang\\s*\\(([^)])*$')
    pattern_plus_symbol = re.compile('^\\s*\\+')
    lines_with_line_number = list(enumerate(lines))
    line_index = 0
    while (line_index < len(lines_with_line_number)):
        (line_number, line) = lines_with_line_number[line_index]
        if (line.find('http://') < 0):
            line = re.sub('//.*', '', line)
        while (line != ''):
            result_single_line = pattern_single_line.search(line)
            result_multi_line = pattern_multi_line.search(line)
            found = ''
            if (result_multi_line and (line.find('",') < 0)):
                if result_single_line:
                    curText = result_single_line.group(1)
                    searchForPlus = True
                else:
                    curText = ''
                    searchForPlus = False
                origI = line_index
                while ((line_index + 1) < len(lines_with_line_number)):
                    (linenum2, curline2) = lines_with_line_number[(line_index + 1)]
                    if ((not searchForPlus) or pattern_plus_symbol.search(curline2)):
                        searchForPlus = True
                        line_index += 1
                        line_number = linenum2
                        line = curline2
                        result_single_line = pattern_only_key.search(curline2)
                        if result_single_line:
                            curText = (curText + result_single_line.group(1))
                            if (curline2.count('"') > 2):
                                break
                            if (curline2.find('",') > 0):
                                break
                            if curline2.endswith(')'):
                                break
                        else:
                            break
                    else:
                        break
                if (origI == line_index):
                    print ('%s:%d: Not terminated: %s' % (filename, (line_number + 1), line))
                else:
                    found = curText
            if (result_single_line or (found != '')):
                if (found == ''):
                    found = result_single_line.group(1)
                found = found.replace(' ', '_')
                found = found.replace('=', '\\=').replace(':', '\\:')
                found = found.replace('\\"', '"')
                if ((found != '') and (found not in keyList)):
                    keyList.append(found)
                    keyFiles[found] = (filename, line_number)
            if result_single_line:
                lastPos = result_single_line.span()[1]
                lastPos -= 14
                if (len(line) <= lastPos):
                    line = ''
                else:
                    line = line[lastPos:]
            else:
                line = ''
        line_index += 1
