import os
import sys
res_dir = 'src/main/resources/l10n'
keyFiles = {}
OUTPUT_COLORS = enum(OK='\x1b[0;32m', FAIL='\x1b[0;31m', ENDC='\x1b[0;37m')
if (len(sys.argv) == 1):
    print 'This program must be run from the jabref base directory.\n    \nUsage: syncLang.py option   \nOption can be one of the following:\n \n    -c: Search the language files for empty and duplicate translations. Display only\n        counts for duplicated and empty values in each language file.\n\n    -d: Search the language files for empty and duplicate translations. \n        For each duplicate set found, a list will be printed showing the various \n        translations for the same key. There is currently no option to remove duplicates\n        automatically.\n        \n    -s: Sort the keys in all language files according to "JabRef_en.properties" and "Menu_en.properties".\n        If there are duplicates or keys are missing the specific language file will be skipped!\n\n    -t [-u]: Compare the contents of "JabRef_en.properties" and "Menu_en.properties" against the other\n        language files. The program will list for all the other files which keys from the English\n        file are missing. Additionally, the program will list keys in the other files which are\n        not present in the English file - possible obsolete keys.\n        \n        If the -u option is specified, all missing keys will automatically be added to the files\n        and all obsolete keys will be automatically removed.\n'
elif ((len(sys.argv) >= 2) and (sys.argv[1] == '-s')):
    filesJabRef = filter((lambda s: (s.startswith('JabRef_') and (not s.startswith('JabRef_en')))), os.listdir(res_dir))
    filesJabRef = [os.path.join(res_dir, i) for i in filesJabRef]
    filesMenu = filter((lambda s: (s.startswith('Menu_') and (not s.startswith('Menu_en')))), os.listdir(res_dir))
    filesMenu = [os.path.join(res_dir, i) for i in filesMenu]
    sort_property_files_to_main_property_file(os.path.join(res_dir, 'JabRef_en.properties'), filesJabRef)
    sort_property_files_to_main_property_file(os.path.join(res_dir, 'Menu_en.properties'), filesMenu)
elif ((len(sys.argv) >= 2) and (sys.argv[1] == '-t')):
    if ((len(sys.argv) >= 3) and (sys.argv[2] == '-u')):
        change_files = True
    else:
        change_files = False
    filesJabRef = filter((lambda s: (s.startswith('JabRef_') and (not s.startswith('JabRef_en')))), os.listdir(res_dir))
    filesJabRef = [os.path.join(res_dir, i) for i in filesJabRef]
    filesMenu = filter((lambda s: (s.startswith('Menu_') and (not s.startswith('Menu_en')))), os.listdir(res_dir))
    filesMenu = [os.path.join(res_dir, i) for i in filesMenu]
    compare_property_files_to_main_property_file(os.path.join(res_dir, 'JabRef_en.properties'), filesJabRef, change_files)
    compare_property_files_to_main_property_file(os.path.join(res_dir, 'Menu_en.properties'), filesMenu, change_files)
elif ((len(sys.argv) >= 2) and ((sys.argv[1] == '-d') or (sys.argv[1] == '-c'))):
    files = filter((lambda s: (s.startswith('JabRef_') and (not s.startswith('JabRef_en')))), os.listdir(res_dir))
    files.extend(filter((lambda s: (s.startswith('Menu_') and (not s.startswith('Menu_en')))), os.listdir(res_dir)))
    files = [os.path.join(res_dir, i) for i in files]
    for f in files:
        find_duplicate_keys_and_keys_with_no_value(f, (sys.argv[1] == '-d'))
