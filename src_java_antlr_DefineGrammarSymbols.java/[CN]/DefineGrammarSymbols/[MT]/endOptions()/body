{
  if (grammar.exportVocab == null && grammar.importVocab == null) {
    grammar.exportVocab=grammar.getClassName();
    if (tokenManagers.containsKey(DEFAULT_TOKENMANAGER_NAME)) {
      grammar.exportVocab=DEFAULT_TOKENMANAGER_NAME;
      TokenManager tm=(TokenManager)tokenManagers.get(DEFAULT_TOKENMANAGER_NAME);
      grammar.setTokenManager(tm);
      return;
    }
    TokenManager tm=new SimpleTokenManager(grammar.exportVocab,tool);
    grammar.setTokenManager(tm);
    tokenManagers.put(grammar.exportVocab,tm);
    tokenManagers.put(DEFAULT_TOKENMANAGER_NAME,tm);
    return;
  }
  if (grammar.exportVocab == null && grammar.importVocab != null) {
    grammar.exportVocab=grammar.getClassName();
    if (grammar.importVocab.equals(grammar.exportVocab)) {
      tool.warning("Grammar " + grammar.getClassName() + " cannot have importVocab same as default output vocab (grammar name); ignored.");
      grammar.importVocab=null;
      endOptions();
      return;
    }
    if (tokenManagers.containsKey(grammar.importVocab)) {
      TokenManager tm=(TokenManager)tokenManagers.get(grammar.importVocab);
      TokenManager dup=(TokenManager)tm.clone();
      dup.setName(grammar.exportVocab);
      dup.setReadOnly(false);
      grammar.setTokenManager(dup);
      tokenManagers.put(grammar.exportVocab,dup);
      return;
    }
    ImportVocabTokenManager tm=new ImportVocabTokenManager(grammar,grammar.importVocab + CodeGenerator.TokenTypesFileSuffix + CodeGenerator.TokenTypesFileExt,grammar.exportVocab,tool);
    tm.setReadOnly(false);
    tokenManagers.put(grammar.exportVocab,tm);
    grammar.setTokenManager(tm);
    if (!tokenManagers.containsKey(DEFAULT_TOKENMANAGER_NAME)) {
      tokenManagers.put(DEFAULT_TOKENMANAGER_NAME,tm);
    }
    return;
  }
  if (grammar.exportVocab != null && grammar.importVocab == null) {
    if (tokenManagers.containsKey(grammar.exportVocab)) {
      TokenManager tm=(TokenManager)tokenManagers.get(grammar.exportVocab);
      grammar.setTokenManager(tm);
      return;
    }
    TokenManager tm=new SimpleTokenManager(grammar.exportVocab,tool);
    grammar.setTokenManager(tm);
    tokenManagers.put(grammar.exportVocab,tm);
    if (!tokenManagers.containsKey(DEFAULT_TOKENMANAGER_NAME)) {
      tokenManagers.put(DEFAULT_TOKENMANAGER_NAME,tm);
    }
    return;
  }
  if (grammar.exportVocab != null && grammar.importVocab != null) {
    if (grammar.importVocab.equals(grammar.exportVocab)) {
      tool.error("exportVocab of " + grammar.exportVocab + " same as importVocab; probably not what you want");
    }
    if (tokenManagers.containsKey(grammar.importVocab)) {
      TokenManager tm=(TokenManager)tokenManagers.get(grammar.importVocab);
      TokenManager dup=(TokenManager)tm.clone();
      dup.setName(grammar.exportVocab);
      dup.setReadOnly(false);
      grammar.setTokenManager(dup);
      tokenManagers.put(grammar.exportVocab,dup);
      return;
    }
    ImportVocabTokenManager tm=new ImportVocabTokenManager(grammar,grammar.importVocab + CodeGenerator.TokenTypesFileSuffix + CodeGenerator.TokenTypesFileExt,grammar.exportVocab,tool);
    tm.setReadOnly(false);
    tokenManagers.put(grammar.exportVocab,tm);
    grammar.setTokenManager(tm);
    if (!tokenManagers.containsKey(DEFAULT_TOKENMANAGER_NAME)) {
      tokenManagers.put(DEFAULT_TOKENMANAGER_NAME,tm);
    }
    return;
  }
}
