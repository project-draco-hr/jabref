{
  setHighlight1Cell(null);
  try {
    final Point p=dtde.getLocation();
    final TreePath path=getPathForLocation(p.x,p.y);
    if (path == null) {
      dtde.rejectDrop();
      return;
    }
    final GroupTreeNodeViewModel target=(GroupTreeNodeViewModel)path.getLastPathComponent();
    final Transferable transferable=dtde.getTransferable();
    if (transferable.isDataFlavorSupported(GroupTreeNodeViewModel.FLAVOR)) {
      GroupTreeNodeViewModel source=(GroupTreeNodeViewModel)transferable.getTransferData(GroupTreeNodeViewModel.FLAVOR);
      if (source.equals(target)) {
        dtde.rejectDrop();
        return;
      }
      if (source.getNode().isNodeDescendant(target.getNode())) {
        dtde.rejectDrop();
        return;
      }
      Enumeration<TreePath> expandedPaths=groupSelector.getExpandedPaths();
      MoveGroupChange undo=new MoveGroupChange(((GroupTreeNodeViewModel)source.getParent()).getNode(),source.getNode().getPositionInParent(),target.getNode(),target.getChildCount());
      source.getNode().moveTo(target.getNode());
      dtde.getDropTargetContext().dropComplete(true);
      groupSelector.revalidateGroups(new TreePath[]{source.getTreePath()},refreshPaths(expandedPaths));
      groupSelector.concludeMoveGroup(undo,source);
    }
 else     if (transferable.isDataFlavorSupported(TransferableEntrySelection.FLAVOR_INTERNAL)) {
      final AbstractGroup group=target.getNode().getGroup();
      if (!target.getNode().supportsAddingEntries()) {
        dtde.rejectDrop();
        return;
      }
      final TransferableEntrySelection selection=(TransferableEntrySelection)transferable.getTransferData(TransferableEntrySelection.FLAVOR_INTERNAL);
      final List<BibEntry> entries=selection.getSelection();
      int assignedEntries=0;
      for (      BibEntry entry : entries) {
        if (!target.getNode().getGroup().contains(entry)) {
          ++assignedEntries;
        }
      }
      if (!Util.warnAssignmentSideEffects(group,groupSelector.frame)) {
        return;
      }
      groupSelector.getActiveBasePanel().storeCurrentEdit();
      Optional<EntriesGroupChange> undo=target.getNode().addToGroup(selection.getSelection());
      if (undo.isPresent()) {
        dtde.getDropTargetContext().dropComplete(true);
        groupSelector.revalidateGroups();
        groupSelector.concludeAssignment(UndoableChangeEntriesOfGroup.getUndoableEdit(target,undo.get()),target.getNode(),assignedEntries);
      }
    }
 else {
      dtde.rejectDrop();
    }
  }
 catch (  IOException|UnsupportedFlavorException ioe) {
  }
}
