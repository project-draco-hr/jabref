{
class ExportAction extends MnemonicAwareAction {
    private final JabRefFrame frame;
    private final boolean selectedOnly;
    public ExportAction(    JabRefFrame frame,    boolean selectedOnly){
      this.frame=frame;
      this.selectedOnly=selectedOnly;
      putValue(Action.NAME,selectedOnly ? Localization.menuTitle("Export selected entries") : Localization.menuTitle("Export"));
    }
    @Override public void actionPerformed(    ActionEvent e){
      ExportFormats.initAllExports();
      JFileChooser fc=ExportFormats.createExportFileChooser(Globals.prefs.get(JabRefPreferences.EXPORT_WORKING_DIRECTORY));
      fc.showSaveDialog(frame);
      File file=fc.getSelectedFile();
      if (file == null) {
        return;
      }
      FileFilter ff=fc.getFileFilter();
      if (ff instanceof ExportFileFilter) {
        ExportFileFilter eff=(ExportFileFilter)ff;
        String path=file.getPath();
        if (!path.endsWith(eff.getExtension())) {
          path=path + eff.getExtension();
        }
        file=new File(path);
        if (file.exists()) {
          if (JOptionPane.showConfirmDialog(frame,Localization.lang("'%0' exists. Overwrite file?",file.getName()),Localization.lang("Export"),JOptionPane.OK_CANCEL_OPTION) != JOptionPane.OK_OPTION) {
            return;
          }
        }
        final IExportFormat format=eff.getExportFormat();
        Set<String> entryIds=null;
        if (selectedOnly) {
          BibtexEntry[] selected=frame.getCurrentBasePanel().getSelectedEntries();
          entryIds=new HashSet<>();
          for (          BibtexEntry bibtexEntry : selected) {
            entryIds.add(bibtexEntry.getId());
          }
        }
        Globals.prefs.fileDirForDatabase=frame.getCurrentBasePanel().metaData().getFileDirectory(Globals.FILE_FIELD);
        Globals.prefs.databaseFile=frame.getCurrentBasePanel().metaData().getFile();
        Globals.prefs.put(JabRefPreferences.LAST_USED_EXPORT,format.getConsoleName());
        Globals.prefs.put(JabRefPreferences.EXPORT_WORKING_DIRECTORY,file.getParent());
        final File finFile=file;
        final Set<String> finEntryIDs=entryIds;
        AbstractWorker exportWorker=new AbstractWorker(){
          String errorMessage;
          @Override public void run(){
            try {
              format.performExport(frame.getCurrentBasePanel().database(),frame.getCurrentBasePanel().metaData(),finFile.getPath(),frame.getCurrentBasePanel().getEncoding(),finEntryIDs);
            }
 catch (            Exception ex) {
              ex.printStackTrace();
              if (ex.getMessage() == null) {
                errorMessage=ex.toString();
              }
 else {
                errorMessage=ex.getMessage();
              }
            }
          }
          @Override public void update(){
            if (errorMessage == null) {
              frame.output(Localization.lang("%0 export successful",format.getDisplayName()));
            }
 else {
              frame.output(Localization.lang("Could not save file") + " - " + errorMessage);
              JOptionPane.showMessageDialog(frame,Localization.lang("Could not save file") + ".\n" + errorMessage,Localization.lang("Save database"),JOptionPane.ERROR_MESSAGE);
            }
          }
        }
;
        exportWorker.getWorker().run();
        exportWorker.update();
      }
    }
  }
  return new ExportAction(frame,selectedOnly);
}
