{
  keyword=new JTextField();
  keywordListModel=new DefaultListModel();
  keywordList=new JList(keywordListModel);
  keywordList.setVisibleRowCount(8);
  JScrollPane kPane=new JScrollPane(keywordList);
  diag=new JDialog(frame,Localization.lang("Manage keywords"),true);
  JButton ok=new JButton(Localization.lang("Ok"));
  JButton cancel=new JButton(Localization.lang("Cancel"));
  JButton add=new JButton(Localization.lang("Add"));
  JButton remove=new JButton(Localization.lang("Remove"));
  keywordList.setVisibleRowCount(10);
  intersectKeywords=new JRadioButton("Display keywords appearing in ALL entries");
  mergeKeywords=new JRadioButton("Display keywords appearing in ANY entry");
  ButtonGroup group=new ButtonGroup();
  group.add(intersectKeywords);
  group.add(mergeKeywords);
  ActionListener stateChanged=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      fillKeyWordList();
    }
  }
;
  intersectKeywords.addActionListener(stateChanged);
  mergeKeywords.addActionListener(stateChanged);
  intersectKeywords.setSelected(true);
  DefaultFormBuilder builder=new DefaultFormBuilder(new FormLayout("fill:200dlu, 4dlu, left:pref, 4dlu, left:pref",""));
  builder.appendSeparator(Localization.lang("Keywords of selected entries"));
  builder.append(intersectKeywords,5);
  builder.nextLine();
  builder.append(mergeKeywords,5);
  builder.nextLine();
  builder.append(kPane,3);
  builder.add(remove);
  builder.nextLine();
  builder.append(keyword,3);
  builder.append(add);
  builder.nextLine();
  ButtonBarBuilder bb=new ButtonBarBuilder();
  bb.addGlue();
  bb.addButton(ok);
  bb.addButton(cancel);
  bb.addGlue();
  builder.getPanel().setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  bb.getPanel().setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  ok.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      cancelled=false;
      diag.dispose();
    }
  }
);
  AbstractAction cancelAction=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      cancelled=true;
      diag.dispose();
    }
  }
;
  cancel.addActionListener(cancelAction);
  final ActionListener addActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      String text=keyword.getText().trim();
      if (text.isEmpty()) {
        return;
      }
      if (keywordListModel.isEmpty()) {
        keywordListModel.addElement(text);
      }
 else {
        int idx=0;
        String element=(String)keywordListModel.getElementAt(idx);
        while (idx < keywordListModel.size() && element.compareTo(text) < 0) {
          idx++;
        }
        if (idx == keywordListModel.size()) {
          keywordListModel.addElement(text);
        }
 else         if (element.compareTo(text) == 0) {
        }
 else {
          keywordListModel.add(idx,text);
        }
      }
      keyword.setText(null);
      keyword.requestFocusInWindow();
    }
  }
;
  add.addActionListener(addActionListener);
  final ActionListener removeActionListenter=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      String[] values=(String[])keywordList.getSelectedValues();
      for (      String val : values) {
        keywordListModel.removeElement(val);
      }
    }
  }
;
  remove.addActionListener(removeActionListenter);
  keywordList.addKeyListener(new KeyListener(){
    @Override public void keyTyped(    KeyEvent arg0){
    }
    @Override public void keyReleased(    KeyEvent arg0){
    }
    @Override public void keyPressed(    KeyEvent arg0){
      if (arg0.getKeyCode() == KeyEvent.VK_DELETE) {
        removeActionListenter.actionPerformed(null);
      }
    }
  }
);
  AutoCompleter autoComp=JabRef.jrf.basePanel().getAutoCompleters().get("keywords");
  AutoCompleteListener acl=new AutoCompleteListener(autoComp);
  keyword.addKeyListener(acl);
  keyword.addFocusListener(acl);
  keyword.addKeyListener(new KeyListener(){
    @Override public void keyTyped(    KeyEvent e){
    }
    @Override public void keyReleased(    KeyEvent e){
    }
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        addActionListener.actionPerformed(null);
      }
    }
  }
);
  ActionMap am=builder.getPanel().getActionMap();
  InputMap im=builder.getPanel().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(Globals.prefs.getKey("Close dialog"),"close");
  am.put("close",cancelAction);
  diag.getContentPane().add(builder.getPanel(),BorderLayout.CENTER);
  diag.getContentPane().add(bb.getPanel(),BorderLayout.SOUTH);
}
