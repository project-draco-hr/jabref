{
  BasePanel bp=frame.basePanel();
  if (bp == null) {
    return;
  }
  if (bp.getSelectedEntries().length == 0) {
    bp.output(Localization.lang("Select at least one entry to manage keywords."));
    return;
  }
  if (diag == null) {
    createDialog();
  }
  cancelled=true;
  fillKeyWordList();
  diag.pack();
  Util.placeDialog(diag,frame);
  diag.setVisible(true);
  if (cancelled) {
    return;
  }
  HashSet<String> keywordsToAdd=new HashSet<String>();
  HashSet<String> userSelectedKeywords=new HashSet<String>();
  for (Enumeration<String> keywords=keywordListModel.elements(); keywords.hasMoreElements(); ) {
    String keyword=keywords.nextElement();
    userSelectedKeywords.add(keyword);
    if (!sortedKeywordsOfAllEntriesBeforeUpdateByUser.contains(keyword)) {
      keywordsToAdd.add(keyword);
    }
  }
  HashSet<String> keywordsToRemove=new HashSet<String>();
  for (  String keyword : sortedKeywordsOfAllEntriesBeforeUpdateByUser) {
    if (!userSelectedKeywords.contains(keyword)) {
      keywordsToRemove.add(keyword);
    }
  }
  if (keywordsToAdd.isEmpty() && keywordsToRemove.isEmpty()) {
    return;
  }
  if (SpecialFieldsUtils.keywordSyncEnabled()) {
    if (!keywordsToAdd.isEmpty()) {
      HashSet<String> clone;
      clone=createClone(keywordsToAdd);
      clone.retainAll(Priority.getInstance().getKeyWords());
      if (!clone.isEmpty()) {
        keywordsToRemove.addAll(Priority.getInstance().getKeyWords());
      }
      clone=createClone(keywordsToAdd);
      clone.retainAll(Quality.getInstance().getKeyWords());
      if (!clone.isEmpty()) {
        keywordsToRemove.addAll(Quality.getInstance().getKeyWords());
      }
      clone=createClone(keywordsToAdd);
      clone.retainAll(Rank.getInstance().getKeyWords());
      if (!clone.isEmpty()) {
        keywordsToRemove.addAll(Rank.getInstance().getKeyWords());
      }
      clone=createClone(keywordsToAdd);
      clone.retainAll(Relevance.getInstance().getKeyWords());
      if (!clone.isEmpty()) {
        keywordsToRemove.addAll(Relevance.getInstance().getKeyWords());
      }
      clone=createClone(keywordsToAdd);
      clone.retainAll(ReadStatus.getInstance().getKeyWords());
      if (!clone.isEmpty()) {
        keywordsToRemove.addAll(ReadStatus.getInstance().getKeyWords());
      }
      clone=createClone(keywordsToAdd);
      clone.retainAll(Printed.getInstance().getKeyWords());
      if (!clone.isEmpty()) {
        keywordsToRemove.addAll(Printed.getInstance().getKeyWords());
      }
    }
  }
  BibtexEntry[] entries=bp.getSelectedEntries();
  NamedCompound ce=new NamedCompound(Localization.lang("Update keywords"));
  for (  BibtexEntry entry : entries) {
    ArrayList<String> separatedKeywords=Util.getSeparatedKeywords(entry);
    TreeSet<String> keywords=new TreeSet<String>();
    keywords.addAll(separatedKeywords);
    keywords.removeAll(keywordsToRemove);
    keywords.addAll(keywordsToAdd);
    separatedKeywords.clear();
    separatedKeywords.addAll(keywords);
    Util.putKeywords(entry,separatedKeywords,ce);
    if (SpecialFieldsUtils.keywordSyncEnabled()) {
      SpecialFieldsUtils.syncSpecialFieldsFromKeywords(entry,ce);
    }
  }
  ce.end();
  bp.undoManager.addEdit(ce);
  bp.markBaseChanged();
}
