{
  assertCaseChangerTitleLowers("i","i");
  assertCaseChangerAllLowers("i","i");
  assertCaseChangerAllUppers("I","i");
  assertCaseChangerTitleLowers("0i~ ","0I~ ");
  assertCaseChangerAllLowers("0i~ ","0I~ ");
  assertCaseChangerAllUppers("0I~ ","0I~ ");
  assertCaseChangerTitleLowers("Hi hi ","Hi Hi ");
  assertCaseChangerAllLowers("hi hi ","Hi Hi ");
  assertCaseChangerAllUppers("HI HI ","Hi Hi ");
  assertCaseChangerTitleLowers("{\\oe}","{\\oe}");
  assertCaseChangerAllLowers("{\\oe}","{\\oe}");
  assertCaseChangerAllUppers("{\\OE}","{\\oe}");
  assertCaseChangerTitleLowers("Hi {\\oe   }hi ","Hi {\\oe   }Hi ");
  assertCaseChangerAllLowers("hi {\\oe   }hi ","Hi {\\oe   }Hi ");
  assertCaseChangerAllUppers("HI {\\OE   }HI ","Hi {\\oe   }Hi ");
  assertCaseChangerTitleLowers("Jonathan meyer and charles louis xavier joseph de la vall{\\'e}e poussin","Jonathan Meyer and Charles Louis Xavier Joseph de la Vall{\\'e}e Poussin");
  assertCaseChangerAllLowers("jonathan meyer and charles louis xavier joseph de la vall{\\'e}e poussin","Jonathan Meyer and Charles Louis Xavier Joseph de la Vall{\\'e}e Poussin");
  assertCaseChangerAllUppers("JONATHAN MEYER AND CHARLES LOUIS XAVIER JOSEPH DE LA VALL{\\'E}E POUSSIN","Jonathan Meyer and Charles Louis Xavier Joseph de la Vall{\\'e}e Poussin");
  assertCaseChangerTitleLowers("{\\'e}","{\\'e}");
  assertCaseChangerAllLowers("{\\'e}","{\\'e}");
  assertCaseChangerAllUppers("{\\'E}","{\\'e}");
  assertCaseChangerTitleLowers("{\\'{E}}douard masterly","{\\'{E}}douard Masterly");
  assertCaseChangerAllLowers("{\\'{e}}douard masterly","{\\'{E}}douard Masterly");
  assertCaseChangerAllUppers("{\\'{E}}DOUARD MASTERLY","{\\'{E}}douard Masterly");
  assertCaseChangerTitleLowers("Ulrich {\\\"{u}}nderwood and ned {\\~n}et and paul {\\={p}}ot","Ulrich {\\\"{U}}nderwood and Ned {\\~N}et and Paul {\\={P}}ot");
  assertCaseChangerAllLowers("ulrich {\\\"{u}}nderwood and ned {\\~n}et and paul {\\={p}}ot","Ulrich {\\\"{U}}nderwood and Ned {\\~N}et and Paul {\\={P}}ot");
  assertCaseChangerAllUppers("ULRICH {\\\"{U}}NDERWOOD AND NED {\\~N}ET AND PAUL {\\={P}}OT","Ulrich {\\\"{U}}nderwood and Ned {\\~N}et and Paul {\\={P}}ot");
  assertCaseChangerTitleLowers("An {$O(n \\log n / \\! \\log\\log n)$} sorting algorithm","An {$O(n \\log n / \\! \\log\\log n)$} Sorting Algorithm");
  assertCaseChangerAllLowers("an {$O(n \\log n / \\! \\log\\log n)$} sorting algorithm","An {$O(n \\log n / \\! \\log\\log n)$} Sorting Algorithm");
  assertCaseChangerAllUppers("AN {$O(n \\log n / \\! \\log\\log n)$} SORTING ALGORITHM","An {$O(n \\log n / \\! \\log\\log n)$} Sorting Algorithm");
  assertCaseChangerTitleLowers("hallo","hallo");
  assertCaseChangerTitleLowers("Hallo","HAllo");
  assertCaseChangerTitleLowers("Hallo world","HAllo World");
  assertCaseChangerTitleLowers("Hallo world. how","HAllo WORLD. HOW");
  assertCaseChangerTitleLowers("Hallo {WORLD}. how","HAllo {WORLD}. HOW");
  assertCaseChangerTitleLowers("Hallo {\\world}. how","HAllo {\\WORLD}. HOW");
  assertCaseChangerAllLowers("hallo","hallo");
  assertCaseChangerAllLowers("hallo","HAllo");
  assertCaseChangerAllLowers("hallo world","HAllo World");
  assertCaseChangerAllLowers("hallo world. how","HAllo WORLD. HOW");
  assertCaseChangerAllLowers("hallo {worLD}. how","HAllo {worLD}. HOW");
  assertCaseChangerAllLowers("hallo {\\world}. how","HAllo {\\WORLD}. HOW");
  assertCaseChangerAllUppers("HALLO","hallo");
  assertCaseChangerAllUppers("HALLO","HAllo");
  assertCaseChangerAllUppers("HALLO WORLD","HAllo World");
  assertCaseChangerAllUppers("HALLO WORLD. HOW","HAllo World. How");
  assertCaseChangerAllUppers("HALLO {worLD}. HOW","HAllo {worLD}. how");
  assertCaseChangerAllUppers("HALLO {\\WORLD}. HOW","HAllo {\\woRld}. hoW");
  assertCaseChangerTitleLowers("On notions of information transfer in {VLSI} circuits","On Notions of Information Transfer in {VLSI} Circuits");
}
