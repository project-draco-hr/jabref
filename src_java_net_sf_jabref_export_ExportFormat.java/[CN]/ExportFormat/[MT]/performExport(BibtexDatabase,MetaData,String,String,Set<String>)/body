{
  File outFile=new File(file);
  SaveSession ss=getSaveSession(encoding,outFile);
  VerifyingWriter ps=ss.getWriter();
  Layout beginLayout=null;
  Reader reader;
  try {
    reader=getReader(lfFileName + ".begin.layout");
    LayoutHelper layoutHelper=new LayoutHelper(reader);
    beginLayout=layoutHelper.getLayoutFromText(Globals.FORMATTER_PACKAGE);
    reader.close();
  }
 catch (  IOException ex) {
  }
  if (beginLayout != null) {
    ps.write(beginLayout.doLayout(database,encoding));
  }
  List<BibtexEntry> sorted=FileActions.getSortedEntries(database,entryIds,false);
  reader=getReader(lfFileName + ".layout");
  LayoutHelper layoutHelper=new LayoutHelper(reader);
  Layout defLayout=layoutHelper.getLayoutFromText(Globals.FORMATTER_PACKAGE);
  reader.close();
  HashMap<String,Layout> layouts=new HashMap<String,Layout>();
  Layout layout;
  for (  BibtexEntry entry : sorted) {
    String type=entry.getType().getName().toLowerCase();
    if (layouts.containsKey(type))     layout=layouts.get(type);
 else {
      try {
        reader=getReader(lfFileName + "." + type+ ".layout");
        layoutHelper=new LayoutHelper(reader);
        layout=layoutHelper.getLayoutFromText(Globals.FORMATTER_PACKAGE);
        layouts.put(type,layout);
        reader.close();
      }
 catch (      IOException ex) {
        layout=defLayout;
      }
    }
    ps.write(layout.doLayout(entry,database));
  }
  Layout endLayout=null;
  try {
    reader=getReader(lfFileName + ".end.layout");
    layoutHelper=new LayoutHelper(reader);
    endLayout=layoutHelper.getLayoutFromText(Globals.FORMATTER_PACKAGE);
    reader.close();
  }
 catch (  IOException ex) {
  }
  if (endLayout != null) {
    ps.write(endLayout.doLayout(database,encoding));
  }
  finalizeSaveSession(ss);
}
