{
  super(parent,Localization.lang("Connect to SQL database"),true);
  this.setResizable(false);
  this.setLocationRelativeTo(parent);
  dbStrings=dbs;
  ArrayList<JLabel> lhs=new ArrayList<>();
  JLabel lblServerType=new JLabel();
  lhs.add(lblServerType);
  JLabel lblServerHostname=new JLabel();
  lhs.add(lblServerHostname);
  JLabel lblDatabase=new JLabel();
  lhs.add(lblDatabase);
  JLabel lblUsername=new JLabel();
  lhs.add(lblUsername);
  JLabel lblPassword=new JLabel();
  lhs.add(lblPassword);
  ArrayList<JComponent> rhs=new ArrayList<>();
  rhs.add(cmbServerType);
  rhs.add(txtServerHostname);
  rhs.add(txtDatabase);
  rhs.add(txtUsername);
  rhs.add(pwdPassword);
  lblServerType.setText(Localization.lang("Server type" + ':'));
  lblServerHostname.setText(Localization.lang("Server hostname" + ':'));
  lblDatabase.setText(Localization.lang("Database") + ':');
  lblUsername.setText(Localization.lang("Username") + ':');
  lblPassword.setText(Localization.lang("Password") + ':');
  for (  JLabel label : lhs) {
    label.setHorizontalAlignment(SwingConstants.RIGHT);
  }
  JButton btnConnect=new JButton();
  btnConnect.setText(Localization.lang("Connect"));
  JButton btnCancel=new JButton();
  btnCancel.setText(Localization.lang("Cancel"));
  String srvSel=dbStrings.getServerType();
  List<String> srv=dbStrings.getServerTypes();
  for (  String aSrv : srv) {
    cmbServerType.addItem(aSrv);
  }
  cmbServerType.setSelectedItem(srvSel);
  txtServerHostname.setText(dbStrings.getServerHostname());
  txtDatabase.setText(dbStrings.getDatabase());
  txtUsername.setText(dbStrings.getUsername());
  pwdPassword.setText(dbStrings.getPassword());
  FormBuilder builder=FormBuilder.create().layout(new FormLayout("right:pref, 4dlu, fill:pref","pref, 4dlu, pref, 4dlu, pref, 4dlu, pref, 4dlu, pref"));
  builder.getPanel().setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  builder.add(lblServerType).xy(1,1);
  builder.add(cmbServerType).xy(3,1);
  builder.add(lblServerHostname).xy(1,3);
  builder.add(txtServerHostname).xy(3,3);
  builder.add(lblDatabase).xy(1,5);
  builder.add(txtDatabase).xy(3,5);
  builder.add(lblUsername).xy(1,7);
  builder.add(txtUsername).xy(3,7);
  builder.add(lblPassword).xy(1,9);
  builder.add(pwdPassword).xy(3,9);
  getContentPane().add(builder.getPanel(),BorderLayout.CENTER);
  ButtonBarBuilder bb=new ButtonBarBuilder();
  bb.addGlue();
  bb.addButton(btnConnect);
  bb.addButton(btnCancel);
  bb.addGlue();
  getContentPane().add(bb.getPanel(),BorderLayout.SOUTH);
  pack();
  ActionListener connectAction=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Optional<String> errorMessage=checkInput();
      if (errorMessage.isPresent()) {
        JOptionPane.showMessageDialog(null,errorMessage.get(),Localization.lang("Input error"),JOptionPane.ERROR_MESSAGE);
      }
 else {
        storeSettings();
        setVisible(false);
        setConnectToDB(true);
      }
    }
  }
;
  btnConnect.addActionListener(connectAction);
  txtDatabase.addActionListener(connectAction);
  txtServerHostname.addActionListener(connectAction);
  txtUsername.addActionListener(connectAction);
  pwdPassword.addActionListener(connectAction);
  AbstractAction cancelAction=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      setVisible(false);
      dispose();
      setConnectToDB(false);
    }
  }
;
  btnCancel.addActionListener(cancelAction);
  ActionMap am=builder.getPanel().getActionMap();
  InputMap im=builder.getPanel().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  im.put(Globals.getKeyPrefs().getKey(KeyBinding.CLOSE_DIALOG),"close");
  am.put("close",cancelAction);
}
