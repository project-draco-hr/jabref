{
  if ((baseString != null) && (modifiedString != null)) {
    List<String> stringList=new ArrayList<>(Arrays.asList(baseString.split(separator)));
    List<Delta<String>> deltaList=new ArrayList<>(DiffUtils.diff(stringList,new ArrayList<>(Arrays.asList(modifiedString.split(separator)))).getDeltas());
    Collections.reverse(deltaList);
    for (    Delta<String> delta : deltaList) {
      int startPos=delta.getOriginal().getPosition();
      List<String> lines=delta.getOriginal().getLines();
      int offset=0;
switch (delta.getType()) {
case CHANGE:
        for (        String line : lines) {
          stringList.set(startPos + offset,(offset == 0 ? CHANGE_REMOVAL_START : "") + line);
          offset++;
        }
      stringList.set((startPos + offset) - 1,stringList.get((startPos + offset) - 1) + TAG_END + CHANGE_ADDITION_START+ String.join(separator,delta.getRevised().getLines())+ TAG_END);
    break;
case DELETE:
  for (offset=0; offset <= (lines.size() - 1); offset++) {
    stringList.set(startPos + offset,"");
  }
break;
case INSERT:
stringList.add(delta.getOriginal().getPosition(),ADDITION_START + String.join(separator,delta.getRevised().getLines()) + TAG_END);
break;
default :
break;
}
}
return HTML_START + String.join("",stringList) + HTML_END;
}
return modifiedString;
}
