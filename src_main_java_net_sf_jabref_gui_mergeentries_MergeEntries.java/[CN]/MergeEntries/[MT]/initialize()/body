{
  joint=new TreeSet<String>(one.getAllFields());
  joint.addAll(two.getAllFields());
  Set<String> toberemoved=new TreeSet<String>();
  for (  String field : joint) {
    if (field.startsWith("__")) {
      toberemoved.add(field);
    }
  }
  for (  String field : toberemoved) {
    joint.remove(field);
  }
  rb=new JRadioButton[3][joint.size() + 1];
  ButtonGroup[] rbg=new ButtonGroup[joint.size() + 1];
  identical=new Boolean[joint.size() + 1];
  jointStrings=new String[joint.size()];
  String colSpec="left:pref, 5px, fill:3cm:grow, 5px, right:pref, 3px, center:pref, 3px, left:pref, 5px, fill:3cm:grow";
  StringBuilder rowBuilder=new StringBuilder("pref, 10px, pref, ");
  for (int i=0; i < joint.size(); i++) {
    rowBuilder.append("pref, ");
  }
  rowBuilder.append("10px, top:4cm:grow");
  FormLayout layout=new FormLayout(colSpec,rowBuilder.toString());
  mergePanel.setLayout(layout);
  for (int i=0; i < 6; i++) {
    JLabel label=new JLabel(columnHeadings[i]);
    Font font=label.getFont();
    label.setFont(font.deriveFont(font.getStyle() | Font.BOLD));
    mergePanel.add(label,cc.xy(1 + (i * 2),1));
  }
  mergePanel.add(new JSeparator(),cc.xyw(1,2,11));
  BibtexEntryType type1=one.getType();
  BibtexEntryType type2=two.getType();
  mergedEntry.setType(type1);
  JLabel label=new JLabel(Localization.lang("Entry type"));
  Font font=label.getFont();
  label.setFont(font.deriveFont(font.getStyle() | Font.BOLD));
  mergePanel.add(label,cc.xy(1,3));
  JTextArea type1ta=new JTextArea(type1.getName());
  type1ta.setEditable(false);
  mergePanel.add(type1ta,cc.xy(3,3));
  if (type1.compareTo(type2) != 0) {
    identical[0]=false;
    rbg[0]=new ButtonGroup();
    for (int k=0; k < 3; k+=2) {
      rb[k][0]=new JRadioButton();
      rbg[0].add(rb[k][0]);
      mergePanel.add(rb[k][0],cc.xy(5 + (k * 2),3));
      rb[k][0].addChangeListener(new ChangeListener(){
        @Override public void stateChanged(        ChangeEvent e){
          updateAll();
        }
      }
);
    }
    rb[0][0].setSelected(true);
  }
 else {
    identical[0]=true;
  }
  JTextArea type2ta=new JTextArea(type2.getName());
  type2ta.setEditable(false);
  mergePanel.add(type2ta,cc.xy(11,3));
  int row=4;
  for (  String field : joint) {
    jointStrings[row - 4]=field;
    label=new JLabel(StringUtil.toUpperFirstLetter(field));
    font=label.getFont();
    label.setFont(font.deriveFont(font.getStyle() | Font.BOLD));
    mergePanel.add(label,cc.xy(1,row));
    String string1=one.getField(field);
    String string2=two.getField(field);
    identical[row - 3]=false;
    if ((string1 != null) && (string2 != null)) {
      if (string1.equals(string2)) {
        identical[row - 3]=true;
      }
    }
    if (field.equals("abstract")) {
      JTextArea tf=new JTextArea();
      tf.setLineWrap(true);
      tf.setEditable(false);
      JScrollPane jsptf=new JScrollPane(tf);
      layout.setRowSpec(row,RowSpec.decode("center:2cm:grow"));
      mergePanel.add(jsptf,cc.xy(3,row,"f, f"));
      tf.setText(string1);
      tf.setCaretPosition(0);
    }
 else {
      JTextArea tf=new JTextArea(string1);
      mergePanel.add(tf,cc.xy(3,row));
      tf.setCaretPosition(0);
      tf.setEditable(false);
    }
    if (!identical[row - 3]) {
      rbg[row - 3]=new ButtonGroup();
      for (int k=0; k < 3; k++) {
        rb[k][row - 3]=new JRadioButton();
        rbg[row - 3].add(rb[k][row - 3]);
        mergePanel.add(rb[k][row - 3],cc.xy(5 + (k * 2),row));
        rb[k][row - 3].addChangeListener(new ChangeListener(){
          @Override public void stateChanged(          ChangeEvent e){
            updateAll();
          }
        }
);
      }
      if (string1 != null) {
        mergedEntry.setField(field,string1);
        rb[0][row - 3].setSelected(true);
      }
 else {
        mergedEntry.setField(field,string2);
        rb[2][row - 3].setSelected(true);
      }
    }
 else {
      mergedEntry.setField(field,string1);
    }
    if (field.equals("abstract")) {
      JTextArea tf=new JTextArea();
      tf.setLineWrap(true);
      tf.setEditable(false);
      JScrollPane jsptf=new JScrollPane(tf);
      mergePanel.add(jsptf,cc.xy(11,row,"f, f"));
      tf.setText(string2);
      tf.setCaretPosition(0);
    }
 else {
      JTextArea tf=new JTextArea(string2);
      mergePanel.add(tf,cc.xy(11,row));
      tf.setCaretPosition(0);
      tf.setEditable(false);
    }
    row++;
  }
  mergePanel.add(new JSeparator(),cc.xyw(1,row,11));
  row++;
  label=new JLabel(Localization.lang("Merged entry"));
  font=label.getFont();
  label.setFont(font.deriveFont(font.getStyle() | Font.BOLD));
  mergePanel.add(label,cc.xy(1,row));
  String layoutString=Globals.prefs.get(JabRefPreferences.PREVIEW_0);
  pp=new PreviewPanel(null,mergedEntry,null,new MetaData(),layoutString);
  mergePanel.add(pp,cc.xyw(3,row,3));
  jta=new JTextArea();
  jta.setLineWrap(true);
  JScrollPane jspta=new JScrollPane(jta);
  mergePanel.add(jspta,cc.xyw(9,row,3));
  jta.setEditable(false);
  StringWriter sw=new StringWriter();
  try {
    new BibtexEntryWriter(new LatexFieldFormatter(),false).write(mergedEntry,sw);
  }
 catch (  IOException ex) {
    System.err.println(Localization.lang("Error in entry" + ": " + ex.getMessage()));
  }
  jta.setText(sw.getBuffer().toString());
  jta.setCaretPosition(0);
  layout.appendRow(RowSpec.decode("10px"));
  layout.appendColumn(ColumnSpec.decode("10px"));
  layout.insertRow(1,RowSpec.decode("10px"));
  layout.insertColumn(1,ColumnSpec.decode("10px"));
  if (mergePanel.getHeight() > DIM.height) {
    mergePanel.setSize(new Dimension(mergePanel.getWidth(),DIM.height));
  }
  if (mergePanel.getWidth() > DIM.width) {
    mergePanel.setSize(new Dimension(DIM.width,mergePanel.getHeight()));
  }
  doneBuilding=true;
  mergePanel.setVisible(true);
}
