{
  XParagraphCursor parCursor=UnoRuntime.queryInterface(XParagraphCursor.class,cursor);
  XPropertySet props=UnoRuntime.queryInterface(XPropertySet.class,parCursor);
  try {
    props.setPropertyValue(PARA_STYLE_NAME,parStyle);
  }
 catch (  IllegalArgumentException ex) {
    throw new UndefinedParagraphFormatException(parStyle);
  }
  int piv=0;
  int italic=0;
  int bold=0;
  int sup=0;
  int sub=0;
  int mono=0;
  int smallCaps=0;
  Matcher m=OOUtil.HTML_TAG.matcher(lText);
  while (m.find()) {
    String ss=lText.substring(piv,m.start());
    if (!ss.isEmpty()) {
      OOUtil.insertTextAtCurrentLocation(text,cursor,ss,(bold % 2) > 0,(italic % 2) > 0,mono > 0,smallCaps > 0,sup > 0,sub > 0);
    }
    String tag=m.group();
    if ("<b>".equals(tag)) {
      bold++;
    }
 else     if ("</b>".equals(tag)) {
      bold--;
    }
 else     if ("<i>".equals(tag) || "<em>".equals(tag)) {
      italic++;
    }
 else     if ("</i>".equals(tag) || "</em>".equals(tag)) {
      italic--;
    }
 else     if ("</monospace>".equals(tag)) {
      mono=0;
    }
 else     if ("<monospace>".equals(tag)) {
      mono=1;
    }
 else     if ("</smallcaps>".equals(tag)) {
      smallCaps=0;
    }
 else     if ("<smallcaps>".equals(tag)) {
      smallCaps=1;
    }
 else     if ("</sup>".equals(tag)) {
      sup=0;
    }
 else     if ("<sup>".equals(tag)) {
      sup=1;
    }
 else     if ("</sub>".equals(tag)) {
      sub=0;
    }
 else     if ("<sub>".equals(tag)) {
      sub=1;
    }
    piv=m.end();
  }
  if (piv < lText.length()) {
    OOUtil.insertTextAtCurrentLocation(text,cursor,lText.substring(piv),(bold % 2) > 0,(italic % 2) > 0,mono > 0,smallCaps > 0,sup > 0,sub > 0);
  }
  cursor.collapseToEnd();
}
