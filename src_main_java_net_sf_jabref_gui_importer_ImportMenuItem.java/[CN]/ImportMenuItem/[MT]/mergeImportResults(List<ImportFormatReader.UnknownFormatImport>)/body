{
  BibDatabase database=new BibDatabase();
  ParserResult directParserResult=null;
  boolean anythingUseful=false;
  for (  ImportFormatReader.UnknownFormatImport importResult : imports) {
    if (importResult == null) {
      continue;
    }
    if (ImportFormatReader.BIBTEX_FORMAT.equals(importResult.format)) {
      ParserResult pr=importResult.parserResult;
      anythingUseful=anythingUseful || pr.getDatabase().hasEntries() || (!pr.getDatabase().hasNoStrings());
      if (directParserResult == null) {
        directParserResult=pr;
      }
      for (      BibEntry entry : pr.getDatabase().getEntries()) {
        database.insertEntryWithDuplicationCheck(entry);
      }
      for (      BibtexString bs : pr.getDatabase().getStringValues()) {
        try {
          database.addString((BibtexString)bs.clone());
        }
 catch (        KeyCollisionException e) {
        }
      }
    }
 else {
      ParserResult pr=importResult.parserResult;
      Collection<BibEntry> entries=pr.getDatabase().getEntries();
      anythingUseful=anythingUseful | !entries.isEmpty();
      UpdateField.setAutomaticFields(entries,Globals.prefs.getUpdateFieldPreferences());
      boolean markEntries=!openInNew && EntryMarker.shouldMarkEntries();
      for (      BibEntry entry : entries) {
        if (markEntries) {
          EntryMarker.markEntry(entry,EntryMarker.IMPORT_MARK_LEVEL,false,new NamedCompound(""));
        }
        database.insertEntryWithDuplicationCheck(entry);
      }
    }
  }
  if (!anythingUseful) {
    return null;
  }
  if ((imports.size() == 1) && (directParserResult != null)) {
    return directParserResult;
  }
 else {
    return new ParserResult(database);
  }
}
