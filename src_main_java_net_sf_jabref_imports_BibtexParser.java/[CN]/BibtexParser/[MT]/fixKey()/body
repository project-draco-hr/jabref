{
  StringBuilder key=new StringBuilder();
  int lookahead_used=0;
  char currentChar;
  do {
    currentChar=(char)read();
    key.append(currentChar);
    lookahead_used++;
  }
 while (((currentChar != ',') && (currentChar != '\n') && (currentChar != '=')) && (lookahead_used < BibtexParser.LOOKAHEAD));
  unread(currentChar);
  key.deleteCharAt(key.length() - 1);
switch (currentChar) {
case '=':
    key=key.reverse();
  boolean matchedAlpha=false;
for (int i=0; i < key.length(); i++) {
  currentChar=key.charAt(i);
  if (!matchedAlpha && (currentChar == ' ')) {
    continue;
  }
  matchedAlpha=true;
  unread(currentChar);
  if ((currentChar == ' ') || (currentChar == '\n')) {
    StringBuilder newKey=new StringBuilder();
    for (int j=i; j < key.length(); j++) {
      currentChar=key.charAt(j);
      if (!Character.isWhitespace(currentChar)) {
        newKey.append(currentChar);
      }
    }
    parserResult.addWarning(Globals.lang("Line %0: Found corrupted BibTeX-key.",String.valueOf(line)));
    key=newKey.reverse();
  }
}
break;
case ',':
parserResult.addWarning(Globals.lang("Line %0: Found corrupted BibTeX-key (contains whitespaces).",String.valueOf(line)));
case '\n':
parserResult.addWarning(Globals.lang("Line %0: Found corrupted BibTeX-key (comma missing).",String.valueOf(line)));
break;
default :
unreadBuffer(key);
return "";
}
return removeWhitespaces(key).toString();
}
