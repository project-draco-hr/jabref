{
  if (!goOn) {
    return;
  }
  for (  BibtexEntry entry : entries) {
    List<File> files=new ArrayList<File>();
    String pdf=entry.getField("pdf");
    String[] dirs=panel.metaData().getFileDirectory("pdf");
    File f=FileUtil.expandFilename(pdf,dirs);
    if (f != null) {
      files.add(f);
    }
    dirs=panel.metaData().getFileDirectory(Globals.FILE_FIELD);
    String field=entry.getField(Globals.FILE_FIELD);
    if (field != null) {
      FileListTableModel tm=new FileListTableModel();
      tm.setContent(field);
      for (int j=0; j < tm.getRowCount(); j++) {
        FileListEntry flEntry=tm.getEntry(j);
        if (flEntry.getType() != null && flEntry.getType().getName().toLowerCase().equals("pdf")) {
          f=FileUtil.expandFilename(flEntry.getLink(),dirs);
          if (f != null) {
            files.add(f);
          }
        }
      }
    }
    optDiag.progressArea.append(entry.getCiteKey() + "\n");
    if (files.isEmpty()) {
      skipped++;
      optDiag.progressArea.append("  " + Localization.lang("Skipped - No PDF linked") + ".\n");
    }
 else {
      for (      File file : files) {
        if (!file.exists()) {
          skipped++;
          optDiag.progressArea.append("  " + Localization.lang("Skipped - PDF does not exist") + ":\n");
          optDiag.progressArea.append("    " + file.getPath() + "\n");
        }
 else {
          try {
            XMPUtil.writeXMP(file,entry,database);
            optDiag.progressArea.append("  " + Localization.lang("Ok") + ".\n");
            entriesChanged++;
          }
 catch (          Exception e) {
            optDiag.progressArea.append("  " + Localization.lang("Error while writing") + " '"+ file.getPath()+ "':\n");
            optDiag.progressArea.append("    " + e.getLocalizedMessage() + "\n");
            errors++;
          }
        }
      }
    }
    if (optDiag.canceled) {
      optDiag.progressArea.append("\n" + Localization.lang("Operation canceled.\n"));
      break;
    }
  }
  optDiag.progressArea.append("\n" + Localization.lang("Finished writing XMP for %0 file (%1 skipped, %2 errors).",String.valueOf(entriesChanged),String.valueOf(skipped),String.valueOf(errors)));
  optDiag.done();
}
