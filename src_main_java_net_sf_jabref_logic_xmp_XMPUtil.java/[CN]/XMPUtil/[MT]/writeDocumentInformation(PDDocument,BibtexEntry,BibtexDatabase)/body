{
  PDDocumentInformation di=document.getDocumentInformation();
  if (database != null) {
    entry=database.resolveForStrings(entry,false);
  }
  JabRefPreferences prefs=JabRefPreferences.getInstance();
  boolean useXmpPrivacyFilter=prefs.getBoolean(JabRefPreferences.USE_XMP_PRIVACY_FILTER);
  TreeSet<String> filters=new TreeSet<>(Arrays.asList(prefs.getStringArray(JabRefPreferences.XMP_PRIVACY_FILTERS)));
  Set<String> fields=entry.getFieldNames();
  for (  String field : fields) {
    if (useXmpPrivacyFilter && filters.contains(field)) {
      if (field.equals("author")) {
        di.setAuthor(null);
      }
 else       if (field.equals("title")) {
        di.setTitle(null);
      }
 else       if (field.equals("keywords")) {
        di.setKeywords(null);
      }
 else       if (field.equals("abstract")) {
        di.setSubject(null);
      }
 else {
        di.setCustomMetadataValue("bibtex/" + field,null);
      }
      continue;
    }
    if (field.equals("author")) {
      di.setAuthor(entry.getField("author"));
    }
 else     if (field.equals("title")) {
      di.setTitle(entry.getField("title"));
    }
 else     if (field.equals("keywords")) {
      di.setKeywords(entry.getField("keywords"));
    }
 else     if (field.equals("abstract")) {
      di.setSubject(entry.getField("abstract"));
    }
 else {
      di.setCustomMetadataValue("bibtex/" + field,entry.getField(field));
    }
  }
  di.setCustomMetadataValue("bibtex/entrytype",entry.getType().getName());
}
