{
  Collection<BibEntry> resolvedEntries;
  if (database == null) {
    resolvedEntries=bibtexEntries;
  }
 else {
    resolvedEntries=database.resolveForStrings(bibtexEntries,false);
  }
  try (PDDocument document=PDDocument.load(file.getAbsoluteFile())){
    if (document.isEncrypted()) {
      throw new EncryptedPdfsNotSupportedException();
    }
    if (writePDFInfo && (resolvedEntries.size() == 1)) {
      XMPUtil.writeDocumentInformation(document,resolvedEntries.iterator().next(),null,xmpPreferences);
      XMPUtil.writeDublinCore(document,resolvedEntries,null,xmpPreferences);
    }
    PDDocumentCatalog catalog=document.getDocumentCatalog();
    PDMetadata metaRaw=catalog.getMetadata();
    XMPMetadata meta;
    if (metaRaw == null) {
      meta=new XMPMetadata();
    }
 else {
      meta=new XMPMetadata(XMLUtil.parse(metaRaw.createInputStream()));
    }
    meta.addXMLNSMapping(XMPSchemaBibtex.NAMESPACE,XMPSchemaBibtex.class);
    List<XMPSchema> schemas=meta.getSchemasByNamespaceURI(XMPSchemaBibtex.NAMESPACE);
    for (    XMPSchema schema : schemas) {
      XMPSchemaBibtex bib=(XMPSchemaBibtex)schema;
      bib.getElement().getParentNode().removeChild(bib.getElement());
    }
    for (    BibEntry e : resolvedEntries) {
      XMPSchemaBibtex bibtex=new XMPSchemaBibtex(meta);
      meta.addSchema(bibtex);
      bibtex.setBibtexEntry(e,xmpPreferences);
    }
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    meta.save(os);
    ByteArrayInputStream is=new ByteArrayInputStream(os.toByteArray());
    PDMetadata metadataStream=new PDMetadata(document,is,false);
    catalog.setMetadata(metadataStream);
    try {
      document.save(file.getAbsolutePath());
    }
 catch (    COSVisitorException e) {
      LOGGER.debug("Could not write XMP metadata",e);
      throw new TransformerException("Could not write XMP metadata: " + e.getLocalizedMessage(),e);
    }
  }
 }
