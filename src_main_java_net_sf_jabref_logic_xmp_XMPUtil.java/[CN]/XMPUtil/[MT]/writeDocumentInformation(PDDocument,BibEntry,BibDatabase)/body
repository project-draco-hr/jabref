{
  PDDocumentInformation di=document.getDocumentInformation();
  BibEntry resolvedEntry;
  if (database == null) {
    resolvedEntry=entry;
  }
 else {
    resolvedEntry=database.resolveForStrings(entry,false);
  }
  JabRefPreferences prefs=JabRefPreferences.getInstance();
  boolean useXmpPrivacyFilter=prefs.getBoolean(JabRefPreferences.USE_XMP_PRIVACY_FILTER);
  Set<String> filters=new TreeSet<>(prefs.getStringList(JabRefPreferences.XMP_PRIVACY_FILTERS));
  Set<String> fields=resolvedEntry.getFieldNames();
  for (  String field : fields) {
    if (useXmpPrivacyFilter && filters.contains(field)) {
      if (FieldName.AUTHOR.equals(field)) {
        di.setAuthor(null);
      }
 else       if (FieldName.TITLE.equals(field)) {
        di.setTitle(null);
      }
 else       if (FieldName.KEYWORDS.equals(field)) {
        di.setKeywords(null);
      }
 else       if (FieldName.ABSTRACT.equals(field)) {
        di.setSubject(null);
      }
 else {
        di.setCustomMetadataValue("bibtex/" + field,null);
      }
      continue;
    }
    if (FieldName.AUTHOR.equals(field)) {
      di.setAuthor(resolvedEntry.getField(FieldName.AUTHOR));
    }
 else     if (FieldName.TITLE.equals(field)) {
      di.setTitle(resolvedEntry.getField(FieldName.TITLE));
    }
 else     if (FieldName.KEYWORDS.equals(field)) {
      di.setKeywords(resolvedEntry.getField(FieldName.KEYWORDS));
    }
 else     if (FieldName.ABSTRACT.equals(field)) {
      di.setSubject(resolvedEntry.getField(FieldName.ABSTRACT));
    }
 else {
      di.setCustomMetadataValue("bibtex/" + field,resolvedEntry.getField(field));
    }
  }
  di.setCustomMetadataValue("bibtex/entrytype",EntryUtil.capitalizeFirst(resolvedEntry.getType()));
}
