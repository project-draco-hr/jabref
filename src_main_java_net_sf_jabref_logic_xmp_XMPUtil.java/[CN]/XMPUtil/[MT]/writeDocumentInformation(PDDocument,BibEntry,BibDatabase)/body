{
  PDDocumentInformation di=document.getDocumentInformation();
  BibEntry resolvedEntry;
  if (database == null) {
    resolvedEntry=entry;
  }
 else {
    resolvedEntry=database.resolveForStrings(entry,false);
  }
  JabRefPreferences prefs=JabRefPreferences.getInstance();
  boolean useXmpPrivacyFilter=prefs.getBoolean(JabRefPreferences.USE_XMP_PRIVACY_FILTER);
  Set<String> filters=new TreeSet<>(prefs.getStringList(JabRefPreferences.XMP_PRIVACY_FILTERS));
  for (  Entry<String,String> field : resolvedEntry.getFieldMap().entrySet()) {
    String fieldName=field.getKey();
    String fieldContent=field.getValue();
    if (useXmpPrivacyFilter && filters.contains(fieldName)) {
      if (FieldName.AUTHOR.equals(fieldName)) {
        di.setAuthor(null);
      }
 else       if (FieldName.TITLE.equals(fieldName)) {
        di.setTitle(null);
      }
 else       if (FieldName.KEYWORDS.equals(fieldName)) {
        di.setKeywords(null);
      }
 else       if (FieldName.ABSTRACT.equals(fieldName)) {
        di.setSubject(null);
      }
 else {
        di.setCustomMetadataValue("bibtex/" + fieldName,null);
      }
      continue;
    }
    if (FieldName.AUTHOR.equals(fieldName)) {
      di.setAuthor(fieldContent);
    }
 else     if (FieldName.TITLE.equals(fieldName)) {
      di.setTitle(fieldContent);
    }
 else     if (FieldName.KEYWORDS.equals(fieldName)) {
      di.setKeywords(fieldContent);
    }
 else     if (FieldName.ABSTRACT.equals(fieldName)) {
      di.setSubject(fieldContent);
    }
 else {
      di.setCustomMetadataValue("bibtex/" + fieldName,fieldContent);
    }
  }
  di.setCustomMetadataValue("bibtex/entrytype",EntryUtil.capitalizeFirst(resolvedEntry.getType()));
}
