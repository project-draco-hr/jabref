{
  List<BibEntry> result=new LinkedList<>();
  try (PDDocument document=PDDocument.load(inputStream)){
    if (document.isEncrypted()) {
      throw new EncryptionNotSupportedException("Error: Cannot read metadata from encrypted document.");
    }
    XMPMetadata meta=XMPUtil.getXMPMetadata(document);
    if (meta != null) {
      List<XMPSchema> schemas=meta.getSchemasByNamespaceURI(XMPSchemaBibtex.NAMESPACE);
      for (      XMPSchema schema : schemas) {
        XMPSchemaBibtex bib=(XMPSchemaBibtex)schema;
        result.add(bib.getBibtexEntry());
      }
      if (result.isEmpty()) {
        schemas=meta.getSchemasByNamespaceURI(XMPSchemaDublinCore.NAMESPACE);
        for (        XMPSchema schema : schemas) {
          XMPSchemaDublinCore dc=(XMPSchemaDublinCore)schema;
          BibEntry entry=XMPUtil.getBibtexEntryFromDublinCore(dc);
          if (entry != null) {
            result.add(entry);
          }
        }
      }
    }
    if (result.isEmpty()) {
      BibEntry entry=XMPUtil.getBibtexEntryFromDocumentInformation(document.getDocumentInformation());
      if (entry != null) {
        result.add(entry);
      }
    }
  }
   if (result.isEmpty()) {
    return null;
  }
  return result;
}
