{
  List<BibEntry> result=new LinkedList<>();
  try (PDDocument document=loadWithAutomaticDecryption(inputStream)){
    Optional<XMPMetadata> meta=XMPUtil.getXMPMetadata(document);
    if (meta.isPresent()) {
      List<XMPSchema> schemas=meta.get().getSchemasByNamespaceURI(XMPSchemaBibtex.NAMESPACE);
      for (      XMPSchema schema : schemas) {
        XMPSchemaBibtex bib=(XMPSchemaBibtex)schema;
        BibEntry entry=bib.getBibtexEntry();
        if (entry.getType() == null) {
          entry.setType("misc");
        }
        result.add(entry);
      }
      if (result.isEmpty()) {
        schemas=meta.get().getSchemasByNamespaceURI(XMPSchemaDublinCore.NAMESPACE);
        for (        XMPSchema schema : schemas) {
          XMPSchemaDublinCore dc=(XMPSchemaDublinCore)schema;
          Optional<BibEntry> entry=XMPUtil.getBibtexEntryFromDublinCore(dc);
          if (entry.isPresent()) {
            if (entry.get().getType() == null) {
              entry.get().setType("misc");
            }
            result.add(entry.get());
          }
        }
      }
    }
    if (result.isEmpty()) {
      PDDocumentInformation documentInformation=document.getDocumentInformation();
      Optional<BibEntry> entry=XMPUtil.getBibtexEntryFromDocumentInformation(documentInformation);
      if (entry.isPresent()) {
        result.add(entry.get());
      }
    }
  }
   if (result.isEmpty()) {
    return Collections.emptyList();
  }
  return result;
}
