{
  BibEntry entry=new BibEntry();
  List<String> contributors=dcSchema.getContributors();
  if ((contributors != null) && !contributors.isEmpty()) {
    entry.setField(FieldName.EDITOR,String.join(" and ",contributors));
  }
  List<String> creators=dcSchema.getCreators();
  if ((creators != null) && !creators.isEmpty()) {
    entry.setField(FieldName.AUTHOR,String.join(" and ",creators));
  }
  List<String> dates=dcSchema.getSequenceList("dc:date");
  if ((dates != null) && !dates.isEmpty()) {
    String date=dates.get(0).trim();
    Calendar c=null;
    try {
      c=DateConverter.toCalendar(date);
    }
 catch (    IOException ignored) {
    }
    if (c != null) {
      entry.setField(FieldName.YEAR,String.valueOf(c.get(Calendar.YEAR)));
      if (date.length() > 4) {
        entry.setField(FieldName.MONTH,MonthUtil.getMonthByIndex(c.get(Calendar.MONTH)).bibtexFormat);
      }
    }
  }
  String s=dcSchema.getDescription();
  if (s != null) {
    entry.setField(FieldName.ABSTRACT,s);
  }
  s=dcSchema.getIdentifier();
  if (s != null) {
    entry.setField(FieldName.DOI,s);
  }
  List<String> publishers=dcSchema.getPublishers();
  if ((publishers != null) && !publishers.isEmpty()) {
    entry.setField(FieldName.PUBLISHER,String.join(" and ",publishers));
  }
  List<String> relationships=dcSchema.getRelationships();
  if (relationships != null) {
    for (    String r : relationships) {
      if (r.startsWith("bibtex/")) {
        r=r.substring("bibtex/".length());
        int i=r.indexOf('/');
        if (i != -1) {
          entry.setField(r.substring(0,i),r.substring(i + 1));
        }
      }
    }
  }
  s=dcSchema.getRights();
  if (s != null) {
    entry.setField("rights",s);
  }
  s=dcSchema.getSource();
  if (s != null) {
    entry.setField("source",s);
  }
  List<String> subjects=dcSchema.getSubjects();
  if (subjects != null) {
    entry.addKeywords(subjects,xmpPreferences.getKeywordSeparator());
  }
  s=dcSchema.getTitle();
  if (s != null) {
    entry.setField(FieldName.TITLE,s);
  }
  List<String> l=dcSchema.getTypes();
  if ((l != null) && !l.isEmpty()) {
    s=l.get(0);
    if (s != null) {
      entry.setType(s);
    }
  }
  return entry.getFieldNames().isEmpty() ? Optional.empty() : Optional.of(entry);
}
