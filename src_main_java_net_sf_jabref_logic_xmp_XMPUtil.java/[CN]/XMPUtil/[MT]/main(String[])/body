{
  if (Globals.prefs == null) {
    Globals.prefs=JabRefPreferences.getInstance();
  }
switch (args.length) {
case 0:
    XMPUtil.usage();
  break;
case 1:
if (args[0].endsWith(".pdf")) {
  List<BibEntry> l=XMPUtil.readXMP(new File(args[0]));
  BibEntryWriter bibtexEntryWriter=new BibEntryWriter(new LatexFieldFormatter(),false);
  for (  BibEntry entry : l) {
    StringWriter sw=new StringWriter();
    bibtexEntryWriter.write(entry,sw,BibDatabaseMode.BIBTEX);
    System.out.println(sw.getBuffer());
  }
}
 else if (args[0].endsWith(".bib")) {
  try (FileReader fr=new FileReader(args[0])){
    ParserResult result=BibtexParser.parse(fr);
    Collection<BibEntry> entries=result.getDatabase().getEntries();
    if (entries.isEmpty()) {
      System.err.println("Could not find BibEntry in " + args[0]);
    }
 else {
      System.out.println(XMPUtil.toXMP(entries,result.getDatabase()));
    }
  }
 }
 else {
  XMPUtil.usage();
}
break;
case 2:
if ("-x".equals(args[0]) && args[1].endsWith(".pdf")) {
XMPMetadata meta=XMPUtil.readRawXMP(new File(args[1]));
if (meta == null) {
System.err.println("The given pdf does not contain any XMP-metadata.");
}
 else {
XMLUtil.save(meta.getXMPDocument(),System.out,StandardCharsets.UTF_8.name());
}
break;
}
if (args[0].endsWith(".bib") && args[1].endsWith(".pdf")) {
ParserResult result=BibtexParser.parse(new FileReader(args[0]));
Collection<BibEntry> entries=result.getDatabase().getEntries();
if (entries.isEmpty()) {
System.err.println("Could not find BibEntry in " + args[0]);
}
 else {
XMPUtil.writeXMP(new File(args[1]),entries,result.getDatabase(),false);
System.out.println("XMP written.");
}
break;
}
XMPUtil.usage();
break;
case 3:
if (!args[1].endsWith(".bib") && !args[2].endsWith(".pdf")) {
XMPUtil.usage();
break;
}
ParserResult result=BibtexParser.parse(new FileReader(args[1]));
BibEntry e=result.getDatabase().getEntryByKey(args[0]);
if (e == null) {
System.err.println("Could not find BibEntry " + args[0] + " in "+ args[0]);
}
 else {
XMPUtil.writeXMP(new File(args[2]),e,result.getDatabase());
System.out.println("XMP written.");
}
break;
default :
XMPUtil.usage();
}
}
