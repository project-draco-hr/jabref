{
  if (database != null) {
    entry=database.resolveForStrings(entry,false);
  }
  JabRefPreferences prefs=JabRefPreferences.getInstance();
  boolean useXmpPrivacyFilter=prefs.getBoolean(JabRefPreferences.USE_XMP_PRIVACY_FILTER);
  Set<String> filters=new TreeSet<>(prefs.getStringList(JabRefPreferences.XMP_PRIVACY_FILTERS));
  for (  String field : entry.getFieldNames()) {
    if (useXmpPrivacyFilter && filters.contains(field)) {
      continue;
    }
    if ("editor".equals(field)) {
      String authors=entry.getField(field);
      AuthorList list=AuthorList.getAuthorList(authors);
      for (      AuthorList.Author author : list.getAuthorList()) {
        dcSchema.addContributor(author.getFirstLast(false));
      }
      continue;
    }
    if ("author".equals(field)) {
      String authors=entry.getField(field);
      AuthorList list=AuthorList.getAuthorList(authors);
      int n=list.size();
      for (int i=0; i < n; i++) {
        dcSchema.addCreator(list.getAuthor(i).getFirstLast(false));
      }
      continue;
    }
    if ("month".equals(field)) {
      continue;
    }
    if ("year".equals(field)) {
      String publicationDate=entry.getPublicationDate();
      if (publicationDate != null) {
        dcSchema.addSequenceValue("dc:date",publicationDate);
      }
      continue;
    }
    if ("abstract".equals(field)) {
      String o=entry.getField(field);
      dcSchema.setDescription(o);
      continue;
    }
    if ("doi".equals(field)) {
      String o=entry.getField(field);
      dcSchema.setIdentifier(o);
      continue;
    }
    if ("publisher".equals(field)) {
      String o=entry.getField(field);
      dcSchema.addPublisher(o);
      continue;
    }
    if ("keywords".equals(field)) {
      String o=entry.getField(field);
      String[] keywords=o.split(",");
      for (      String keyword : keywords) {
        dcSchema.addSubject(keyword.trim());
      }
      continue;
    }
    if ("title".equals(field)) {
      String o=entry.getField(field);
      dcSchema.setTitle(o);
      continue;
    }
    String o=entry.getField(field);
    dcSchema.addRelation("bibtex/" + field + '/'+ o);
  }
  dcSchema.setFormat("application/pdf");
  TypedBibEntry typedEntry=new TypedBibEntry(entry,Optional.empty(),BibDatabaseMode.BIBTEX);
  String o=typedEntry.getTypeForDisplay();
  if (!o.isEmpty()) {
    dcSchema.addType(o);
  }
}
