{
  try {
    URL url=new URL(ACMPortalFetcher.startUrl + ACMPortalFetcher.bibtexUrl + ID+ ACMPortalFetcher.bibtexUrlEnd);
    BufferedReader in=new BufferedReader(new InputStreamReader(url.openStream()));
    ParserResult result=BibtexParser.parse(in);
    in.close();
    Collection<BibtexEntry> item=result.getDatabase().getEntries();
    if (item.isEmpty()) {
      return null;
    }
    BibtexEntry entry=item.iterator().next();
    Thread.sleep(ACMPortalFetcher.WAIT_TIME);
    if (abs) {
      url=new URL(ACMPortalFetcher.startUrl + ACMPortalFetcher.abstractUrl + ID);
      String page=getResults(url);
      Matcher absM=ACMPortalFetcher.absPattern.matcher(page);
      if (absM.find()) {
        entry.setField("abstract",absM.group(1).trim());
      }
      Thread.sleep(ACMPortalFetcher.WAIT_TIME);
    }
    return entry;
  }
 catch (  NoSuchElementException e) {
    LOGGER.info("Bad Bibtex record read at: " + ACMPortalFetcher.bibtexUrl + ID+ ACMPortalFetcher.bibtexUrlEnd);
    e.printStackTrace();
    return null;
  }
catch (  MalformedURLException e) {
    e.printStackTrace();
    return null;
  }
catch (  ConnectException e) {
    e.printStackTrace();
    return null;
  }
catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
catch (  InterruptedException ignored) {
    return null;
  }
}
