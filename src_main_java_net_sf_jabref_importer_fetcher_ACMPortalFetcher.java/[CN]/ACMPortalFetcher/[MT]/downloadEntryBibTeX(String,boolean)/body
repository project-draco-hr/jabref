{
  try {
    URL url=new URL(ACMPortalFetcher.startUrl + ACMPortalFetcher.bibtexUrl + ID+ ACMPortalFetcher.bibtexUrlEnd);
    URLConnection connection=url.openConnection();
    connection.addRequestProperty("User-Agent","Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0");
    Collection<BibEntry> items=null;
    try (BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()))){
      items=BibtexParser.parse(in).getDatabase().getEntries();
    }
 catch (    IOException e) {
      LOGGER.info("Download of BibTeX information from ACM Portal failed.",e);
    }
    if ((items == null) || items.isEmpty()) {
      return null;
    }
    BibEntry entry=items.iterator().next();
    Thread.sleep(ACMPortalFetcher.WAIT_TIME);
    if (downloadAbstract) {
      url=new URL(ACMPortalFetcher.startUrl + ACMPortalFetcher.abstractUrl + ID);
      String page=Util.getResults(url);
      Matcher absM=ACMPortalFetcher.absPattern.matcher(page);
      if (absM.find()) {
        entry.setField("abstract",absM.group(1).trim());
      }
      Thread.sleep(ACMPortalFetcher.WAIT_TIME);
    }
    return entry;
  }
 catch (  NoSuchElementException e) {
    LOGGER.info("Bad Bibtex record read at: " + ACMPortalFetcher.bibtexUrl + ID+ ACMPortalFetcher.bibtexUrlEnd,e);
    return null;
  }
catch (  MalformedURLException e) {
    LOGGER.info("Malformed URL.",e);
    return null;
  }
catch (  IOException e) {
    LOGGER.info("Cannot connect.",e);
    return null;
  }
catch (  InterruptedException ignored) {
    return null;
  }
}
