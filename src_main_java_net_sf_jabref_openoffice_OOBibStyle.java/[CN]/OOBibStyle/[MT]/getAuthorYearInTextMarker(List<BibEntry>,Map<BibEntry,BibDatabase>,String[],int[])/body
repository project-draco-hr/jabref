{
  String authorField=getStringCitProperty(AUTHOR_FIELD);
  int maxA=getIntCitProperty(MAX_AUTHORS);
  String yearSep=getStringCitProperty(IN_TEXT_YEAR_SEPARATOR);
  String startBrace=getStringCitProperty(BRACKET_BEFORE);
  String endBrace=getStringCitProperty(BRACKET_AFTER);
  String citationSeparator=getStringCitProperty(CITATION_SEPARATOR);
  String yearField=getStringCitProperty(YEAR_FIELD);
  String andString=getStringCitProperty(AUTHOR_LAST_SEPARATOR_IN_TEXT);
  if (andString == null) {
    andString=getStringCitProperty(AUTHOR_LAST_SEPARATOR);
  }
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < entries.size(); i++) {
    BibEntry currentEntry=entries.get(i);
    if (currentEntry == null) {
      continue;
    }
    BibDatabase currentDatabase=database.get(currentEntry);
    int unlimA=unlimAuthors == null ? -1 : unlimAuthors[i];
    int maxAuthors=unlimA > 0 ? unlimA : maxA;
    if (i > 0) {
      sb.append(citationSeparator);
    }
    String author=getCitationMarkerField(currentEntry,currentDatabase,authorField);
    String authorString=createAuthorList(author,maxAuthors,andString,yearSep);
    sb.append(authorString);
    sb.append(startBrace);
    String year=getCitationMarkerField(currentEntry,currentDatabase,yearField);
    if (year != null) {
      sb.append(year);
    }
    if ((uniquefiers != null) && (uniquefiers[i] != null)) {
      sb.append(uniquefiers[i]);
    }
    sb.append(endBrace);
  }
  return sb.toString();
}
