{
  if (directory.length() > 0) {
    String[] dirs=directory.split("(\\\\|/)");
    for (int i=0; i < dirs.length; i++) {
      System.out.println(currentDirectory);
      String dirToProcess=dirs[i];
      dirToProcess=expandBrackets(dirToProcess,entry,database);
      if (dirToProcess.equals("")) {
        currentDirectory=new File("/");
        continue;
      }
      if (dirToProcess.matches("^.:$")) {
        currentDirectory=new File(dirToProcess + "/");
        continue;
      }
      if (dirToProcess.equals(".")) {
        continue;
      }
      if (dirToProcess.equals("..")) {
        currentDirectory=new File(currentDirectory.getParent());
        continue;
      }
      if (dirToProcess.equals("*")) {
        File[] subDirs=currentDirectory.listFiles();
        if (subDirs == null)         return null;
        String restOfDirString=join(dirs,"/",i + 1,dirs.length);
        for (int sub=0; sub < subDirs.length; sub++) {
          if (subDirs[sub].isDirectory()) {
            String result=findFile(subDirs[sub],entry,database,restOfDirString,file);
            if (result != null)             return result;
          }
        }
        return null;
      }
      if (dirToProcess.equals("**")) {
        List toDo=new LinkedList();
        toDo.add(currentDirectory);
        String restOfDirString=join(dirs,"/",i + 1,dirs.length);
        String result=findFile(currentDirectory,entry,database,restOfDirString,file);
        if (result != null)         return result;
        while (!toDo.isEmpty()) {
          File[] subDirs=((File)toDo.remove(0)).listFiles();
          if (subDirs == null)           continue;
          toDo.addAll(Arrays.asList(subDirs));
          for (int sub=0; sub < subDirs.length; sub++) {
            result=findFile(subDirs[sub],entry,database,restOfDirString,file);
            if (result != null)             return result;
          }
        }
        return null;
      }
      final Pattern toMatch=Pattern.compile(dirToProcess);
      File[] matches=currentDirectory.listFiles(new FilenameFilter(){
        public boolean accept(        File arg0,        String arg1){
          return toMatch.matcher(arg1).matches();
        }
      }
);
      if (matches == null || matches.length == 0)       return null;
      currentDirectory=matches[0];
      if (!currentDirectory.exists())       return null;
    }
  }
  String filenameToLookFor=expandBrackets(file,entry,database);
  final Pattern toMatch=Pattern.compile("^" + filenameToLookFor + "$");
  File[] matches=currentDirectory.listFiles(new FilenameFilter(){
    public boolean accept(    File arg0,    String arg1){
      return toMatch.matcher(arg1).matches();
    }
  }
);
  if (matches == null || matches.length == 0)   return null;
  try {
    return matches[0].getCanonicalPath();
  }
 catch (  IOException e) {
    return null;
  }
}
