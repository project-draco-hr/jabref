{
  Objects.requireNonNull(stream);
  List<BibEntry> bibitems=new ArrayList<>();
  String paperNoStr=null;
  this.line=0;
  try (BufferedReader in=new BufferedReader(ImportFormatReader.getReaderDefaultEncoding(stream))){
    readLine(in);
    while (this.lastLine != null) {
      if (this.lastLine.startsWith("-----------------------------")) {
        this.inOverviewSection=this.preLine.startsWith("In this issue we have");
      }
      if (isStartOfWorkingPaper()) {
        BibEntry be=new BibEntry(IdGenerator.next());
        be.setType("techreport");
        paperNoStr=this.lastLine.substring(0,this.lastLine.indexOf('.'));
        parseTitleString(be,in);
        if (startsWithKeyword(RepecNepImporter.RECOGNIZED_FIELDS)) {
          parseAdditionalFields(be,false,in);
        }
 else {
          readLine(in);
          parseAuthors(be,in);
          readLine(in);
        }
        if (!startsWithKeyword(RepecNepImporter.RECOGNIZED_FIELDS)) {
          parseAbstract(be,in);
        }
        parseAdditionalFields(be,true,in);
        bibitems.add(be);
        paperNoStr=null;
      }
 else {
        this.preLine=this.lastLine;
        readLine(in);
      }
    }
  }
 catch (  Exception e) {
    String message="Error in REPEC-NEP import on line " + this.line;
    if (paperNoStr != null) {
      message+=", paper no. " + paperNoStr + ": ";
    }
    message+=e.getLocalizedMessage();
    LOGGER.error(message,e);
    return ParserResult.fromErrorMessage(message);
  }
  return new ParserResult(bibitems);
}
