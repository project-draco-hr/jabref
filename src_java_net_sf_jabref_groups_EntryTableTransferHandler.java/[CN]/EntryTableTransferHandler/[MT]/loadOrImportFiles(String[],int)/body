{
  OpenDatabaseAction openAction=new OpenDatabaseAction(frame,false);
  ArrayList<String> notBibFiles=new ArrayList<String>();
  String encoding=Globals.prefs.get("defaultEncoding");
  for (int i=0; i < fileNames.length; i++) {
    String extension="";
    ExternalFileType fileType=null;
    int index=fileNames[i].lastIndexOf('.');
    if ((index >= 0) && (index < fileNames[i].length())) {
      extension=fileNames[i].substring(index + 1).toLowerCase();
      fileType=Globals.prefs.getExternalFileTypeByExt(extension);
    }
    if (extension.equals("bib")) {
      File f=new File(fileNames[i]);
      try {
        ParserResult pr=OpenDatabaseAction.loadDatabase(f,encoding);
        if ((pr == null) || (pr == ParserResult.INVALID_FORMAT)) {
          notBibFiles.add(fileNames[i]);
        }
 else {
          openAction.addNewDatabase(pr,f,true);
          frame.getFileHistory().newFile(fileNames[i]);
        }
      }
 catch (      IOException e) {
        notBibFiles.add(fileNames[i]);
      }
      continue;
    }
    if (fileType != null && dropRow >= 0) {
      boolean local=true;
      DroppedFileHandler dfh=new DroppedFileHandler(frame,panel);
      dfh.handleDroppedfile(fileNames[i],fileType,local,entryTable,dropRow);
      continue;
    }
    notBibFiles.add(fileNames[i]);
  }
  if (notBibFiles.size() > 0) {
    String[] toImport=new String[notBibFiles.size()];
    notBibFiles.toArray(toImport);
    ImportMenuItem importer=new ImportMenuItem(frame,(entryTable == null));
    importer.automatedImport(toImport);
  }
}
