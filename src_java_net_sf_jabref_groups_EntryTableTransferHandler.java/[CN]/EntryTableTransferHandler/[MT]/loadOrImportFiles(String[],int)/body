{
  OpenDatabaseAction openAction=new OpenDatabaseAction(frame,false);
  ArrayList notBibFiles=new ArrayList();
  String encoding=Globals.prefs.get("defaultEncoding");
  for (int i=0; i < fileNames.length; i++) {
    String extension="";
    ExternalFileType fileType=null;
    int index=fileNames[i].lastIndexOf('.');
    if ((index >= 0) && (index < fileNames[i].length())) {
      extension=fileNames[i].substring(index + 1).toLowerCase();
      fileType=Globals.prefs.getExternalFileType(extension);
    }
    if (extension.equals("bib")) {
      File f=new File(fileNames[i]);
      try {
        ParserResult pr=OpenDatabaseAction.loadDatabase(f,encoding);
        if ((pr == null) || (pr == ParserResult.INVALID_FORMAT)) {
          notBibFiles.add(fileNames[i]);
        }
 else {
          openAction.addNewDatabase(pr,f,false);
        }
      }
 catch (      IOException e) {
        notBibFiles.add(fileNames[i]);
      }
      continue;
    }
    if (extension.equals("pdf")) {
      Collection c;
      try {
        c=XMPUtil.readXMP(fileNames[i]);
      }
 catch (      IOException e1) {
        c=null;
        frame.output(Globals.lang("No XMP metadata found in " + fileNames[i]));
      }
      if (c != null && c.size() > 0) {
        Iterator it=c.iterator();
        BasePanel panel=frame.basePanel();
        if (panel == null) {
          BibtexDatabase database=new BibtexDatabase();
          frame.addTab(database,null,null,Globals.prefs.get("defaultEncoding"),true);
          frame.output(Globals.lang("New database created."));
          panel=frame.basePanel();
        }
        BibtexDatabase database=frame.basePanel().database();
        NamedCompound ce=new NamedCompound(Globals.lang("Drog PDF"));
        while (it.hasNext()) {
          BibtexEntry e=(BibtexEntry)it.next();
          try {
            e.setId(Util.createNeutralId());
            database.insertEntry(e);
            ce.addEdit(new UndoableInsertEntry(database,e,panel));
          }
 catch (          Exception e2) {
          }
        }
        ce.end();
        panel.undoManager.addEdit(ce);
        panel.markBaseChanged();
        continue;
      }
    }
    if (fileType != null) {
      if (dropRow >= 0) {
        boolean local=true;
      }
      continue;
    }
    notBibFiles.add(fileNames[i]);
  }
  if (notBibFiles.size() > 0) {
    String[] toImport=new String[notBibFiles.size()];
    notBibFiles.toArray(toImport);
    ImportMenuItem importer=new ImportMenuItem(frame,(entryTable == null));
    importer.automatedImport(toImport);
  }
}
