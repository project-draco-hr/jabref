{
  Object res=processDMLWithResults(conn,"SELECT * FROM groups ORDER BY groups_id;");
  if (res instanceof Statement) {
    Statement statement=(Statement)res;
    ResultSet rs=statement.getResultSet();
    GroupTreeNode rootNode=new GroupTreeNode(new AllEntriesGroup());
    HashMap<String,GroupTreeNode> groups=new HashMap<String,GroupTreeNode>();
    LinkedHashMap<GroupTreeNode,String> parentIds=new LinkedHashMap<GroupTreeNode,String>();
    while (rs.next()) {
      AbstractGroup group=null;
      String typeId=findGroupTypeName(dbtype,rs.getString("group_types_id"),conn);
      if (typeId.equals(AllEntriesGroup.ID)) {
        groups.put(rs.getString("groups_id"),rootNode);
      }
 else       if (typeId.equals(ExplicitGroup.ID)) {
        group=new ExplicitGroup(rs.getString("label"),rs.getInt("hierarchical_context"));
      }
 else       if (typeId.equals(KeywordGroup.ID)) {
        System.out.println("Keyw: " + rs.getBoolean("case_sensitive"));
        group=new KeywordGroup(rs.getString("label"),Util.unquote(rs.getString("search_field"),'\\'),Util.unquote(rs.getString("search_expression"),'\\'),rs.getBoolean("case_sensitive"),rs.getBoolean("reg_exp"),rs.getInt("hierarchical_context"));
      }
 else       if (typeId.equals(SearchGroup.ID)) {
        System.out.println("Search: " + rs.getBoolean("case_sensitive"));
        group=new SearchGroup(rs.getString("label"),Util.unquote(rs.getString("search_expression"),'\\'),rs.getBoolean("case_sensitive"),rs.getBoolean("reg_exp"),rs.getInt("hierarchical_context"));
      }
      if (group != null) {
        GroupTreeNode node=new GroupTreeNode(group);
        parentIds.put(node,rs.getString("parent_id"));
        groups.put(rs.getString("groups_id"),node);
      }
    }
    statement.close();
    for (Iterator<GroupTreeNode> i=parentIds.keySet().iterator(); i.hasNext(); ) {
      GroupTreeNode node=i.next();
      String parentId=parentIds.get(node);
      GroupTreeNode parent=groups.get(parentId);
      if (parent == null) {
      }
 else {
        parent.add(node);
      }
    }
    res=processDMLWithResults(conn,"SELECT * FROM entry_group;");
    if (res instanceof Statement) {
      statement=(Statement)res;
      rs=statement.getResultSet();
      while (rs.next()) {
        String entryId=rs.getString("entries_id"), groupId=rs.getString("groups_id");
        GroupTreeNode node=groups.get(groupId);
        if ((node != null) && (node.getGroup() instanceof ExplicitGroup)) {
          ExplicitGroup group=(ExplicitGroup)node.getGroup();
          group.addEntry(entries.get(entryId));
        }
 else {
        }
      }
      statement.close();
    }
    metaData.setGroups(rootNode);
  }
}
